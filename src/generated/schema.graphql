directive @cacheable on QUERY

directive @optionalField on FIELD

directive @principalField on FIELD

type ARImage {
  height: Int
  imageURLs: ImageURLs
  internalID: ID!
  width: Int
}

input ARImageInput {
  internalID: ID!
}

input AcceptPartnerAgreementInput {
  clientMutationId: String
  partnerAgreementID: String!
}

type AcceptPartnerAgreementPayload {
  clientMutationId: String
  partnerAgreementOrErrors: PartnerAgreementOrErrorsUnion!
}

type AccountMutationFailure {
  mutationError: GravityMutationError
}

type AccountMutationSuccess {
  success: Boolean
}

union AccountMutationType = AccountMutationFailure | AccountMutationSuccess

type AccountRequest {
  id: ID!
  internalID: ID!
  notes: String
}

type AckTaskFailure {
  mutationError: GravityMutationError!
}

input AckTaskMutationInput {
  clientMutationId: String
  id: String!
}

type AckTaskMutationPayload {
  clientMutationId: String
  homeViewTasksSection: HomeViewSectionTasks
  taskOrError: AckTaskResponseOrError!
}

union AckTaskResponseOrError = AckTaskFailure | AckTaskSuccess

type AckTaskSuccess {
  task: Task!
}

type AddArtworkToPartnerShowFailure {
  mutationError: GravityMutationError
}

input AddArtworkToPartnerShowMutationInput {
  artworkId: String!
  clientMutationId: String
  partnerId: String!
  showId: String!
}

type AddArtworkToPartnerShowMutationPayload {
  clientMutationId: String
  showOrError: AddArtworkToPartnerShowResponseOrError
}

union AddArtworkToPartnerShowResponseOrError = AddArtworkToPartnerShowFailure | AddArtworkToPartnerShowSuccess

type AddArtworkToPartnerShowSuccess {
  show: Show
}

input AddAssetToConsignmentSubmissionInput {
  assetType: String
  clientMutationId: String
  externalSubmissionId: ID
  filename: String
  geminiToken: String
  sessionID: String
  size: String
  source: UploadSource
  submissionID: ID
}

type AddAssetToConsignmentSubmissionPayload {
  asset: ConsignmentSubmissionCategoryAsset
  clientMutationId: String
}

input AddAssetsToConsignmentSubmissionInput {
  assetType: String
  clientMutationId: String
  externalSubmissionId: ID
  filename: String
  geminiTokens: [String!]
  sessionID: String
  size: String
  sources: UploadSources
  submissionID: ID
}

type AddAssetsToConsignmentSubmissionPayload {
  assets: [ConsignmentSubmissionCategoryAsset!]
  clientMutationId: String
}

type AddInstallShotToPartnerShowFailure {
  mutationError: GravityMutationError
}

input AddInstallShotToPartnerShowMutationInput {
  caption: String
  clientMutationId: String
  imageUrl: String
  isDefault: Boolean
  s3Bucket: String
  s3Key: String
  showId: String!
}

type AddInstallShotToPartnerShowMutationPayload {
  clientMutationId: String
  showOrError: AddInstallShotToPartnerShowResponseOrError
}

union AddInstallShotToPartnerShowResponseOrError = AddInstallShotToPartnerShowFailure | AddInstallShotToPartnerShowSuccess

type AddInstallShotToPartnerShowSuccess {
  show: Show
}

input AddUserToSubmissionMutationInput {
  clientMutationId: String
  id: ID!
}

type AddUserToSubmissionMutationPayload {
  clientMutationId: String
  consignmentSubmission: ConsignmentSubmission
}

type Admin {
  featureFlag(id: String): FeatureFlag
  featureFlags(sortBy: FeatureFlagsSortBy = NAME): [FeatureFlag]
}

input AdminCreateFeatureFlagInput {
  clientMutationId: String
  description: String = ""
  impressionData: Boolean = false
  name: String
  strategy: FeatureFlagStrategyInput!
  type: FeatureFlagToggleType!
  variants: [FeatureFlagVariantInputName]
}

type AdminCreateFeatureFlagPayload {
  clientMutationId: String
  featureFlags(sortBy: FeatureFlagsSortBy = NAME): [FeatureFlag]
}

input AdminDeleteFeatureFlagInput {
  clientMutationId: String
  name: String
}

type AdminDeleteFeatureFlagPayload {
  clientMutationId: String
  featureFlags(sortBy: FeatureFlagsSortBy = NAME): [FeatureFlag]
  success: Boolean
}

enum AdminToggleFeatureFlagEnvironment {
  DEVELOPMENT
  PRODUCTION
}

input AdminToggleFeatureFlagInput {
  clientMutationId: String
  enabled: Boolean!
  environment: AdminToggleFeatureFlagEnvironment!
  name: String!
}

type AdminToggleFeatureFlagPayload {
  clientMutationId: String
  featureFlags(sortBy: FeatureFlagsSortBy = NAME): [FeatureFlag]
  success: Boolean
}

input AdminUpdateFeatureFlagInput {
  clientMutationId: String
  description: String
  impressionData: Boolean = false
  name: String!
  type: String = "release"
}

type AdminUpdateFeatureFlagPayload {
  clientMutationId: String
  featureFlags(sortBy: FeatureFlagsSortBy = NAME): [FeatureFlag]
}

type AggregationCount {
  count: Int!
  name: String!
  value: String!
}

type Agreement {
  content: String
  createdAt: ISO8601DateTime!
  deactivatedAt: ISO8601DateTime
  description: String
  id: ID!
  name: String!
  updatedAt: ISO8601DateTime!
}

type Alert {
  acquireable: Boolean
  additionalGeneIDs: [String]
  additionalGeneNames: [String]
  artistIDs: [String]
  artistSeriesIDs: [String]
  artistSeriesNames: [String]
  artists: [Artist!]!
  artistsConnection(after: String, before: String, first: Int, last: Int): ArtistConnection!
  artworksConnection(acquireable: Boolean, additionalGeneIDs: [String], after: String, aggregationPartnerCities: [String], aggregations: [ArtworkAggregation], artistID: String, artistIDs: [String], artistNationalities: [String], artistSeriesID: String, artistSeriesIDs: [String], artworkIDs: [String], atAuction: Boolean, attributionClass: [String], availability: String, before: String, categories: [String], color: String, colors: [String], dimensionRange: String, disableNotForSaleSorting: Boolean, excludeArtworkIDs: [String], extraAggregationGeneIDs: [String], first: Int, forSale: Boolean, framed: Boolean, geneID: String, geneIDs: [String], height: String, importSources: [String], includeAllJSON: Boolean, includeArtworksByFollowedArtists: Boolean, includeMediumFilterInAggregation: Boolean, includeUnpublished: Boolean, input: FilterArtworksInput, inquireableOnly: Boolean, keyword: String, keywordMatchExact: Boolean, last: Int, locationCities: [String], majorPeriods: [String], marketable: Boolean, marketingCollectionID: String, materialsTerms: [String], medium: String, offerable: Boolean, page: Int, partnerCities: [String], partnerID: ID, partnerIDs: [String], period: String, periods: [String], priceRange: String, published: Boolean, saleID: ID, showID: String, signed: Boolean, size: Int, sizes: [ArtworkSizes], sold: Boolean, sort: String, tagID: String, visibilityLevel: String, width: String): FilterArtworksConnection
  atAuction: Boolean
  attributionClass: [String]
  colors: [String]
  dimensionRange: String
  displayName(except: [SearchCriteriaFields], only: [SearchCriteriaFields]): String!
  forSale: Boolean
  formattedPriceRange: String
  height: String
  href: String
  id: ID!
  inquireableOnly: Boolean
  internalID: ID!
  keyword: String
  labels(except: [SearchCriteriaFields], only: [SearchCriteriaFields]): [SearchCriteriaLabel!]!
  locationCities: [String]
  majorPeriods: [String]
  materialsTerms: [String]
  offerable: Boolean
  partnerIDs: [String]
  priceArray: [Int]
  priceRange: String
  searchCriteriaID: String!
  settings: AlertSettings!
  sizes: [String]
  summary: JSON
  width: String
}

type AlertConnection {
  edges: [AlertEdge]
  pageCursors: PageCursors!
  pageInfo: PageInfo!
  totalCount: Int
}

type AlertEdge {
  cursor: String!
  node: Alert
}

type AlertNotificationItem {
  alert: Alert
  artworksConnection(after: String, before: String, first: Int, last: Int): ArtworkConnection
}

type AlertSettings {
  details: String
  email: Boolean!
  frequency: AlertSettingsFrequency
  name: String
  push: Boolean!
}

enum AlertSettingsFrequency {
  DAILY
  INSTANT
}

input AlertSettingsInput {
  details: String
  email: Boolean
  frequency: AlertSettingsFrequency
  name: String
  push: Boolean
}

input AlertSource {
  id: ID
  type: AlertSourceType
}

enum AlertSourceType {
  ARTIST
  ARTWORK
}

enum AlertsConnectionSortEnum {
  ENABLED_AT_DESC
  NAME_ASC
}

type Algolia {
  apiKey: String! @deprecated(reason: "Algolia search is no longer supported")
  appID: String! @deprecated(reason: "Algolia search is no longer supported")
  indices: [AlgoliaIndex!]! @deprecated(reason: "Algolia search is no longer supported")
}

type AlgoliaIndex {
  displayName: String! @deprecated(reason: "Algolia search is no longer supported")
  key: String! @deprecated(reason: "Algolia search is no longer supported")
  name: String! @deprecated(reason: "Algolia search is no longer supported")
}

type AnalyticsArtist {
  entityId: String!
}

type AnalyticsArtistAffinity {
  artistId: ID!
  score: Float!
}

type AnalyticsArtistAffinityConnection {
  edges: [AnalyticsArtistAffinityEdge]
  nodes: [AnalyticsArtistAffinity]
  pageCursors: PageCursors
  pageInfo: AnalyticsPageInfo!
  totalCount: Int
  totalPages: Int
}

type AnalyticsArtistAffinityEdge {
  cursor: String!
  node: AnalyticsArtistAffinity
}

input AnalyticsArtistIdMediumTupleType {
  artistId: String!
  medium: String!
}

type AnalyticsArtistRecommendation {
  artistId: ID!
  score: Float!
}

type AnalyticsArtistRecommendationConnection {
  edges: [AnalyticsArtistRecommendationEdge]
  nodes: [AnalyticsArtistRecommendation]
  pageCursors: PageCursors
  pageInfo: AnalyticsPageInfo!
  totalCount: Int
  totalPages: Int
}

type AnalyticsArtistRecommendationEdge {
  cursor: String!
  node: AnalyticsArtistRecommendation
}

type AnalyticsArtistSparkline {
  artistId: ID!
  artistName: String
  eventDigest: String
  sparkles: BigInt
  tier: Float
  year: String
}

type AnalyticsArtistSparklineConnection {
  edges: [AnalyticsArtistSparklineEdge]
  nodes: [AnalyticsArtistSparkline]
  pageCursors: PageCursors
  pageInfo: AnalyticsPageInfo!
  totalCount: Int
  totalPages: Int
}

type AnalyticsArtistSparklineEdge {
  cursor: String!
  node: AnalyticsArtistSparkline
}

type AnalyticsArtwork {
  entityId: String!
}

type AnalyticsArtworkRecommendation {
  artworkId: ID!
  score: Float!
}

type AnalyticsArtworkRecommendationConnection {
  edges: [AnalyticsArtworkRecommendationEdge]
  nodes: [AnalyticsArtworkRecommendation]
  pageCursors: PageCursors
  pageInfo: AnalyticsPageInfo!
  totalCount: Int
  totalPages: Int
}

type AnalyticsArtworkRecommendationEdge {
  cursor: String!
  node: AnalyticsArtworkRecommendation
}

type AnalyticsArtworksPublishedStats {
  percentageChanged: Int!
  period: AnalyticsQueryPeriodEnum!
  timeSeries: [AnalyticsPartnerTimeSeriesStats!]!
  totalCount: Int!
}

scalar AnalyticsDateTime

type AnalyticsGroupedStats {
  groupedEntity: AnalyticsGroupedStatsUnion!
  period: AnalyticsQueryPeriodEnum!
}

type AnalyticsGroupedStatsConnection {
  edges: [AnalyticsGroupedStatsEdge]
  nodes: [AnalyticsGroupedStats]
  pageInfo: AnalyticsPageInfo!
}

type AnalyticsGroupedStatsEdge {
  cursor: String!
  node: AnalyticsGroupedStats
}

enum AnalyticsGroupedStatsMetricEnum {
  VISITOR_BY_DEVICE
  VISITOR_BY_LANDING_PAGE
  VISITOR_BY_LOCATION
  VISITOR_BY_REFERRAL
}

enum AnalyticsGroupedStatsObjectTypeEnum {
  COUNTRY
  DEVICE
  LANDING_PAGE
  REFERRAL
}

union AnalyticsGroupedStatsUnion = AnalyticsVisitorsByCountry | AnalyticsVisitorsByDevice | AnalyticsVisitorsByLandingPage | AnalyticsVisitorsByReferral

type AnalyticsHistogramBin {
  maxPrice(decimal: String = ".", format: String = "%s%v", precision: Int = 0, symbol: String, thousand: String = ","): String
  maxPriceCents: Int!
  minPrice(decimal: String = ".", format: String = "%s%v", precision: Int = 0, symbol: String, thousand: String = ","): String
  minPriceCents: Int!
  numArtworks: Int!
}

type AnalyticsNewForYouRecommendation {
  artworkId: ID!
  publishedAt: AnalyticsDateTime!
  score: Float!
  version: String!
}

type AnalyticsNewForYouRecommendationConnection {
  edges: [AnalyticsNewForYouRecommendationEdge]
  nodes: [AnalyticsNewForYouRecommendation]
  pageCursors: PageCursors
  pageInfo: AnalyticsPageInfo!
  totalCount: Int
  totalPages: Int
}

type AnalyticsNewForYouRecommendationEdge {
  cursor: String!
  node: AnalyticsNewForYouRecommendation
}

type AnalyticsPageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type AnalyticsPageviewStats {
  artworkViews: Int
  galleryViews: Int
  percentageChanged: Int!
  period: AnalyticsQueryPeriodEnum!
  showViews: Int
  timeSeries: [AnalyticsPartnerTimeSeriesStats!]!
  totalCount: Int!
  uniqueVisitors: Int
}

type AnalyticsPartnerAudienceStats {
  commercialVisitors: Int!
  partnerId: String!
  period: AnalyticsQueryPeriodEnum!
  uniqueVisitors: Int!
}

type AnalyticsPartnerInquiryCountTimeSeriesStats {
  count: Int
  endTime: AnalyticsDateTime
  startTime: AnalyticsDateTime
}

type AnalyticsPartnerInquiryStats {
  inquiryCount: Int!
  inquiryResponseTime: Int
  partnerId: String!
  period: AnalyticsQueryPeriodEnum!
  timeSeries(cumulative: Boolean = false): [AnalyticsPartnerInquiryCountTimeSeriesStats!]
}

type AnalyticsPartnerSalesStats {
  orderCount: Int!
  orderResponseTime: Int
  partnerId: String!
  period: AnalyticsQueryPeriodEnum!
  timeSeries(cumulative: Boolean = false): [AnalyticsPartnerSalesTimeSeriesStats!]
  total(decimal: String = ".", format: String = "%s%v", precision: Int = 0, symbol: String, thousand: String = ","): String
  totalCents: Int!
}

type AnalyticsPartnerSalesTimeSeriesStats {
  count: Int
  endTime: AnalyticsDateTime
  startTime: AnalyticsDateTime
  total(decimal: String = ".", format: String = "%s%v", precision: Int = 0, symbol: String, thousand: String = ","): String
  totalCents: Int!
}

type AnalyticsPartnerStats {
  artworkPublished(period: AnalyticsQueryPeriodEnum!): AnalyticsPartnerStatsArtworksPublished
  artworksPublished(period: AnalyticsQueryPeriodEnum!): AnalyticsArtworksPublishedStats @deprecated(reason: "Use artworkPublished for refactored time series bucket code")
  audience(period: AnalyticsQueryPeriodEnum!): AnalyticsPartnerAudienceStats
  groupedStats(after: String, before: String, first: Int, last: Int, metric: AnalyticsGroupedStatsMetricEnum!, objectType: AnalyticsGroupedStatsObjectTypeEnum!, period: AnalyticsQueryPeriodEnum!): AnalyticsGroupedStatsConnection
  inquiry(period: AnalyticsQueryPeriodEnum!): AnalyticsPartnerInquiryStats
  pageview(period: AnalyticsQueryPeriodEnum!): AnalyticsPartnerStatsPageviews
  pageviews(period: AnalyticsQueryPeriodEnum!): AnalyticsPageviewStats @deprecated(reason: "Use pageview for refactored time series bucket code")
  partnerId: String!
  rankedStats(after: String, before: String, first: Int, last: Int, objectType: AnalyticsRankedStatsObjectTypeEnum!, period: AnalyticsQueryPeriodEnum!): AnalyticsRankedStatsConnection
  sales(period: AnalyticsQueryPeriodEnum!): AnalyticsPartnerSalesStats
  topArtworks(after: String, before: String, first: Int, last: Int): AnalyticsRankedStatsConnection @deprecated(reason: "Use rankedStats(objectType: ) instead")
  uniqueVisitors(period: AnalyticsQueryPeriodEnum!): Int @deprecated(reason: "Use audience() { uniqueVisitors } instead")
}

type AnalyticsPartnerStatsArtworksPublished {
  partnerId: String!
  percentageChanged: Int!
  period: AnalyticsQueryPeriodEnum!
  timeSeries(cumulative: Boolean = false): [AnalyticsPartnerStatsArtworksPublishedTimeSeries!]!
  totalCount: Int!
}

type AnalyticsPartnerStatsArtworksPublishedTimeSeries {
  count: Int
  endTime: AnalyticsDateTime
  startTime: AnalyticsDateTime
}

type AnalyticsPartnerStatsPageviews {
  artworkViews: Int!
  galleryViews: Int!
  partnerId: String!
  percentageChanged: Int!
  period: AnalyticsQueryPeriodEnum!
  showViews: Int!
  timeSeries(cumulative: Boolean = false): [AnalyticsPartnerStatsPageviewsTimeSeries!]
  totalCount: Int!
  uniqueVisitors: Int!
}

type AnalyticsPartnerStatsPageviewsTimeSeries {
  count: Int
  endTime: AnalyticsDateTime
  startTime: AnalyticsDateTime
}

type AnalyticsPartnerTimeSeriesStats {
  count: Int
  endTime: AnalyticsDateTime
  startTime: AnalyticsDateTime
}

type AnalyticsPriceContextFilterType {
  category: AnalyticsPricingContextCategoryEnum
  dimension: AnalyticsPricingContextDimensionEnum
}

type AnalyticsPricingContext {
  appliedFilters: AnalyticsPriceContextFilterType!
  appliedFiltersDisplay: String
  bins: [AnalyticsHistogramBin!]!
}

enum AnalyticsPricingContextCategoryEnum {
  ARCHITECTURE
  BOOKS_AND_PORTFOLIOS
  DESIGN_DECORATIVE_ART
  DRAWING_COLLAGE_OTHER_WORK_ON_PAPER
  FASHION
  INSTALLATION
  JEWELRY
  MIXED_MEDIA
  OTHER
  PAINTING
  PERFORMANCE
  PHOTOGRAPHY
  POSTERS
  PRINT
  SCULPTURE
  SOUND
  TEXTILE
  VIDEO_FILM_ANIMATION
  WORK_ON_PAPER
}

enum AnalyticsPricingContextDimensionEnum {
  LARGE
  MEDIUM
  SMALL
}

enum AnalyticsQueryPeriodEnum {
  FOUR_WEEKS
  ONE_YEAR
  SIXTEEN_WEEKS
}

union AnalyticsRankedEntityUnion = Artist | Artwork | Show | ViewingRoom

type AnalyticsRankedStats {
  entity: AnalyticsRankedEntityUnion
  period: AnalyticsQueryPeriodEnum!
  rankedEntity: AnalyticsRankedStatsUnion!
  value: Int!
}

type AnalyticsRankedStatsConnection {
  edges: [AnalyticsRankedStatsEdge]
  nodes: [AnalyticsRankedStats]
  pageInfo: AnalyticsPageInfo!
}

type AnalyticsRankedStatsEdge {
  cursor: String!
  node: AnalyticsRankedStats
}

enum AnalyticsRankedStatsObjectTypeEnum {
  ARTIST
  ARTWORK
  SHOW
  VIEWING_ROOM
}

union AnalyticsRankedStatsUnion = AnalyticsArtist | AnalyticsArtwork | AnalyticsShow | AnalyticsViewingRoom

type AnalyticsShow {
  entityId: String!
}

type AnalyticsUserStats {
  totalPurchaseCount: Int!
  userId: String!
}

type AnalyticsViewingRoom {
  entityId: String!
}

type AnalyticsVisitorsByCountry {
  metric: String!
  name: String!
  percent: Float!
  type: String!
  value: Int!
}

type AnalyticsVisitorsByDevice {
  metric: String!
  name: String!
  percent: Float!
  type: String!
  value: Int!
}

type AnalyticsVisitorsByLandingPage {
  metric: String!
  name: String!
  percent: Float!
  type: String!
  value: Int!
}

type AnalyticsVisitorsByReferral {
  metric: String!
  name: String!
  percent: Float!
  type: String!
  value: Int!
}

type AppSecondFactor implements SecondFactor {
  disabledAt(format: String, timezone: String): String
  enabled: Boolean!
  enabledAt(format: String, timezone: String): String
  internalID: ID!
  kind: SecondFactorKind!
  name: String
  otpProvisioningURI: String
  otpSecret: String
}

input AppSecondFactorAttributes {
  name: String
}

union AppSecondFactorOrErrorsUnion = AppSecondFactor | Errors

type Article implements Node {
  author: Author @deprecated(reason: "Use `byline` or `authors` instead")
  authors: [Author!]!
  byline: String
  cached: Int
  channel: Channel
  channelArticles(size: Int = 12): [Article!]!
  channelID: String @deprecated(reason: "Use `channel` instead")
  contributingAuthors: [Author] @deprecated(reason: "Use `byline` or `authors` instead")
  description: String
  hero: ArticleHero
  href: String
  id: ID!
  internalID: ID!
  keywords: [String!]!
  layout: ArticleLayout!
  leadParagraph: String
  media: ArticleMedia
  newsSource: ArticleNewsSource
  postscript: String
  publishedAt(format: String, timezone: String): String
  relatedArticles(inVertical: Boolean = false, size: Int = 3): [Article!]!
  searchDescription: String
  searchTitle: String
  sections: [ArticleSections!]!
  series: ArticleSeries
  seriesArticle: Article
  slug: String
  sponsor: ArticleSponsor
  thumbnailImage: Image
  thumbnailTeaser: String
  thumbnailTitle: String
  tier: Int
  title: String
  updatedAt(format: String, timezone: String): String
  vertical: String
}

type ArticleConnection {
  edges: [ArticleEdge]
  pageCursors: PageCursors!
  pageInfo: PageInfo!
  totalCount: Int
}

type ArticleEdge {
  cursor: String!
  node: Article
}

type ArticleFeatureSection {
  embed(autoPlay: Boolean = false): String
  image: Image
  layout: ArticleFeatureSectionType!
  media: String
  title: String
}

enum ArticleFeatureSectionType {
  BASIC
  FULLSCREEN
  SPLIT
  TEXT
}

type ArticleFeaturedArtistNotificationItem {
  article: Article
  artistsConnection(after: String, before: String, first: Int, last: Int): ArtistConnection
}

union ArticleHero = ArticleFeatureSection

type ArticleImageSection {
  caption: String
  id: ID!
  image: Image
  layout: String
}

enum ArticleLayout {
  CLASSIC
  FEATURE
  NEWS
  SERIES
  STANDARD
  VIDEO
}

type ArticleMedia {
  coverImage: Image
  credits: String
  description: String
  duration: String
  releaseDate(format: String, timezone: String): String
  url: String
}

type ArticleNewsSource {
  title: String
  url: String
}

type ArticleSectionCallout {
  article: String
  hideImage: String
  text: String
  thumbnailUrl: String
  topStories: String
  type: String
}

type ArticleSectionEmbed {
  height: Int
  layout: ArticleSectionEmbedLayout
  mobileHeight: Int
  url: String
}

enum ArticleSectionEmbedLayout {
  COLUMN_WIDTH
  FILLWIDTH
  OVERFLOW
  OVERFLOW_FILLWIDTH
}

type ArticleSectionImageCollection {
  figures: [ArticleSectionImageCollectionFigure!]!
  layout: ArticleSectionImageCollectionLayout!
}

union ArticleSectionImageCollectionFigure = ArticleImageSection | ArticleUnpublishedArtwork | Artwork

enum ArticleSectionImageCollectionLayout {
  COLUMN_WIDTH
  FILLWIDTH
  OVERFLOW_FILLWIDTH
}

type ArticleSectionImageSet {
  counts: ArticleSectionImageSetCounts!
  cover: ArticleSectionImageSetFigure
  figures: [ArticleSectionImageSetFigure!]!
  layout: ArticleSectionImageSetLayout!
  title: String
}

type ArticleSectionImageSetCounts {
  figures: Int!
}

union ArticleSectionImageSetFigure = ArticleImageSection | Artwork

enum ArticleSectionImageSetLayout {
  FULL
  MINI
}

type ArticleSectionSocialEmbed {
  embed: String
  url: String
}

type ArticleSectionText {
  body: String
  layout: String
}

type ArticleSectionVideo {
  backgroundColor: String
  caption: String
  embed(autoPlay: Boolean = false): String
  image: Image
  layout: ArticleSectionVideoLayout
  url: String!
}

enum ArticleSectionVideoLayout {
  COLUMN_WIDTH
  FILLWIDTH
  OVERFLOW_FILLWIDTH
}

union ArticleSections = ArticleSectionCallout | ArticleSectionEmbed | ArticleSectionImageCollection | ArticleSectionImageSet | ArticleSectionSocialEmbed | ArticleSectionText | ArticleSectionVideo

type ArticleSeries {
  description: String
}

enum ArticleSorts {
  PUBLISHED_AT_ASC
  PUBLISHED_AT_DESC
}

type ArticleSponsor {
  description: String
  partnerCondensedLogo: String
  partnerDarkLogo: String
  partnerLightLogo: String
  partnerLogoLink: String
  pixelTrackingCode: String
  subTitle: String
}

type ArticleUnpublishedArtwork {
  artist: ArticleUnpublishedArtworkArtist
  artists: [ArticleUnpublishedArtworkArtist!]!
  credit: String
  date: String
  id: ID!
  image: Image
  internalID: ID!
  partner: ArticleUnpublishedArtworkPartner
  slug: ID!
  title: String
}

type ArticleUnpublishedArtworkArtist {
  name: String
  slug: String
}

type ArticleUnpublishedArtworkPartner {
  name: String
  slug: String
}

type Artist implements EntityWithFilterArtworksConnectionInterface & Node & Searchable {
  alternateNames: [String]
  articlesConnection(after: String, before: String, first: Int, inEditorialFeed: Boolean = false, last: Int, limit: Int, page: Int, size: Int, sort: ArticleSorts): ArticleConnection
  artistSeriesConnection(after: String, before: String, first: Int, last: Int): ArtistSeriesConnection
  artworksConnection(after: String, before: String, exclude: [String], filter: [ArtistArtworksFilters], first: Int, last: Int, published: Boolean = true, sort: ArtworkSorts): ArtworkConnection
  auctionResultsConnection(after: String, aggregations: [AuctionResultsAggregation], allowEmptyCreatedDates: Boolean = true, allowUnspecifiedSaleDates: Boolean = true, before: String, categories: [String], currency: String, earliestCreatedYear: Int, first: Int, includeEstimateRange: Boolean = false, includeUnknownPrices: Boolean = true, keyword: String, last: Int, latestCreatedYear: Int, organizations: [String], page: Int, priceRange: String, recordsTrusted: Boolean = false, saleEndYear: Int, saleStartYear: Int, size: Int, sizes: [ArtworkSizes], sort: AuctionResultSorts, state: AuctionResultsState = ALL): AuctionResultConnection
  awards: String
  basedOn: Artist
  biennials: String
  bio: String
  biography: Article
  biographyBlurb(format: Format, partnerBio: Boolean = true): ArtistBlurb
  birthday: String
  blurb(format: Format): String
  cached: Int
  careerHighlights(collected: Boolean, group: Boolean, partnerId: String, solo: Boolean): [CareerHighlight!]!
  carousel: ArtistCarousel
  collections: [String]
  contemporary(excludeArtistsWithoutArtworks: Boolean = true, size: Int): [Artist]
  counts: ArtistCounts
  coverArtwork: Artwork
  createdAt(format: String, timezone: String): String
  criticallyAcclaimed: Boolean!
  currentEvent: CurrentEvent
  deathday: String
  disablePriceContext: Boolean
  displayLabel: String
  displayName: String
  duplicates: [Artist]
  exhibitionHighlights(size: Int = 5): [Show]
  filterArtworksConnection(acquireable: Boolean, additionalGeneIDs: [String], after: String, aggregationPartnerCities: [String], aggregations: [ArtworkAggregation], artistID: String, artistIDs: [String], artistNationalities: [String], artistSeriesID: String, artistSeriesIDs: [String], artworkIDs: [String], atAuction: Boolean, attributionClass: [String], availability: String, before: String, categories: [String], color: String, colors: [String], dimensionRange: String, disableNotForSaleSorting: Boolean, excludeArtworkIDs: [String], extraAggregationGeneIDs: [String], first: Int, forSale: Boolean, framed: Boolean, geneID: String, geneIDs: [String], height: String, importSources: [String], includeAllJSON: Boolean, includeArtworksByFollowedArtists: Boolean, includeMediumFilterInAggregation: Boolean, includeUnpublished: Boolean, input: FilterArtworksInput, inquireableOnly: Boolean, keyword: String, keywordMatchExact: Boolean, last: Int, locationCities: [String], majorPeriods: [String], marketable: Boolean, marketingCollectionID: String, materialsTerms: [String], medium: String, offerable: Boolean, page: Int, partnerCities: [String], partnerID: ID, partnerIDs: [String], period: String, periods: [String], priceRange: String, published: Boolean, saleID: ID, showID: String, signed: Boolean, size: Int, sizes: [ArtworkSizes], sold: Boolean, sort: String, tagID: String, visibilityLevel: String, width: String): FilterArtworksConnection
  first: String
  formattedArtworksCount: String
  formattedNationalityAndBirthday: String
  foundations: String
  gender: String
  genes: [Gene]
  groupIndicator: ArtistGroupIndicator
  hasMetadata: Boolean
  highlights: ArtistHighlights
  hometown: String
  href: String
  id: ID!
  image: Image
  imageUrl: String
  initials(length: Int = 3): String
  insights(kind: [ArtistInsightKind] = [HIGH_AUCTION_RECORD, ACTIVE_SECONDARY_MARKET, CRITICALLY_ACCLAIMED, RECENT_CAREER_EVENT, ARTSY_VANGUARD_YEAR, CURATORS_PICK_EMERGING, TRENDING_NOW, GAINING_FOLLOWERS, SOLO_SHOW, GROUP_SHOW, BIENNIAL, PRIVATE_COLLECTIONS, COLLECTED, REVIEWED, AWARDS, RESIDENCIES, FOUNDATIONS]): [ArtistInsight!]!
  internalID: ID!
  isConsignable: Boolean
  isDisplayAuctionLink: Boolean
  isFollowed: Boolean
  isInSeoExperiment: Boolean
  isPersonalArtist: Boolean
  isPublic: Boolean!
  isShareable: Boolean
  last: String
  location: String
  marketingCollections(after: String, before: String, category: String, first: Int, isFeaturedArtistContent: Boolean, last: Int, size: Int, slugs: [String!]): [MarketingCollection!]!
  meta(page: ArtistPage = ABOUT): ArtistMeta!
  middle: String
  name: String
  nationality: String
  partnerArtists(size: Int): [PartnerArtist]
  partnerBiographyBlurb(format: Format): partnerBiographyBlurb @deprecated(reason: "This field is deprecated. No longer in use")
  partnersConnection(after: String, before: String, first: Int, last: Int, partnerCategory: [String], representedBy: Boolean): PartnerArtistConnection
  recentShow: String
  related: ArtistRelatedData
  reviewSources: String
  sales(isAuction: Boolean, live: Boolean, size: Int, sort: SaleSorts): [Sale]
  showsConnection(active: Boolean, after: String, atAFair: Boolean, before: String, first: Int, isReference: Boolean, last: Int, page: Int, size: Int, soloShow: Boolean, sort: ShowSorts, status: String, topTier: Boolean, visibleToPublic: Boolean): ShowConnection
  slug: ID!
  sortableID: String
  statuses: ArtistStatuses
  targetSupply: ArtistTargetSupply!
  vanguardYear: String
  verifiedRepresentatives: [VerifiedRepresentative!]!
  years: String
}

enum ArtistAlertsSort {
  SORTABLE_ID_ASC
  SORTABLE_ID_DESC
}

type ArtistArtworkGrid implements ArtworkContextGrid {
  artworksConnection(after: String, before: String, first: Int, last: Int): ArtworkConnection
  ctaHref: String
  ctaTitle: String
  title: String
}

enum ArtistArtworksFilters {
  IS_FOR_SALE
  IS_NOT_FOR_SALE
}

type ArtistBlurb {
  credit: String
  partner: Partner
  partnerID: String @deprecated(reason: "No longer used as the partner field contains the partner.id")
  text: String
}

type ArtistCarousel {
  images: [Image]
}

type ArtistConnection {
  edges: [ArtistEdge]
  pageCursors: PageCursors!
  pageInfo: PageInfo!
  totalCount: Int
}

type ArtistCounts {
  articles: Int
  artworks(format: String, label: String): FormattedNumber
  auctionArtworks(format: String, label: String): FormattedNumber
  auctionResults: Int @deprecated(reason: "Favor `statuses#auctionLots`")
  duplicates: Int
  ecommerceArtworks(format: String, label: String): FormattedNumber
  follows(format: String, label: String): FormattedNumber
  forSaleArtworks(format: String, label: String): FormattedNumber
  hasMakeOfferArtworks: Boolean
  myCollectedArtworks: Int!
  partnerShows(format: String, label: String): FormattedNumber
  relatedArtists: Int
}

type ArtistEdge {
  artworksCount: Int
  cursor: String!
  node: Artist
}

type ArtistGroup {
  items: [Artist]
  letter: String
}

enum ArtistGroupIndicator {
  DUO
  GROUP
  INDIVIDUAL
  N_A
}

type ArtistHighlights {
  partnersConnection(after: String, before: String, displayOnPartnerProfile: Boolean, first: Int, last: Int, partnerCategory: [String], representedBy: Boolean): PartnerArtistConnection
}

type ArtistInsight {
  artist: Artist
  count: Int!
  description(format: Format = PLAIN): String
  entities: [String!]!
  kind: ArtistInsightKind
  label: String!
  type: String! @deprecated(reason: "Use `kind` instead.")
}

enum ArtistInsightKind {
  ACTIVE_SECONDARY_MARKET
  ARTSY_VANGUARD_YEAR
  AWARDS
  BIENNIAL
  COLLECTED
  CRITICALLY_ACCLAIMED
  CURATORS_PICK_EMERGING
  FOUNDATIONS
  GAINING_FOLLOWERS
  GROUP_SHOW
  HIGH_AUCTION_RECORD
  PRIVATE_COLLECTIONS
  RECENT_CAREER_EVENT
  RESIDENCIES
  REVIEWED
  SOLO_SHOW
  TRENDING_NOW
}

type ArtistInsightsCount {
  activeSecondaryMarketCount: Int!
  biennialCount: Int!
  collectedCount: Int!
  groupShowCount: Int!
  reviewedCount: Int!
  soloShowCount: Int!
}

type ArtistMeta {
  description: String!
  title: String!
}

enum ArtistPage {
  ABOUT
  ARTIST_SERIES
  ARTWORKS
  AUCTION_RESULTS
}

type ArtistPartnerConnection {
  edges: [ArtistPartnerEdge]
  pageCursors: PageCursors!
  pageInfo: PageInfo!
  totalCount: Int
}

type ArtistPartnerEdge {
  artist: Artist
  artworksConnection(after: String, before: String, first: Int, last: Int, sort: PartnerArtistArtworksSort): ArtworkConnection
  biography: String
  biographyBlurb(format: Format): PartnerArtistBlurb
  counts: PartnerArtistCounts
  cursor: String!
  documentsConnection(after: String, before: String, first: Int, last: Int): PartnerDocumentConnection
  filterArtworksConnection(acquireable: Boolean, additionalGeneIDs: [String], after: String, aggregationPartnerCities: [String], aggregations: [ArtworkAggregation], artistID: String, artistIDs: [String], artistNationalities: [String], artistSeriesID: String, artistSeriesIDs: [String], artworkIDs: [String], atAuction: Boolean, attributionClass: [String], availability: String, before: String, categories: [String], color: String, colors: [String], dimensionRange: String, disableNotForSaleSorting: Boolean, excludeArtworkIDs: [String], extraAggregationGeneIDs: [String], first: Int, forSale: Boolean, framed: Boolean, geneID: String, geneIDs: [String], height: String, importSources: [String], includeAllJSON: Boolean, includeArtworksByFollowedArtists: Boolean, includeMediumFilterInAggregation: Boolean, includeUnpublished: Boolean, input: FilterArtworksInput, inquireableOnly: Boolean, keyword: String, keywordMatchExact: Boolean, last: Int, locationCities: [String], majorPeriods: [String], marketable: Boolean, marketingCollectionID: String, materialsTerms: [String], medium: String, offerable: Boolean, page: Int, partnerCities: [String], partnerID: ID, partnerIDs: [String], period: String, periods: [String], priceRange: String, published: Boolean, saleID: ID, showID: String, signed: Boolean, size: Int, sizes: [ArtworkSizes], sold: Boolean, sort: String, tagID: String, visibilityLevel: String, width: String): FilterArtworksConnection
  id: ID!
  image: Image
  imageUrl: String
  internalID: ID!
  isDisplayOnPartnerProfile: Boolean
  isHiddenInPresentationMode: Boolean
  isUseDefaultBiography: Boolean
  node: Artist
  partner: Partner
  representedBy: Boolean
  showsConnection(after: String, before: String, first: Int, last: Int): ShowConnection
  sortableID: String
}

type ArtistRelatedData {
  artistsConnection(after: String, before: String, excludeArtistsWithoutArtworks: Boolean = true, first: Int, kind: RelatedArtistsKind, last: Int, minForsaleArtworks: Int): ArtistConnection
  genes(after: String, before: String, first: Int, last: Int): GeneConnection
  suggestedConnection(after: String, before: String, excludeArtistIDs: [String], excludeArtistsWithoutArtworks: Boolean, excludeArtistsWithoutForsaleArtworks: Boolean, excludeFollowedArtists: Boolean, first: Int, includeFallbackArtists: Boolean, last: Int): ArtistConnection
}

type ArtistSeries implements Node {
  artistIDs: [String!]!
  artists(page: Int, size: Int): [Artist!]!
  artworksCount: Int!
  artworksCountMessage: String
  description: String
  descriptionFormatted(format: Format): String
  featured: Boolean!
  filterArtworksConnection(acquireable: Boolean, additionalGeneIDs: [String], after: String, aggregationPartnerCities: [String], aggregations: [ArtworkAggregation], artistID: String, artistIDs: [String], artistNationalities: [String], artistSeriesID: String, artistSeriesIDs: [String], artworkIDs: [String], atAuction: Boolean, attributionClass: [String], availability: String, before: String, categories: [String], color: String, colors: [String], dimensionRange: String, disableNotForSaleSorting: Boolean, excludeArtworkIDs: [String], extraAggregationGeneIDs: [String], first: Int, forSale: Boolean, framed: Boolean, geneID: String, geneIDs: [String], height: String, importSources: [String], includeAllJSON: Boolean, includeArtworksByFollowedArtists: Boolean, includeMediumFilterInAggregation: Boolean, includeUnpublished: Boolean, input: FilterArtworksInput, inquireableOnly: Boolean, keyword: String, keywordMatchExact: Boolean, last: Int, locationCities: [String], majorPeriods: [String], marketable: Boolean, marketingCollectionID: String, materialsTerms: [String], medium: String, offerable: Boolean, page: Int, partnerCities: [String], partnerID: ID, partnerIDs: [String], period: String, periods: [String], priceRange: String, published: Boolean, saleID: ID, showID: String, signed: Boolean, size: Int, sizes: [ArtworkSizes], sold: Boolean, sort: String, tagID: String, visibilityLevel: String, width: String): FilterArtworksConnection
  forSaleArtworksCount: Int!
  id: ID!
  image: Image
  internalID: ID!
  published: Boolean!
  representativeArtworkID: ID
  slug: String!
  title: String!
}

type ArtistSeriesConnection {
  edges: [ArtistSeriesEdge]
  pageCursors: PageCursors!
  pageInfo: PageInfo!
  totalCount: Int!
}

type ArtistSeriesEdge {
  cursor: String!
  node: ArtistSeries
}

enum ArtistSorts {
  CREATED_AT_ASC
  CREATED_AT_DESC
  SORTABLE_ID_ASC
  SORTABLE_ID_DESC
  TRENDING_DESC
}

type ArtistStatuses {
  articles: Boolean
  artists: Boolean
  artworks: Boolean
  auctionLots: Boolean
  biography: Boolean
  contemporary: Boolean
  cv(minShowCount: Int = 15): Boolean
  shows: Boolean
}

type ArtistTargetSupply {
  isInMicrofunnel: Boolean
  isP1: Boolean @deprecated(reason: "Use \"priority\" field instead.")
  isTargetSupply: Boolean
  microfunnel: ArtistTargetSupplyMicrofunnel
  priority: ArtistTargetSupplyPriority
  type: ArtistTargetSupplyType
}

type ArtistTargetSupplyMicrofunnel {
  artworksConnection(after: String, before: String, first: Int, last: Int, randomize: Boolean): ArtworkConnection
  metadata: TargetSupplyMicrofunnelMetadata
}

enum ArtistTargetSupplyPriority {
  FALSE
  TRUE
}

enum ArtistTargetSupplyType {
  AUCTION_MARKET
  CURATED_EMERGING
  HIGHEST_HQDLS
  HIGH_HQDLS
}

type ArtistsWithAlertCountsConnection {
  edges: [ArtistsWithAlertCountsEdge]
  pageCursors: PageCursors!
  pageInfo: PageInfo!
  totalCount: Int
}

type ArtistsWithAlertCountsEdge {
  cursor: String!
  node: Artist
  totalAlertCount: Int
}

type ArtsyShippingOptInMutationFailure {
  mutationError: GravityMutationError
}

input ArtsyShippingOptInMutationInput {
  artsyShippingDomestic: Boolean
  artsyShippingInternational: Boolean
  clientMutationId: String
  id: String!
  source: BulkUpdateSourceEnum
}

type ArtsyShippingOptInMutationPayload {
  ArtsyShippingOptInOrError: ArtsyShippingOptInMutationType
  clientMutationId: String
}

type ArtsyShippingOptInMutationSuccess {
  skippedPartnerArtworks: ArtsyShippingOptInResponse
  updatedPartnerArtworks: ArtsyShippingOptInResponse
}

union ArtsyShippingOptInMutationType = ArtsyShippingOptInMutationFailure | ArtsyShippingOptInMutationSuccess

type ArtsyShippingOptInResponse {
  count: Int
  ids: [String]
}

type Artwork implements Node & Searchable & Sellable {
  additionalInformation(format: Format): String
  artaShippingEnabled: Boolean @deprecated(reason: "Prefer to use `processWithArtsyShippingDomestic`. [Will be removed in v2]")
  articles(size: Int): [Article]
  artist(shallow: Boolean): Artist
  artistNames: String
  artistSeriesConnection(after: String, before: String, first: Int, last: Int): ArtistSeriesConnection
  artists(private: Boolean = true, shallow: Boolean): [Artist]
  artsyShippingDomestic: Boolean
  artsyShippingInternational: Boolean
  artworkLocation: String @deprecated(reason: "Please use `collectorLocation` instead")
  attributionClass: AttributionClass
  availability: String
  cached: Int
  canRequestLotConditionsReport: Boolean
  caption: String
  category: String @deprecated(reason: "Prefer to use `mediumType`.")
  certificateOfAuthenticity: ArtworkInfoRow
  certificateOfAuthenticityDetails: CertificateOfAuthenticityDetails
  collectingInstitution: String
  collectionsConnection(after: String, before: String, default: Boolean, first: Int, last: Int, page: Int, saves: Boolean, size: Int, sort: CollectionSorts): CollectionsConnection
  collectorLocation: MyLocation
  collectorSignals: CollectorSignals
  comparableAuctionResults(after: String, before: String, first: Int, last: Int): AuctionResultConnection
  condition: ArtworkCondition
  conditionDescription: ArtworkInfoRow
  confidentialNotes: String
  consignmentSubmission: ArtworkConsignmentSubmission @deprecated(reason: "This field is deprecated as collector artwork submissions are no longer accepted.")
  contactLabel: String
  contactMessage: String
  context: ArtworkContext
  contextGrids(includeRelatedArtworks: Boolean! = true): [ArtworkContextGrid]
  costCurrencyCode: String
  costMinor: Int
  culturalMaker: String
  date: String
  depth: String
  depthCm: Float
  description(format: Format): String
  diameter: Float
  diameterCm: Float
  dimensions: dimensions
  displayArtistBio: Boolean
  displayLabel: String
  displayPriceRange: Boolean
  domesticShippingFee: Money
  dominantColors: [String!]!
  downloadableImageUrl: String
  editionNumber: String
  editionOf: String
  editionSet(id: String!): EditionSet
  editionSets(sort: EditionSetSorts): [EditionSet]
  editionSize: String
  embed(autoplay: Boolean = false, height: Int = 450, width: Int = 853): String
  euShippingOrigin: Boolean
  exhibitionHistory(format: Format): String
  fair: Fair
  featuredSlot: Int
  figures(includeAll: Boolean): [ArtworkFigures!]!
  formattedMetadata: String
  framed: ArtworkInfoRow @deprecated(reason: "Consider using isFramed field (boolean) instead")
  framedDepth: String
  framedDiameter: String
  framedHeight: String
  framedMetric: String
  framedWidth: String
  hasCertificateOfAuthenticity: Boolean
  hasMarketPriceInsights: Boolean
  hasPriceEstimateRequest: Boolean @deprecated(reason: "This field is deprecated as collector artwork submissions are no longer accepted.")
  hasTitle: Boolean!
  height: String
  heightCm: Float
  highlights: [ArtworkHighlight]
  href: String
  id: ID!
  image(includeAll: Boolean, size: Int): Image
  imageRights: String
  imageTitle: String
  imageUrl: String
  images(includeAll: Boolean, size: Int): [Image]
  importSource: ArtworkImportSource
  inquiryQuestions: [InquiryQuestion]
  internalDisplayPrice: String
  internalID: ID!
  internationalShippingFee: Money
  inventoryId: String
  isAcquireable: Boolean
  isBiddable: Boolean
  isBuyNowable: Boolean
  isComparableWithAuctionResults: Boolean
  isDisliked: Boolean!
  isDownloadable: Boolean
  isEdition: Boolean
  isEligibleForArtsyGuarantee: Boolean!
  isEligibleForOnPlatformTransaction: Boolean!
  isEligibleToCreateAlert: Boolean!
  isEmbeddableVideo: Boolean
  isFixedShippingFeeOnly: Boolean
  isForSale: Boolean
  isFramed: Boolean
  isHangable: Boolean
  isInAuction: Boolean
  isInShow: Boolean
  isInquireable: Boolean
  isListed: Boolean! @deprecated(reason: "This field is deprecated as collector artwork submissions are no longer accepted.")
  isNotForSale: String
  isOfferable: Boolean
  isOfferableFromInquiry: Boolean
  isOnHold: String
  isPartnerPromoted: Boolean
  isPickupAvailable: Boolean
  isPriceEstimateRequestable: Boolean @deprecated(reason: "This field is deprecated as collector artwork submissions are no longer accepted.")
  isPriceHidden: Boolean
  isPriceRange: Boolean
  isPurchasable: Boolean
  isSaved: Boolean
  isSavedToAnyList: Boolean!
  isSavedToList(default: Boolean = false, saves: Boolean = true): Boolean!
  isSetVideoAsCover: Boolean
  isShareable: Boolean
  isSold: Boolean
  isUnique: Boolean
  isUnlisted: Boolean!
  lastOfferableActivityAt(format: String, timezone: String): String
  lastSavedAt(format: String, timezone: String): String
  layer(id: String): ArtworkLayer
  layers: [ArtworkLayer]
  listPrice: ListPrice
  listedArtworksConnection(after: String, before: String, first: Int, last: Int): ArtworkConnection! @deprecated(reason: "This field is deprecated as collector artwork submissions are no longer accepted.")
  listingOptions: ArtworkListingOptions
  literature(format: Format): String
  location: Location
  manufacturer(format: Format): String
  marketPriceInsights: ArtworkPriceInsights
  medium: String
  mediumType: ArtworkMedium
  meta: ArtworkMeta
  metric: String
  myLotStanding(live: Boolean = null): [LotStanding!]
  offerableActivity: OfferableActivity
  onlyShipsDomestically: Boolean
  partner(shallow: Boolean = true): Partner
  partnerOffersConnection(after: String, before: String, first: Int, last: Int, page: Int, size: Int, sort: PartnerOfferSorts): PartnerOfferConnection
  pickupAvailable: Boolean
  price: String
  priceCurrency: String
  priceDisplay: String
  priceIncludesTax: Boolean
  priceIncludesTaxDisplay: String
  priceListed: Money
  priceListedDisplay: String
  pricePaid: Money
  pricingContext: AnalyticsPricingContext
  processWithArtsyShippingDomestic: Boolean
  provenance(format: Format): String
  published: Boolean!
  publisher(format: Format): String
  realizedPrice: String
  realizedToEstimate: String
  recentAbandonedOrdersCount: Int
  recentSavesCount: Int
  related(size: Int): [Artwork]
  sale: Sale
  saleArtwork(saleID: String = null): SaleArtwork
  saleMessage: String
  savedSearch: ArtworkSavedSearch
  series(format: Format): String
  shippingCountry: String
  shippingInfo: String
  shippingOrigin: String
  shippingWeight: Float
  shippingWeightMetric: String
  shipsToContinentalUSOnly: Boolean @deprecated(reason: "Prefer to use `onlyShipsDomestically`. [Will be removed in v2]")
  show(active: Boolean, atAFair: Boolean, sort: ShowSorts): Show
  shows(active: Boolean, atAFair: Boolean, size: Int, sort: ShowSorts): [Show]
  signature(format: Format): String
  signatureDetails: String
  signatureInfo: ArtworkInfoRow
  signatureMeta: ArtworkSignatureMeta
  sizeBucket: String
  sizeScore: Float
  slug: ID!
  submissionId: String @deprecated(reason: "This field is deprecated as collector artwork submissions are no longer accepted.")
  taxInfo: TaxInfo
  title: String
  vatExemptApprovalRequired: Boolean
  vatRequirementComplete: Boolean
  visibilityLevel: Visibility
  website: String
  width: String
  widthCm: Float
}

enum ArtworkAggregation {
  ARTIST
  ARTIST_NATIONALITY
  ARTIST_SERIES
  ATTRIBUTION_CLASS
  COLOR
  DIMENSION_RANGE
  FOLLOWED_ARTISTS
  GALLERY
  IMPORT_SOURCE
  INSTITUTION
  LOCATION_CITY
  MAJOR_PERIOD
  MATERIALS_TERMS
  MEDIUM
  MERCHANDISABLE_ARTISTS
  PARTNER
  PARTNER_CITY
  PERIOD
  PRICE_RANGE
  SIMPLE_PRICE_HISTOGRAM
  TOTAL
}

enum ArtworkAttributionClassType {
  LIMITED_EDITION
  OPEN_EDITION
  UNIQUE
  UNKNOWN_EDITION
}

type ArtworkCondition {
  description: String
  displayText: String
  value: String
}

enum ArtworkConditionEnumType {
  EXCELLENT
  FAIR
  GOOD
  VERY_GOOD
}

type ArtworkConnection implements ArtworkConnectionInterface {
  edges: [ArtworkEdge]
  pageCursors: PageCursors!
  pageInfo: PageInfo!
  totalCount: Int
}

interface ArtworkConnectionInterface {
  edges: [ArtworkEdgeInterface]
  pageCursors: PageCursors!
  pageInfo: PageInfo!
}

type ArtworkConsignmentSubmission {
  actionLabel: String
  buttonLabel: String
  displayText: String @deprecated(reason: "Prefer `stateLabel` field.")
  externalID: String
  inProgress: Boolean
  internalID: String
  isEditable: Boolean
  isSold: Boolean
  state: ArtworkConsignmentSubmissionState!
  stateHelpMessage: String
  stateLabel: String
  stateLabelColor: String
}

type ArtworkConsignmentSubmissionConnection {
  edges: [ArtworkConsignmentSubmissionEdge]
  pageCursors: PageCursors!
  pageInfo: PageInfo!
  totalCount: Int
}

type ArtworkConsignmentSubmissionEdge {
  cursor: String!
  node: ArtworkConsignmentSubmission
}

enum ArtworkConsignmentSubmissionState {
  APPROVED
  CLOSED
  DRAFT
  HOLD
  PUBLISHED
  REJECTED
  RESUBMITTED
  SUBMITTED
}

union ArtworkContext = Fair | Sale | Show

interface ArtworkContextGrid {
  artworksConnection(after: String, before: String, first: Int, last: Int): ArtworkConnection
  ctaHref: String
  ctaTitle: String
  title: String
}

type ArtworkEdge implements ArtworkEdgeInterface {
  cursor: String!
  node: Artwork
}

interface ArtworkEdgeInterface {
  cursor: String
  node: Artwork
}

type ArtworkError {
  artwork: PartialArtwork
  requestError: RequestError
}

union ArtworkFigures = Image | Video

union ArtworkFilterFacet = Gene | Tag

union ArtworkHighlight = Article | Show

type ArtworkImport implements Node {
  columns: [String!]!
  createdAt(format: String, timezone: String): String
  createdBy: ArtworkImportCreatedBy
  currency: String!
  dimensionMetric: String!
  fileName: String!
  id: ID!
  internalID: ID!
  rawDataMapping: JSON!
  rowsConnection(after: String, before: String, blockersOnly: Boolean, createdOnly: Boolean, errorTypes: [ArtworkImportError], excludeErrorTypes: [ArtworkImportError], first: Int, hasErrors: Boolean, last: Int): ArtworkImportRowConnection
  state: ArtworkImportState
  summary: ArtworkImportSummary
  unmatchedArtistNames: [String!]!
  weightMetric: String!
}

type ArtworkImportConnection {
  edges: [ArtworkImportEdge]
  pageCursors: PageCursors!
  pageInfo: PageInfo!
  totalCount: Int
}

type ArtworkImportCreatedBy {
  id: ID!
  internalID: ID!
  name: String
}

type ArtworkImportEdge {
  cursor: String!
  node: ArtworkImport
}

enum ArtworkImportError {
  ARTWORK_CREATION_FAILED
  INVALID_CERTIFICATE_OF_AUTHENTICITY
  INVALID_CLASSIFICATION
  INVALID_DEPTH
  INVALID_DIAMETER
  INVALID_FRAMED_DEPTH
  INVALID_FRAMED_DIAMETER
  INVALID_FRAMED_HEIGHT
  INVALID_FRAMED_WIDTH
  INVALID_HEIGHT
  INVALID_MEDIUM
  INVALID_PRICE
  INVALID_SIGNATURE
  INVALID_TITLE
  INVALID_WEIGHT
  INVALID_WIDTH
  MISSING_ARTIST
  MISSING_DATE
  MISSING_PRICE
  MISSING_TITLE
  UNMATCHED_ARTIST
  UNMATCHED_IMAGE
}

type ArtworkImportRow {
  artists: [Artist!]
  artwork: Artwork
  currency: String!
  dimensionMetric: String!
  errors: [ArtworkImportRowError!]!
  excludedFromImport: Boolean!
  id: ID!
  images: [ArtworkImportRowImage!]!
  internalID: ID!
  priceListed: Money
  rawData: JSON!
  transformedData: ArtworkImportTransformedData!
  weightMetric: String!
}

type ArtworkImportRowConnection {
  edges: [ArtworkImportRowEdge]
  pageCursors: PageCursors!
  pageInfo: PageInfo!
  totalCount: Int
}

type ArtworkImportRowEdge {
  cursor: String!
  node: ArtworkImportRow
}

type ArtworkImportRowError {
  blocking: Boolean!
  errorType: ArtworkImportError
  id: ID!
  internalID: ID!
  metadata: JSON
}

type ArtworkImportRowImage {
  fileName: String!
  id: ID!
  internalID: ID!
  s3Bucket: String
  s3Key: String
}

enum ArtworkImportSource {
  CONVECTION
  MY_COLLECTION
}

enum ArtworkImportState {
  ARTIST_MATCHING_COMPLETE
  ARTWORKS_CREATION_COMPLETE
  CANCELED
  PENDING
}

type ArtworkImportSummary {
  currencies: [String!]!
  dimensionMetrics: [String!]!
  weightMetrics: [String!]!
}

type ArtworkImportTransformedData {
  artistNames: String
  artworkCondition: String
  artworkTitle: String
  certificateOfAuthenticity: String
  classification: String
  date: String
  depth: String
  diameter: String
  framedDepth: String
  framedDiameter: String
  framedHeight: String
  framedWidth: String
  height: String
  imageFileNames: String
  inventoryId: String
  materials: String
  medium: String
  price: String
  signature: [String]
  signatureDetails: String
  weight: String
  width: String
}

type ArtworkInfoRow {
  details: String
  label: String
}

type ArtworkInquiry {
  artwork: Artwork!
  id: ID!
  impulseConversationID: String
  internalID: ID!
}

type ArtworkInquiryConnection {
  edges: [ArtworkInquiryEdge]
  pageInfo: PageInfo!
}

type ArtworkInquiryEdge {
  cursor: String!
  node: ArtworkInquiry
}

type ArtworkLayer {
  artworksConnection(after: String, before: String, first: Int, last: Int): ArtworkConnection
  cached: Int
  description: String
  href: String
  id: ID!
  internalID: ID!
  name: String
  type: String
}

type ArtworkListingOptions {
  isBuyNow: Boolean
  isMakeOffer: Boolean
}

type ArtworkMedium {
  filterGene: Gene
  longDescription: String
  name: String
}

type ArtworkMeta {
  description(limit: Int = 155): String
  image: String
  share: String
  title: String
}

type ArtworkMutationDeleteSuccess {
  success: Boolean
}

type ArtworkMutationFailure {
  mutationError: GravityMutationError
}

union ArtworkMutationType = ArtworkMutationDeleteSuccess | ArtworkMutationFailure

union ArtworkOrEditionSetType = Artwork | EditionSet

type ArtworkPriceInsights {
  annualLotsSold: Int
  annualValueSoldCents: FormattedNumber
  annualValueSoldDisplayText: String
  artistId: String
  averageSalePriceDisplayText(format: String = ""): String
  demandRank: Float
  demandRankDisplayText: String
  isHighDemand: Boolean
  lastAuctionResultDate: String
  liquidityRankDisplayText(format: String = ""): String
  medianSaleOverEstimatePercentage: Float
  medianSalePriceDisplayText(format: String = ""): String
  medium: String
  sellThroughRate: Float
}

type ArtworkPublishedNotificationItem {
  artists: [Artist!]!
  artworksConnection(after: String, before: String, first: Int, last: Int): ArtworkConnection
}

union ArtworkResult = Artwork | ArtworkError

type ArtworkSavedSearch {
  suggestedArtworksConnection(after: String, before: String, first: Int, last: Int): ArtworkConnection
}

type ArtworkSignatureMeta {
  hasSignature: Boolean!
  hasStickerLabel: Boolean!
  isSignedByArtist: Boolean!
  isSignedInPlate: Boolean!
  isSignedOther: Boolean!
  isStampedByArtistEstate: Boolean!
}

enum ArtworkSignatureTypeEnum {
  HAND_SIGNED_BY_ARTIST
  NOT_SIGNED
  OTHER
  SIGNED_IN_PLATE
  STAMPED_BY_ARTIST_ESTATE
  STICKER_LABEL
}

enum ArtworkSizes {
  LARGE
  MEDIUM
  SMALL
}

enum ArtworkSorts {
  AVAILABILITY_ASC
  CREATED_AT_ASC
  CREATED_AT_DESC
  DELETED_AT_ASC
  DELETED_AT_DESC
  ICONICITY_DESC
  LAST_OFFERABLE_ACTIVITY_AT_DESC
  LAST_SAVED_AT_DESC
  MERCHANDISABILITY_DESC
  PARTNER_UPDATED_AT_DESC
  PUBLISHED_AT_ASC
  PUBLISHED_AT_DESC
  RECENT_SAVES_COUNT_DESC
  TITLE_ASC
  TITLE_DESC
}

type ArtworkVersion implements Node {
  artistNames: String
  artists: [Artist]
  attributionClass: AttributionClass
  condition_description: String
  date: String
  defaultImageID: String
  dimensions: dimensions
  id: ID!
  image: Image
  internalID: ID!
  medium: String
  provenance: String
  title: String
}

type ArtworksAggregationResults {
  counts: [AggregationCount]
  slice: ArtworkAggregation
}

type ArtworksCollectionsBatchUpdateCounts {
  addedToCollections: Int
  artworks: Int
  removedFromCollections: Int
}

type ArtworksCollectionsBatchUpdateFailure {
  mutationError: GravityMutationError
}

input ArtworksCollectionsBatchUpdateInput {
  addToCollectionIDs: [String!]
  artworkIDs: [String!]!
  clientMutationId: String
  removeFromCollectionIDs: [String!]
}

type ArtworksCollectionsBatchUpdatePayload {
  clientMutationId: String
  responseOrError: ArtworksCollectionsBatchUpdateResponseOrError
}

union ArtworksCollectionsBatchUpdateResponseOrError = ArtworksCollectionsBatchUpdateFailure | ArtworksCollectionsBatchUpdateSuccess

type ArtworksCollectionsBatchUpdateSuccess {
  addedToCollections: [Collection]
  artwork: Artwork
  counts: ArtworksCollectionsBatchUpdateCounts
  removedFromCollections: [Collection]
}

enum AssetType {
  ADDITIONAL_FILE
  IMAGE
}

type AssignArtworkImportArtistFailure {
  mutationError: GravityMutationError
}

input AssignArtworkImportArtistInput {
  artistID: String!
  artistName: String!
  artworkImportID: String!
  clientMutationId: String
}

type AssignArtworkImportArtistPayload {
  assignArtworkImportArtistOrError: AssignArtworkImportArtistResponseOrError
  clientMutationId: String
}

union AssignArtworkImportArtistResponseOrError = AssignArtworkImportArtistFailure | AssignArtworkImportArtistSuccess

type AssignArtworkImportArtistSuccess {
  artworkImport: ArtworkImport
  artworkImportID: String!
  updatedRowsCount: Int!
}

type Attachment {
  contentType: String!
  downloadURL: String!
  fileName: String!
  id: ID!
  internalID: ID!
}

type AttributionClass {
  id: ID!
  info: String @deprecated(reason: "Prefer `shortDescription`")
  internalID: ID!
  longDescription: String
  name: String
  shortArrayDescription: [String]
  shortDescription: String
}

type AuctionArtworkGrid implements ArtworkContextGrid {
  artworksConnection(after: String, before: String, first: Int, last: Int): ArtworkConnection
  ctaHref: String
  ctaTitle: String
  title: String
}

type AuctionCollectorSignals {
  bidCount: Int!
  liveBiddingStarted: Boolean!
  liveStartAt(format: String, timezone: String): String
  lotClosesAt(format: String, timezone: String): String
  lotWatcherCount: Int!
  onlineBiddingExtended: Boolean!
  registrationEndsAt(format: String, timezone: String): String
}

type AuctionLotDimensions {
  depth: Float
  height: Float
  width: Float
}

type AuctionLotEstimate {
  display: String
  high: Float
  low: Float
}

type AuctionLotImages {
  larger: Image
  thumbnail: Image
}

type AuctionLotPerformance {
  mid: String
}

type AuctionResult implements Node {
  artist: Artist
  artistID: String!
  boughtIn: Boolean
  categoryText: String
  comparableAuctionResults(after: String, before: String, first: Int, last: Int): AuctionResultConnection
  currency: String
  date(format: String, timezone: String): String
  dateText: String
  description: String
  dimensionText: String
  dimensions: AuctionLotDimensions
  estimate: AuctionLotEstimate
  externalURL: String
  id: ID!
  images: AuctionLotImages
  internalID: ID!
  isInArtsyAuction: Boolean!
  isUpcoming: Boolean
  location: String
  lotNumber: String
  mediumText: String
  organization: String
  performance: AuctionLotPerformance
  priceRealized: AuctionResultPriceRealized
  saleDate(format: String, timezone: String): String
  saleDateText: String
  saleTitle: String
  slug: String
  title: String
}

type AuctionResultConnection {
  aggregations: [AuctionResultsAggregationType]
  createdYearRange: YearRange
  edges: [AuctionResultEdge]
  pageCursors: PageCursors!
  pageInfo: PageInfo!
  totalCount: Int
}

type AuctionResultEdge {
  cursor: String!
  node: AuctionResult
}

type AuctionResultPriceRealized {
  cents: Float
  centsUSD: Float
  display(format: String = ""): String
  displayUSD(format: String = ""): String
}

enum AuctionResultSorts {
  DATE_ASC
  DATE_DESC
  ESTIMATE_AND_DATE_DESC
  PRICE_AND_DATE_DESC
}

enum AuctionResultsAggregation {
  CURRENCIES_COUNT
  LOTS_BY_CREATED_YEAR
  LOTS_BY_SALE_YEAR
  SIMPLE_PRICE_HISTOGRAM
}

type AuctionResultsAggregationType {
  counts: [AggregationCount]
  slice: AuctionResultsAggregation
}

type AuctionResultsByArtists {
  artistId: String
  boughtIn: Boolean!
  categoryText: String
  currency: String
  date: ISO8601DateTime
  dateText: String
  depthCm: Int
  description: String
  diameterCm: Int
  dimensionText: String
  externalUrl: String
  hammerPriceCents: BigInt
  hammerPriceCentsUsd: BigInt
  heightCm: Int
  highEstimateCents: BigInt
  highEstimateCentsUsd: BigInt
  id: ID!
  location: String
  lotNumber: String
  lowEstimateCents: BigInt
  lowEstimateCentsUsd: BigInt
  mediumText: String
  organization: String
  priceRealizedCents: BigInt
  priceRealizedCentsUsd: BigInt
  saleDate: String
  saleDateText: String
  saleOverEstimatePercentage: Float
  saleTitle: String
  title: String
  widthCm: Int
}

type AuctionResultsByArtistsConnection {
  edges: [AuctionResultsByArtistsEdge]
  nodes: [AuctionResultsByArtists]
  pageCursors: PageCursors
  pageInfo: PageInfo!
  totalCount: Int
  totalPages: Int
}

type AuctionResultsByArtistsEdge {
  cursor: String!
  node: AuctionResultsByArtists
}

enum AuctionResultsState {
  ALL
  PAST
  UPCOMING
}

enum AuctionSegmentationType {
  ADJACENT
  DISENGAGED
  ENGAGED
  NEW
}

enum AuctionState {
  CLOSED
  OPEN
  UPCOMING
}

type AuctionsArtsyBidder {
  id: ID!
  paddleNumber: ID!
  userId: ID
}

union AuctionsBidder = AuctionsArtsyBidder | AuctionsOfflineBidder

scalar AuctionsDateTime

type AuctionsIncrementPolicy {
  changes: [AuctionsIncrementPolicyChange!]!
  createdAt: AuctionsDateTime!
  enumerate(from: Long = 0, nextIncrementRule: AuctionsNextIncrementRule = SnapToPresetIncrements, until: Long = 0): [AuctionsMoney!]!
  groupTag: ID!
  id: ID!
  initialIncrementCents: Long!
  subgroupTag: ID!
}

type AuctionsIncrementPolicyChange {
  increment: AuctionsMoney!
  incrementCents: Long!
  threshold: AuctionsMoney!
  thresholdCents: Long!
}

input AuctionsIncrementPolicyChangeInput {
  incrementCents: Long!
  thresholdCents: Long!
}

type AuctionsIncrementPolicyGroup {
  groupTag: ID!
  subgroupTags: [ID!]!
  subgroups: [AuctionsIncrementPolicySubgroup!]!
}

type AuctionsIncrementPolicySubgroup {
  group: AuctionsIncrementPolicyGroup!
  revisions: [AuctionsIncrementPolicy!]!
  subgroupTag: ID!
}

type AuctionsLotStanding implements AuctionsNode {
  id: ID!
  isHighestBidder: Boolean!
  leadingBidAmount: AuctionsMoney!
  lot: AuctionsLotState!
  lotState: AuctionsLotState! @deprecated(reason: "prefer `lot`")
  rawId: String!
  saleArtwork: SaleArtwork
}

type AuctionsLotStandingConnection {
  edges: [AuctionsLotStandingEdge]
  pageInfo: AuctionsPageInfo!
}

type AuctionsLotStandingEdge {
  cursor: String!
  node: AuctionsLotStanding!
}

type AuctionsLotState {
  bidCount: Int!
  floorSellingPrice: Money
  floorSellingPriceCents: Long
  floorWinningBidder: AuctionsBidder
  id: ID!
  internalID: ID!
  onlineAskingPrice: Money
  onlineAskingPriceCents: Long!
  onlineSellingToBidder: AuctionsBidder
  reserveStatus: AuctionsReserveStatus!
  saleId: ID!
  sellingPrice: Money
  sellingPriceCents: Long!
  soldStatus: AuctionsSoldStatus!
}

type AuctionsMoney {
  displayAmount(decimalSeparator: String = ".", fractionalDigits: Int = 2, groupingSeparator: String = ",", showFractionalDigits: Boolean = true): String!
  units: Long!
}

type AuctionsNewIncrementPolicy {
  changes: [AuctionsIncrementPolicyChange!]!
  enumeratedIncrements: [[AuctionsMoney!]!]!
  groupTag: ID!
  id: ID
  initialIncrementCents: Long!
  maxPercentChange: Float!
  minPercentChange: Float!
  prettyPrintedIncrements(fractionalDigits: Int = 2): [String!]!
  subgroupTag: ID!
  warnings: [String!]!
}

input AuctionsNewIncrementPolicyInput {
  changes: [AuctionsIncrementPolicyChangeInput!]!
  groupTag: ID!
  id: ID
  initialIncrementCents: Long!
  subgroupTag: ID!
}

enum AuctionsNextIncrementRule {
  AddToPastValue
  SnapToPresetIncrements
}

interface AuctionsNode {
  id: ID!
}

type AuctionsOfflineBidder {
  singletonDummyField: String
}

type AuctionsPageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

enum AuctionsReserveStatus {
  NoReserve
  ReserveMet
  ReserveNotMet
}

type AuctionsSaleState {
  bannedUsers: [AuctionsUser!]!
  currentLot: AuctionsLotState
  id: ID!
  internalID: ID!
  lotIdsWithHigherArtsyBidNotWon: [String!]!
  lotIdsWithSameArtsyBidNotWon: [String!]!
  lotIdsWithoutFairWarning: [String!]!
  lotIdsWithoutFinalCall: [String!]!
  lots: [AuctionsLotState!]!
  passedLotIdsWithArtsyBids: [String!]!
  reopenedLotIds: [String!]!
  totalSoldGMVCents: Long!
}

enum AuctionsSoldStatus {
  ForSale
  Passed
  Sold
}

type AuctionsUser implements AuctionsNode {
  id: ID!
  internalID: ID!
  rawId: String!
  userId: ID!
}

enum AuthenticationProvider {
  APPLE
  FACEBOOK
  GOOGLE
}

enum AuthenticationStatus {
  INVALID
  LOGGED_IN
  LOGGED_OUT
}

type AuthenticationType {
  id: ID!
  internalID: ID!
  provider: AuthenticationProvider!
  uid: String!
}

type Author {
  articles: [Article!]!
  articlesConnection(after: String, before: String, first: Int, last: Int, page: Int, size: Int): AuthorArticlesConnectionConnection
  bio(format: Format): String
  id: ID!
  image: Image
  initials(length: Int = 3): String
  instagramHandle: String
  internalID: ID!
  name: String!
  role: String
  twitterHandle: String
}

type AuthorArticlesConnectionConnection {
  edges: [AuthorArticlesConnectionEdge]
  pageCursors: PageCursors!
  pageInfo: PageInfo!
  totalCount: Int
}

type AuthorArticlesConnectionEdge {
  cursor: String!
  node: Article
}

enum Availability {
  FOR_SALE
  NOT_FOR_SALE
  ON_HOLD
  ON_LOAN
  PERMANENT_COLLECTION
  SOLD
}

type BackupSecondFactor implements SecondFactor {
  code: String!
  disabledAt(format: String, timezone: String): String
  enabled: Boolean!
  enabledAt(format: String, timezone: String): String
  internalID: ID!
  kind: SecondFactorKind!
}

type BackupSecondFactors {
  secondFactors: [BackupSecondFactor!]!
}

union BackupSecondFactorsOrErrorsUnion = BackupSecondFactors | Errors

type BankAccount {
  accountHolderName: String
  bankName: String!
  id: ID!
  internalID: ID!
  last4: String!
  type: BankAccountTypes!
}

type BankAccountConnection {
  edges: [BankAccountEdge]
  pageInfo: PageInfo!
}

type BankAccountEdge {
  cursor: String!
  node: BankAccount
}

type BankAccountMutationFailure {
  mutationError: GravityMutationError
}

type BankAccountMutationSuccess {
  bankAccount: BankAccount
  bankAccountEdge: BankAccountEdge
}

union BankAccountMutationType = BankAccountMutationFailure | BankAccountMutationSuccess

enum BankAccountTypes {
  SEPA_DEBIT
  US_BANK_ACCOUNT
}

type BidIncrement {
  amount: Int
  from: Int
  to: Int
}

type BidIncrementsFormatted {
  cents: Float
  display: String
}

type Bidder implements Node {
  createdAt(format: String, timezone: String): String
  id: ID!
  internalID: ID!
  pin: String
  qualifiedForBidding: Boolean
  sale: Sale
  user: User
}

type BidderPosition {
  createdAt(format: String, timezone: String): String
  highestBid: HighestBid
  id: ID!
  internalID: ID!
  isActive: Boolean
  isRetracted: Boolean
  isWinning: Boolean
  isWithBidMax: Boolean
  maxBid: BidderPositionMaxBid
  processedAt(format: String, timezone: String): String
  saleArtwork: SaleArtwork
  suggestedNextBid: BidderPositionSuggestedNextBid
  updatedAt(format: String, timezone: String): String
}

input BidderPositionInput {
  artworkID: String!
  clientMutationId: String
  maxBidAmountCents: Float!
  saleID: String!
}

type BidderPositionMaxBid {
  amount(decimal: String = ".", disambiguate: Boolean = false, format: String = "%s%v", precision: Int = 0, symbol: String, thousand: String = ","): String
  cents: Float
  display: String
}

type BidderPositionPayload {
  clientMutationId: String
  result: BidderPositionResult
}

type BidderPositionResult {
  messageDescriptionMD: String
  messageHeader: String
  position: BidderPosition
  rawError: String
  status: String!
}

type BidderPositionSuggestedNextBid {
  amount(decimal: String = ".", disambiguate: Boolean = false, format: String = "%s%v", precision: Int = 0, symbol: String, thousand: String = ","): String
  cents: Float
  display: String
}

scalar BigInt

type BulkAddArtworksToShowMutationFailure {
  mutationError: GravityMutationError
}

input BulkAddArtworksToShowMutationInput {
  clientMutationId: String
  filters: BulkArtworkFilterInput
  id: String!
  showId: String!
  source: BulkUpdateSourceEnum
}

type BulkAddArtworksToShowMutationPayload {
  bulkAddArtworksToShowOrError: BulkAddArtworksToShowMutationType
  clientMutationId: String
}

type BulkAddArtworksToShowMutationSuccess {
  skippedPartnerArtworks: BulkAddArtworksToShowResponse
  updatedPartnerArtworks: BulkAddArtworksToShowResponse
}

union BulkAddArtworksToShowMutationType = BulkAddArtworksToShowMutationFailure | BulkAddArtworksToShowMutationSuccess

type BulkAddArtworksToShowResponse {
  count: Int
  ids: [String]
}

input BulkArtworkFilterInput {
  artistId: String
  artworkIds: [String]
  availability: Availability
  locationId: String
  partnerArtistId: String
  published: Boolean
}

input BulkUpdateArtworksMetadataInput {
  artistIds: [String]
  availability: Availability
  category: String
  domesticShippingFeeCents: Int
  ecommerce: Boolean
  locationId: String
  medium: String
  offer: Boolean
  priceAdjustment: Int
  priceListed: Float
  provenance: String
  published: Boolean
  signature: String
}

type BulkUpdateArtworksMetadataMutationFailure {
  mutationError: GravityMutationError
}

input BulkUpdateArtworksMetadataMutationInput {
  clientMutationId: String
  filters: BulkArtworkFilterInput
  id: String!
  metadata: BulkUpdateArtworksMetadataInput
  source: BulkUpdateSourceEnum
}

type BulkUpdateArtworksMetadataMutationPayload {
  bulkUpdateArtworksMetadataOrError: BulkUpdateArtworksMetadataMutationType
  clientMutationId: String
}

type BulkUpdateArtworksMetadataMutationSuccess {
  skippedPartnerArtworks: BulkUpdateArtworksMetadataResponse
  updatedPartnerArtworks: BulkUpdateArtworksMetadataResponse
}

union BulkUpdateArtworksMetadataMutationType = BulkUpdateArtworksMetadataMutationFailure | BulkUpdateArtworksMetadataMutationSuccess

type BulkUpdateArtworksMetadataResponse {
  count: Int
  ids: [String]
}

enum BulkUpdateSourceEnum {
  ADMIN
  ARTWORKS_LIST
  PARTNER_ARTIST_ARTWORKS_LIST
  SHOW_ARTWORKS_LIST
}

type BuyersPremium {
  amount(decimal: String = ".", disambiguate: Boolean = false, format: String = "%s%v", precision: Int = 0, symbol: String, thousand: String = ","): String
  cents: Int
  percent: Float
}

type CalculatedCost {
  bidAmount: Money
  buyersPremium: Money
  subtotal: Money
}

type CalendarYearMarketPriceInsights {
  artistId: ID
  artistName: String
  averageSalePrice: BigInt
  createdAt: ISO8601DateTime
  id: ID!
  lotsSold: BigInt
  medianSalePrice: BigInt
  medium: String
  updatedAt: ISO8601DateTime
  valueSold: BigInt
  year: String!
}

type CalendarYearPriceInsights {
  calendarYearMarketPriceInsights: [CalendarYearMarketPriceInsights!]
  medium: String!
}

type CancelArtworkImportFailure {
  mutationError: GravityMutationError
}

input CancelArtworkImportInput {
  artworkImportID: String!
  clientMutationId: String
}

type CancelArtworkImportPayload {
  cancelArtworkImportOrError: CancelArtworkImportResponseOrError
  clientMutationId: String
}

union CancelArtworkImportResponseOrError = CancelArtworkImportFailure | CancelArtworkImportSuccess

type CancelArtworkImportSuccess {
  artworkImport: ArtworkImport
}

type Card {
  displayBrand: String!
  last4: String!
}

type CareerHighlight implements Node {
  artist: Artist!
  collected: Boolean!
  group: Boolean!
  id: ID!
  internalID: ID!
  partner: Partner!
  solo: Boolean!
  venue: String!
}

type CausalityLotState {
  bidCount: Int
  floorSellingPrice: Money
  floorSellingPriceCents: Int
  internalID: String
  onlineAskingPrice: Money
  onlineAskingPriceCents: Int
  reserveStatus: String
  saleId: String
  sellingPrice: Money
  sellingPriceCents: Int
  soldStatus: String
}

type CertificateOfAuthenticityDetails {
  coaByAuthenticatingBody: Boolean
  coaByGallery: Boolean
}

type Channel {
  articlesConnection(after: String, before: String, first: Int, last: Int, sort: ArticleSorts): ArticleConnection
  id: ID!
  image: Image
  internalID: ID!
  links: [ChannelLink!]!
  name: String!
  slug: String
  tagline: String
  type: ChannelType!
}

type ChannelLink {
  text: String!
  url: String!
}

enum ChannelType {
  Editorial
  Support
  Team
}

type City {
  coordinates: LatLng
  fairsConnection(after: String, before: String, first: Int, last: Int, sort: FairSorts, status: EventStatus): FairConnection
  fullName: String!
  name: String!
  showsConnection(after: String, before: String, dayThreshold: Int, first: Int, includeStubShows: Boolean, last: Int, page: Int, partnerType: PartnerShowPartnerType, size: Int, sort: ShowSorts, status: EventStatus = CURRENT): ShowConnection
  slug: String!
  sponsoredContent: CitySponsoredContent
}

type CitySponsoredContent {
  artGuideUrl: String
  featuredShows: [Show]
  introText: String
  showsConnection(after: String, before: String, first: Int, last: Int, sort: ShowSorts, status: EventStatus): ShowConnection
}

type ClientFeatureFlag {
  description: String
  enabled: String!
  name: String!
  variant: String
  variants: [ClientFeatureFlagVariant]
}

type ClientFeatureFlagVariant {
  name: String!
  stickiness: String
  weight: Int!
}

type Collection {
  artworksConnection(after: String, before: String, first: Int, forSale: Boolean, last: Int, page: Int, priceMax: Int, priceMin: Int, sort: CollectionArtworkSorts = SAVED_AT_DESC): ArtworkConnection
  artworksCount(onlyVisible: Boolean = false): Int!
  default: Boolean!
  id: ID!
  internalID: ID!
  isSavedArtwork(artworkID: String!): Boolean!
  name: String!
  private: Boolean!
  saves: Boolean!
  shareableWithPartners: Boolean!
  slug: String
}

enum CollectionArtworkSorts {
  POSITION_ASC
  POSITION_DESC
  SAVED_AT_ASC
  SAVED_AT_DESC
}

enum CollectionSorts {
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}

type CollectionsConnection {
  edges: [CollectionsEdge]
  pageCursors: PageCursors!
  pageInfo: PageInfo!
  totalCount: Int
}

type CollectionsEdge {
  cursor: String!
  node: Collection
}

type CollectorProfileType implements Node {
  artsyUserSince(format: String, timezone: String): String
  bio: String
  collectedArtworksCount: Int!
  collectorLevel: Int
  companyName: String
  companyWebsite: String
  confirmedBuyerAt(format: String, timezone: String): String
  email: String
  emailConfirmed: Boolean @deprecated(reason: "emailConfirmed is going to be removed, use isEmailConfirmed instead")
  firstNameLastInitial: String
  followedArtistsCount: Int!
  icon: Image
  id: ID!
  identityVerified: Boolean @deprecated(reason: "identityVerified is going to be removed, use isIdentityVerified instead")
  initials(length: Int = 3): String
  inquiryRequestsCount: Int!
  institutionalAffiliations: String
  intents: [String]
  interestsConnection(after: String, before: String, first: Int, last: Int): UserInterestConnection
  internalID: ID!
  isActiveBidder: Boolean
  isActiveInquirer: Boolean
  isEmailConfirmed: Boolean
  isIdentityVerified: Boolean
  isProfileComplete: Boolean
  lastUpdatePromptAt(format: String, timezone: String): String
  location: MyLocation
  loyaltyApplicantAt(format: String, timezone: String): String
  name: String
  otherRelevantPositions: String
  owner: User!
  ownerID: ID!
  partnerEngagement(partnerID: ID!): PartnerEngagement
  privacy: String
  profession: String
  professionalBuyerAppliedAt(format: String, timezone: String): String
  professionalBuyerAt(format: String, timezone: String): String
  savedArtworksCount: Int!
  selfReportedPurchases: String
  summaryParagraph(artworkID: String): String
  totalBidsCount: Int!
  userInterests: [UserInterest]! @deprecated(reason: "Use \"owner#interestsConnection\" field instead.")
}

type CollectorProfileTypeConnection {
  edges: [CollectorProfileTypeEdge]
  pageCursors: PageCursors!
  pageInfo: PageInfo!
  totalCount: Int
}

type CollectorProfileTypeEdge {
  cursor: String!
  node: CollectorProfileType
}

type CollectorProfileUpdatePromptNotificationItem {
  collectorProfile: CollectorProfileType!
  me: Me!
}

type CollectorResume {
  buyerActivity: CommerceBuyerActivity
  collectorProfile: CollectorProfileType!
  isCollectorFollowingPartner: Boolean!
  purchases: purchases
  userId: String!
}

type CollectorSignals {
  auction: AuctionCollectorSignals
  bidCount: Int @deprecated(reason: "Use nested field in `auction` instead")
  curatorsPick: Boolean
  increasedInterest: Boolean!
  liveBiddingStarted: Boolean @deprecated(reason: "Use nested field in `auction` instead")
  liveStartAt: String @deprecated(reason: "Use nested field in `auction` instead")
  lotClosesAt: String @deprecated(reason: "Use nested field in `auction` instead")
  lotWatcherCount: Int @deprecated(reason: "Use nested field in `auction` instead")
  onlineBiddingExtended: Boolean @deprecated(reason: "Use nested field in `auction` instead")
  partnerOffer: PartnerOfferToCollector
  primaryLabel(ignore: [LabelSignalEnum]): LabelSignalEnum
  registrationEndsAt: String @deprecated(reason: "Use nested field in `auction` instead")
  runningShow: Show
}

union CommerceActionOrFailureUnion = CommerceOrderRequiresAction | CommerceOrderWithMutationFailure

input CommerceAddInitialOfferToOrderInput {
  amountCents: Int!
  clientMutationId: String
  note: String
  orderId: ID!
}

type CommerceAddInitialOfferToOrderPayload {
  clientMutationId: String
  orderOrError: CommerceOrderOrFailureUnion!
}

type CommerceApplicationError {
  code: String!
  data: String
  type: String!
}

input CommerceApproveOrderInput {
  clientMutationId: String
  id: ID!
  shippingContact: CommerceShippingContactAttributes
}

type CommerceApproveOrderPayload {
  clientMutationId: String
  orderOrError: CommerceOrderOrFailureUnion!
}

type CommerceBankAccountBalance {
  balanceCents: Int
  currencyCode: String
}

type CommerceBuyOrder implements CommerceOrder {
  artsyCollectsTaxes: Boolean
  artsyRemitsTaxes: Boolean
  artsyTotal(decimal: String = ".", format: String = "%s%v", precision: Int = 0, symbol: String, thousand: String = ","): String
  artsyTotalCents: Int
  artworkDetails: String
  availablePaymentMethods: [CommercePaymentMethodEnum!]!
  bankAccountId: String
  buyer: CommerceOrderPartyUnion!
  buyerDetails: OrderParty
  buyerPhoneNumber: String
  buyerPhoneNumberCountryCode: String
  buyerProfile: CollectorProfileType
  buyerTotal(decimal: String = ".", format: String = "%s%v", precision: Int = 0, symbol: String, thousand: String = ","): String
  buyerTotalCents: Int
  code: String!
  commissionFee(decimal: String = ".", format: String = "%s%v", precision: Int = 0, symbol: String, thousand: String = ","): String
  commissionFeeCents: Int
  commissionRate: Float
  conditionsOfSale: String
  conversation: Conversation
  createdAt(format: String, timezone: String): String!
  creditCard: CreditCard
  creditCardId: String
  creditCardWalletType: String
  currencyCode: String!
  displayCommissionRate: String
  displayState: CommerceOrderDisplayStateEnum!
  id: ID!
  impulseConversationId: String
  internalID: ID!
  itemsTotal(decimal: String = ".", format: String = "%s%v", precision: Int = 0, symbol: String, thousand: String = ","): String
  itemsTotalCents: Int
  lastApprovedAt(format: String, timezone: String): String
  lastSubmittedAt(format: String, timezone: String): String
  lastTransactionFailed: Boolean
  lastTransactionFailureCode: String
  lineItems(after: String, before: String, first: Int, last: Int): CommerceLineItemConnection
  mode: CommerceOrderModeEnum
  orderHistory: [CommerceOrderEventUnion!]!
  orderUpdateState: String
  paymentMethod: CommercePaymentMethodEnum
  paymentMethodDetails: PaymentMethodUnion
  paymentSet: Boolean!
  requestedFulfillment: CommerceRequestedFulfillmentUnion
  requireIdentityVerification: Boolean!
  seller: CommerceOrderPartyUnion!
  sellerDetails: OrderParty
  sellerTotal(decimal: String = ".", format: String = "%s%v", precision: Int = 0, symbol: String, thousand: String = ","): String
  sellerTotalCents: Int
  shippingRadius: String
  shippingTotal(decimal: String = ".", format: String = "%s%v", precision: Int = 0, symbol: String, thousand: String = ","): String
  shippingTotalCents: Int
  source: CommerceOrderSourceEnum!
  state: CommerceOrderStateEnum!
  stateExpiresAt(format: String, timezone: String): String
  stateReason: String
  stateUpdatedAt(format: String, timezone: String): String
  stripeConfirmationToken: String
  taxTotal(decimal: String = ".", format: String = "%s%v", precision: Int = 0, symbol: String, thousand: String = ","): String
  taxTotalCents: Int
  taxTypes: [CommerceTaxTypeEnum!]!
  totalListPrice(decimal: String = ".", format: String = "%s%v", precision: Int = 0, symbol: String, thousand: String = ","): String
  totalListPriceCents: Int!
  transactionFee(decimal: String = ".", format: String = "%s%v", precision: Int = 0, symbol: String, thousand: String = ","): String
  transactionFeeCents: Int
  updatedAt(format: String, timezone: String): String!
}

input CommerceBuyerAcceptOfferInput {
  clientMutationId: String
  offerId: ID!
}

type CommerceBuyerAcceptOfferPayload {
  clientMutationId: String
  orderOrError: CommerceOrderOrFailureUnion!
}

type CommerceBuyerActivity {
  totalPurchases: Int!
}

input CommerceBuyerCounterOfferInput {
  amountCents: Int!
  clientMutationId: String
  note: String
  offerId: ID!
}

type CommerceBuyerCounterOfferPayload {
  clientMutationId: String
  orderOrError: CommerceOrderOrFailureUnion!
}

enum CommerceBuyerOfferActionEnum {
  OFFER_ACCEPTED
  OFFER_ACCEPTED_CONFIRM_NEEDED
  OFFER_RECEIVED
  OFFER_RECEIVED_CONFIRM_NEEDED
  PAYMENT_FAILED
  PROVISIONAL_OFFER_ACCEPTED
}

input CommerceBuyerRejectOfferInput {
  clientMutationId: String
  offerId: ID!
  rejectReason: CommerceCancelReasonTypeEnum
}

type CommerceBuyerRejectOfferPayload {
  clientMutationId: String
  orderOrError: CommerceOrderOrFailureUnion!
}

enum CommerceCancelReasonTypeEnum {
  ADMIN_CANCELED
  ADMIN_FAILED_REVIEW
  BUYER_LAPSED
  BUYER_REJECTED
  FUNDS_NOT_RECEIVED
  SELLER_LAPSED
  SELLER_REJECTED
  SELLER_REJECTED_ARTWORK_UNAVAILABLE
  SELLER_REJECTED_OFFER_TOO_LOW
  SELLER_REJECTED_OTHER
  SELLER_REJECTED_SHIPPING_UNAVAILABLE
}

input CommerceConfirmFulfillmentInput {
  clientMutationId: String
  id: ID!
}

type CommerceConfirmFulfillmentPayload {
  clientMutationId: String
  orderOrError: CommerceOrderOrFailureUnion!
}

input CommerceConfirmPickupInput {
  clientMutationId: String
  id: ID!
}

type CommerceConfirmPickupPayload {
  clientMutationId: String
  orderOrError: CommerceOrderOrFailureUnion!
}

input CommerceCreateBankDebitSetupForOrderInput {
  clientMutationId: String
  id: ID!
}

type CommerceCreateBankDebitSetupForOrderPayload {
  actionOrError: CommerceActionOrFailureUnion!
  clientMutationId: String
}

input CommerceCreateInquiryOfferOrderWithArtworkInput {
  artworkId: String!
  clientMutationId: String
  editionSetId: String
  findActiveOrCreate: Boolean = true
  impulseConversationId: String!
  quantity: Int
}

type CommerceCreateInquiryOfferOrderWithArtworkPayload {
  clientMutationId: String
  orderOrError: CommerceOrderOrFailureUnion!
}

input CommerceCreateInquiryOrderWithArtworkInput {
  artworkId: String!
  clientMutationId: String
  editionSetId: String
  impulseConversationId: String!
  quantity: Int
}

type CommerceCreateInquiryOrderWithArtworkPayload {
  clientMutationId: String
  orderOrError: CommerceOrderOrFailureUnion!
}

input CommerceCreateOfferOrderWithArtworkInput {
  artworkId: String!
  clientMutationId: String
  editionSetId: String
  findActiveOrCreate: Boolean = true
  partnerOfferId: String
  quantity: Int
}

type CommerceCreateOfferOrderWithArtworkPayload {
  clientMutationId: String
  orderOrError: CommerceOrderOrFailureUnion!
}

input CommerceCreateOrderWithArtworkInput {
  artworkId: String!
  clientMutationId: String
  editionSetId: String
  quantity: Int
}

type CommerceCreateOrderWithArtworkPayload {
  clientMutationId: String
  orderOrError: CommerceOrderOrFailureUnion!
}

input CommerceCreatePartnerOfferOrderInput {
  clientMutationId: String
  editionSetId: String
  impulseConversationId: String
  partnerOfferId: String!
  quantity: Int
}

type CommerceCreatePartnerOfferOrderPayload {
  clientMutationId: String
  orderOrError: CommerceOrderOrFailureUnion!
}

scalar CommerceDate

scalar CommerceDateTime

enum CommerceEeiFormStatusEnum {
  APPROVED
  CLEARED
  PENDING
  REJECTED
  SUBMITTED
}

interface CommerceEventInterface {
  createdAt(format: String, timezone: String): String!
}

input CommerceFixFailedPaymentInput {
  clientMutationId: String
  creditCardId: String!
  offerId: ID
  orderId: ID
}

type CommerceFixFailedPaymentPayload {
  clientMutationId: String
  orderOrError: CommerceOrderOrFailureUnion!
}

input CommerceFulfillAtOnceInput {
  clientMutationId: String
  fulfillment: CommerceFulfillmentAttributes!
  id: ID!
}

type CommerceFulfillAtOncePayload {
  clientMutationId: String
  orderOrError: CommerceOrderOrFailureUnion!
}

type CommerceFulfillment {
  courier: String!
  createdAt(format: String, timezone: String): String!
  estimatedDelivery(format: String, timezone: String): String!
  id: ID!
  internalID: ID!
  notes: String
  trackingId: String
  updatedAt(format: String, timezone: String): String!
}

input CommerceFulfillmentAttributes {
  courier: String!
  estimatedDelivery: CommerceDate
  notes: String
  trackingId: String
}

type CommerceFulfillmentConnection {
  edges: [CommerceFulfillmentEdge]
  nodes: [CommerceFulfillment]
  pageInfo: CommercePageInfo!
}

type CommerceFulfillmentEdge {
  cursor: String!
  node: CommerceFulfillment
}

type CommerceLineItem {
  artwork: Artwork
  artworkId: String!
  artworkOrEditionSet: ArtworkOrEditionSetType
  artworkVersion: ArtworkVersion
  artworkVersionId: String!
  commissionFee(decimal: String = ".", format: String = "%s%v", precision: Int = 0, symbol: String, thousand: String = ","): String
  commissionFeeCents: Int
  createdAt(format: String, timezone: String): String!
  editionSetId: String
  fulfillments(after: String, before: String, first: Int, last: Int): CommerceFulfillmentConnection
  id: ID!
  internalID: ID!
  listPrice(decimal: String = ".", format: String = "%s%v", precision: Int = 0, symbol: String, thousand: String = ","): String
  listPriceCents: Int!
  order: CommerceOrder!
  priceCents: Int! @deprecated(reason: "switch to use listPriceCents")
  quantity: Int!
  selectedShippingQuote: CommerceShippingQuote
  shipment: CommerceShipment
  shippingQuoteOptions(after: String, before: String, first: Int, last: Int): CommerceShippingQuoteConnection
  shippingTotal(decimal: String = ".", format: String = "%s%v", precision: Int = 0, symbol: String, thousand: String = ","): String
  shippingTotalCents: Int
  updatedAt(format: String, timezone: String): String!
}

type CommerceLineItemConnection {
  edges: [CommerceLineItemEdge]
  nodes: [CommerceLineItem]
  pageInfo: CommercePageInfo!
}

type CommerceLineItemEdge {
  cursor: String!
  node: CommerceLineItem
}

type CommerceOffer {
  amount(decimal: String = ".", format: String = "%s%v", precision: Int = 0, symbol: String, thousand: String = ","): String
  amountCents: Int!
  buyerTotal(decimal: String = ".", format: String = "%s%v", precision: Int = 0, symbol: String, thousand: String = ","): String
  buyerTotalCents: Int
  createdAt(format: String, timezone: String): String!
  creatorId: String!
  currencyCode: String!
  definesTotal: Boolean!
  from: CommerceOrderPartyUnion!
  fromDetails: OrderParty
  fromParticipant: CommerceOrderParticipantEnum
  hasDefiniteTotal: Boolean!
  id: ID!
  internalID: ID!
  note: String
  offerAmountChanged: Boolean!
  order: CommerceOrder!
  respondsTo: CommerceOffer
  shippingTotal(decimal: String = ".", format: String = "%s%v", precision: Int = 0, symbol: String, thousand: String = ","): String
  shippingTotalCents: Int
  submittedAt(format: String, timezone: String): String
  taxTotal(decimal: String = ".", format: String = "%s%v", precision: Int = 0, symbol: String, thousand: String = ","): String
  taxTotalCents: Int
}

type CommerceOfferConnection {
  edges: [CommerceOfferEdge]
  nodes: [CommerceOffer]
  pageInfo: CommercePageInfo!
}

type CommerceOfferEdge {
  cursor: String!
  node: CommerceOffer
}

type CommerceOfferOrder implements CommerceOrder {
  artsyCollectsTaxes: Boolean
  artsyRemitsTaxes: Boolean
  artsyTotal(decimal: String = ".", format: String = "%s%v", precision: Int = 0, symbol: String, thousand: String = ","): String
  artsyTotalCents: Int
  artworkDetails: String
  availablePaymentMethods: [CommercePaymentMethodEnum!]!
  awaitingResponseFrom: CommerceOrderParticipantEnum
  bankAccountId: String
  buyer: CommerceOrderPartyUnion!
  buyerAction: CommerceBuyerOfferActionEnum
  buyerDetails: OrderParty
  buyerPhoneNumber: String
  buyerPhoneNumberCountryCode: String
  buyerProfile: CollectorProfileType
  buyerTotal(decimal: String = ".", format: String = "%s%v", precision: Int = 0, symbol: String, thousand: String = ","): String
  buyerTotalCents: Int
  code: String!
  commissionFee(decimal: String = ".", format: String = "%s%v", precision: Int = 0, symbol: String, thousand: String = ","): String
  commissionFeeCents: Int
  commissionRate: Float
  conditionsOfSale: String
  conversation: Conversation
  createdAt(format: String, timezone: String): String!
  creditCard: CreditCard
  creditCardId: String
  creditCardWalletType: String
  currencyCode: String!
  displayCommissionRate: String
  displayState: CommerceOrderDisplayStateEnum!
  id: ID!
  impulseConversationId: String
  internalID: ID!
  isInquiryOrder: Boolean!
  itemsTotal(decimal: String = ".", format: String = "%s%v", precision: Int = 0, symbol: String, thousand: String = ","): String
  itemsTotalCents: Int
  lastApprovedAt(format: String, timezone: String): String
  lastOffer: CommerceOffer
  lastSubmittedAt(format: String, timezone: String): String
  lastTransactionFailed: Boolean
  lastTransactionFailureCode: String
  lineItems(after: String, before: String, first: Int, last: Int): CommerceLineItemConnection
  mode: CommerceOrderModeEnum
  myLastOffer: CommerceOffer
  offerTotal(decimal: String = ".", format: String = "%s%v", precision: Int = 0, symbol: String, thousand: String = ","): String
  offers(after: String, before: String, first: Int, fromId: String, fromType: String, last: Int): CommerceOfferConnection
  orderHistory: [CommerceOrderEventUnion!]!
  orderUpdateState: String
  paymentMethod: CommercePaymentMethodEnum
  paymentMethodDetails: PaymentMethodUnion
  paymentSet: Boolean!
  requestedFulfillment: CommerceRequestedFulfillmentUnion
  requireIdentityVerification: Boolean!
  seller: CommerceOrderPartyUnion!
  sellerDetails: OrderParty
  sellerTotal(decimal: String = ".", format: String = "%s%v", precision: Int = 0, symbol: String, thousand: String = ","): String
  sellerTotalCents: Int
  shippingRadius: String
  shippingTotal(decimal: String = ".", format: String = "%s%v", precision: Int = 0, symbol: String, thousand: String = ","): String
  shippingTotalCents: Int
  source: CommerceOrderSourceEnum!
  state: CommerceOrderStateEnum!
  stateExpiresAt(format: String, timezone: String): String
  stateReason: String
  stateUpdatedAt(format: String, timezone: String): String
  stripeConfirmationToken: String
  taxTotal(decimal: String = ".", format: String = "%s%v", precision: Int = 0, symbol: String, thousand: String = ","): String
  taxTotalCents: Int
  taxTypes: [CommerceTaxTypeEnum!]!
  totalListPrice(decimal: String = ".", format: String = "%s%v", precision: Int = 0, symbol: String, thousand: String = ","): String
  totalListPriceCents: Int!
  transactionFee(decimal: String = ".", format: String = "%s%v", precision: Int = 0, symbol: String, thousand: String = ","): String
  transactionFeeCents: Int
  updatedAt(format: String, timezone: String): String!
}

type CommerceOfferSubmittedEvent implements CommerceEventInterface {
  createdAt(format: String, timezone: String): String!
  offer: CommerceOffer!
}

type CommerceOptInFailure {
  mutationError: GravityMutationError
}

input CommerceOptInMutationInput {
  artsyShippingDomestic: Boolean
  certificateOfAuthenticity: Boolean
  clientMutationId: String
  coaByAuthenticatingBody: Boolean
  coaByGallery: Boolean
  exactPrice: Boolean
  framed: Boolean
  id: String!
  locationId: String
  notSigned: Boolean
  pickupAvailable: Boolean
  signedByArtist: Boolean
  signedInPlate: Boolean
  signedOther: Boolean
  source: BulkUpdateSourceEnum
  stampedByArtistEstate: Boolean
  stickerLabel: Boolean
}

type CommerceOptInMutationPayload {
  clientMutationId: String
  commerceOptInMutationOrError: CommerceOptInMutationType
}

union CommerceOptInMutationType = CommerceOptInFailure | CommerceOptInSuccess

type CommerceOptInReportFailure {
  mutationError: GravityMutationError
}

input CommerceOptInReportMutationInput {
  artsyShippingDomestic: Boolean
  certificateOfAuthenticity: Boolean
  clientMutationId: String
  coaByAuthenticatingBody: Boolean
  coaByGallery: Boolean
  eligible: Boolean
  exactPrice: Boolean
  framed: Boolean
  id: String!
  locationId: String
  notSigned: Boolean
  pickupAvailable: Boolean
  signedByArtist: Boolean
  signedInPlate: Boolean
  signedOther: Boolean
  stampedByArtistEstate: Boolean
  stickerLabel: Boolean
}

type CommerceOptInReportMutationPayload {
  clientMutationId: String
  commerceOptInReportMutationOrError: CommerceOptInReportMutationType
}

union CommerceOptInReportMutationType = CommerceOptInReportFailure | CommerceOptInReportSuccess

type CommerceOptInReportResponse {
  message: String
}

type CommerceOptInReportSuccess {
  createdCommerceOptInReport: CommerceOptInReportResponse
}

type CommerceOptInResponse {
  count: Int
  ids: [String]
}

type CommerceOptInSuccess {
  updatedCommerceOptIn: CommerceOptInResponse
}

interface CommerceOrder {
  artsyCollectsTaxes: Boolean
  artsyRemitsTaxes: Boolean
  artsyTotal(decimal: String = ".", format: String = "%s%v", precision: Int = 0, symbol: String, thousand: String = ","): String
  artsyTotalCents: Int
  artworkDetails: String
  availablePaymentMethods: [CommercePaymentMethodEnum!]!
  bankAccountId: String
  buyer: CommerceOrderPartyUnion!
  buyerDetails: OrderParty
  buyerPhoneNumber: String
  buyerPhoneNumberCountryCode: String
  buyerProfile: CollectorProfileType
  buyerTotal(decimal: String = ".", format: String = "%s%v", precision: Int = 0, symbol: String, thousand: String = ","): String
  buyerTotalCents: Int
  code: String!
  commissionFee(decimal: String = ".", format: String = "%s%v", precision: Int = 0, symbol: String, thousand: String = ","): String
  commissionFeeCents: Int
  commissionRate: Float
  conditionsOfSale: String
  createdAt(format: String, timezone: String): String!
  creditCard: CreditCard
  creditCardId: String
  creditCardWalletType: String
  currencyCode: String!
  displayCommissionRate: String
  displayState: CommerceOrderDisplayStateEnum!
  id: ID!
  impulseConversationId: String
  internalID: ID!
  itemsTotal(decimal: String = ".", format: String = "%s%v", precision: Int = 0, symbol: String, thousand: String = ","): String
  itemsTotalCents: Int
  lastApprovedAt(format: String, timezone: String): String
  lastSubmittedAt(format: String, timezone: String): String
  lastTransactionFailed: Boolean
  lastTransactionFailureCode: String
  lineItems(after: String, before: String, first: Int, last: Int): CommerceLineItemConnection
  mode: CommerceOrderModeEnum
  orderHistory: [CommerceOrderEventUnion!]!
  orderUpdateState: String
  paymentMethod: CommercePaymentMethodEnum
  paymentMethodDetails: PaymentMethodUnion
  paymentSet: Boolean!
  requestedFulfillment: CommerceRequestedFulfillmentUnion
  requireIdentityVerification: Boolean!
  seller: CommerceOrderPartyUnion!
  sellerDetails: OrderParty
  sellerTotal(decimal: String = ".", format: String = "%s%v", precision: Int = 0, symbol: String, thousand: String = ","): String
  sellerTotalCents: Int
  shippingRadius: String
  shippingTotal(decimal: String = ".", format: String = "%s%v", precision: Int = 0, symbol: String, thousand: String = ","): String
  shippingTotalCents: Int
  source: CommerceOrderSourceEnum!
  state: CommerceOrderStateEnum!
  stateExpiresAt(format: String, timezone: String): String
  stateReason: String
  stateUpdatedAt(format: String, timezone: String): String
  stripeConfirmationToken: String
  taxTotal(decimal: String = ".", format: String = "%s%v", precision: Int = 0, symbol: String, thousand: String = ","): String
  taxTotalCents: Int
  taxTypes: [CommerceTaxTypeEnum!]!
  totalListPrice(decimal: String = ".", format: String = "%s%v", precision: Int = 0, symbol: String, thousand: String = ","): String
  totalListPriceCents: Int!
  transactionFee(decimal: String = ".", format: String = "%s%v", precision: Int = 0, symbol: String, thousand: String = ","): String
  transactionFeeCents: Int
  updatedAt(format: String, timezone: String): String!
}

type CommerceOrderActionData {
  clientSecret: String!
}

enum CommerceOrderConnectionFilterEnum {
  PAYMENT_FAILED
}

enum CommerceOrderConnectionSortEnum {
  STATE_EXPIRES_AT_ASC
  STATE_EXPIRES_AT_DESC
  STATE_UPDATED_AT_ASC
  STATE_UPDATED_AT_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}

type CommerceOrderConnectionWithTotalCount {
  edges: [CommerceOrderEdge]
  nodes: [CommerceOrder]
  pageCursors: CommercePageCursors
  pageInfo: CommercePageInfo!
  totalCount: Int
  totalPages: Int
}

enum CommerceOrderDisplayStateEnum {
  ABANDONED
  APPROVED
  CANCELED
  FULFILLED
  IN_TRANSIT
  PAYMENT_FAILED
  PENDING
  PROCESSING
  PROCESSING_APPROVAL
  REFUNDED
  SUBMITTED
}

type CommerceOrderEdge {
  cursor: String!
  node: CommerceOrder
}

union CommerceOrderEventUnion = CommerceOfferSubmittedEvent | CommerceOrderStateChangedEvent

enum CommerceOrderFulfillmentTypeEnum {
  PICKUP
  SHIP
  SHIP_ARTA
}

enum CommerceOrderModeEnum {
  BUY
  OFFER
}

union CommerceOrderOrFailureUnion = CommerceOrderRequiresAction | CommerceOrderWithMutationFailure | CommerceOrderWithMutationSuccess

enum CommerceOrderParticipantEnum {
  BUYER
  SELLER
}

union CommerceOrderPartyUnion = CommercePartner | CommerceUser

type CommerceOrderRequiresAction {
  actionData: CommerceOrderActionData!
}

enum CommerceOrderSourceEnum {
  artwork_page
  inquiry
  partner_offer
  private_sale
}

type CommerceOrderStateChangedEvent implements CommerceEventInterface {
  createdAt(format: String, timezone: String): String!
  orderUpdateState: String
  state: CommerceOrderStateEnum!
  stateReason: String
}

enum CommerceOrderStateEnum {
  ABANDONED
  APPROVED
  CANCELED
  FULFILLED
  IN_REVIEW
  PENDING
  PROCESSING_APPROVAL
  REFUNDED
  SUBMITTED
}

type CommerceOrderWithMutationFailure {
  error: CommerceApplicationError!
}

type CommerceOrderWithMutationSuccess {
  order: CommerceOrder!
}

type CommercePageCursor {
  cursor: String!
  isCurrent: Boolean!
  page: Int!
}

type CommercePageCursors {
  around: [CommercePageCursor!]!
  first: CommercePageCursor
  last: CommercePageCursor
  previous: CommercePageCursor
}

type CommercePageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type CommercePartner {
  id: String!
  type: String!
}

enum CommercePaymentMethodEnum {
  CREDIT_CARD
  SEPA_DEBIT
  US_BANK_ACCOUNT
  WIRE_TRANSFER
}

type CommercePickup {
  fulfillmentType: String!
  phoneNumber: String
}

union CommerceRequestedFulfillmentUnion = CommercePickup | CommerceShip | CommerceShipArta

input CommerceSelectShippingOptionInput {
  clientMutationId: String
  id: ID!
  selectedShippingQuoteId: ID!
}

type CommerceSelectShippingOptionPayload {
  clientMutationId: String
  orderOrError: CommerceOrderOrFailureUnion!
}

input CommerceSellerAcceptOfferInput {
  clientMutationId: String
  offerId: ID!
  shippingContact: CommerceShippingContactAttributes
}

type CommerceSellerAcceptOfferPayload {
  clientMutationId: String
  orderOrError: CommerceOrderOrFailureUnion!
}

input CommerceSellerAcceptProvisionalOfferInput {
  clientMutationId: String
  offerId: ID!
  shippingTotalCents: Int
}

type CommerceSellerAcceptProvisionalOfferPayload {
  clientMutationId: String
  orderOrError: CommerceOrderOrFailureUnion!
}

input CommerceSellerCounterOfferInput {
  amountCents: Int!
  clientMutationId: String
  note: String
  offerId: ID!
  shippingContact: CommerceShippingContactAttributes
  shippingTotalCents: Int
}

type CommerceSellerCounterOfferPayload {
  clientMutationId: String
  orderOrError: CommerceOrderOrFailureUnion!
}

input CommerceSellerRejectOfferInput {
  clientMutationId: String
  offerId: ID!
  rejectReason: CommerceCancelReasonTypeEnum
}

type CommerceSellerRejectOfferPayload {
  clientMutationId: String
  orderOrError: CommerceOrderOrFailureUnion!
}

input CommerceSetPaymentByStripeIntentInput {
  clientMutationId: String
  id: ID!
  oneTimeUse: Boolean = false
  setupIntentId: String!
}

type CommerceSetPaymentByStripeIntentPayload {
  clientMutationId: String
  orderOrError: CommerceOrderOrFailureUnion!
}

input CommerceSetPaymentInput {
  clientMutationId: String
  id: ID!
  paymentMethod: CommercePaymentMethodEnum!
  paymentMethodId: String
}

type CommerceSetPaymentPayload {
  clientMutationId: String
  orderOrError: CommerceOrderOrFailureUnion!
}

input CommerceSetShippingInput {
  addressVerifiedBy: CommerceShippingAddressVerifiedByEnum
  clientMutationId: String
  fulfillmentType: CommerceOrderFulfillmentTypeEnum!
  id: ID!
  phoneNumber: String
  phoneNumberCountryCode: String
  shipping: CommerceShippingAttributes
}

type CommerceSetShippingPayload {
  clientMutationId: String
  orderOrError: CommerceOrderOrFailureUnion!
}

type CommerceShip {
  addressLine1: String
  addressLine2: String
  city: String
  country: String
  name: String
  phoneNumber: String
  postalCode: String
  region: String
}

type CommerceShipArta {
  addressLine1: String
  addressLine2: String
  city: String
  country: String
  name: String
  phoneNumber: String
  postalCode: String
  region: String
}

type CommerceShipment {
  bookedAt: String
  carrierName: String
  contactEmail: String
  contactName: String
  contactPhone: String
  createdAt(format: String, timezone: String): String!
  deliveryEnd(format: String, timezone: String): String
  deliveryStart(format: String, timezone: String): String
  deliveryWindowModifier: String
  eeiFormStatus: CommerceEeiFormStatusEnum
  estimatedDeliveryWindow: String
  estimatedPickupWindow: String
  id: ID!
  labelUrl: String
  pickupEnd(format: String, timezone: String): String
  pickupStart(format: String, timezone: String): String
  pickupWindowModifier: String
  priceCents: Int!
  priceCurrency: String!
  status: String
  trackingNumber: String
  trackingUrl: String
  updatedAt(format: String, timezone: String): String!
}

enum CommerceShippingAddressVerifiedByEnum {
  ARTSY
  USER
}

input CommerceShippingAttributes {
  addressLine1: String
  addressLine2: String
  city: String
  country: String
  name: String
  phoneNumber: String
  postalCode: String
  region: String
}

input CommerceShippingContactAttributes {
  email: String!
  name: String!
  phone: String!
}

type CommerceShippingQuote {
  createdAt(format: String, timezone: String): String!
  currencyCode: String!
  displayName: String!
  id: ID!
  isSelected: Boolean!
  name: String
  price(decimal: String = ".", format: String = "%s%v", precision: Int = 0, symbol: String, thousand: String = ","): String
  priceCents: Int!
  priceCurrency: String!
  tier: String!
  typeName: String!
  updatedAt(format: String, timezone: String): String!
}

type CommerceShippingQuoteConnection {
  edges: [CommerceShippingQuoteEdge]
  nodes: [CommerceShippingQuote]
  pageInfo: CommercePageInfo!
}

type CommerceShippingQuoteEdge {
  cursor: String!
  node: CommerceShippingQuote
}

input CommerceSubmitOrderInput {
  clientMutationId: String
  id: ID!
}

type CommerceSubmitOrderPayload {
  clientMutationId: String
  orderOrError: CommerceOrderOrFailureUnion!
}

input CommerceSubmitOrderWithOfferInput {
  clientMutationId: String
  confirmedSetupIntentId: String
  offerId: ID!
}

type CommerceSubmitOrderWithOfferPayload {
  clientMutationId: String
  orderOrError: CommerceOrderOrFailureUnion!
}

input CommerceSubmitPendingOfferInput {
  clientMutationId: String
  offerId: ID!
}

type CommerceSubmitPendingOfferPayload {
  clientMutationId: String
  orderOrError: CommerceOrderOrFailureUnion!
}

enum CommerceTaxTypeEnum {
  SALES_TAX
  VAT
}

input CommerceUpdateImpulseConversationIdInput {
  clientMutationId: String
  impulseConversationId: String!
  orderId: ID!
}

type CommerceUpdateImpulseConversationIdPayload {
  clientMutationId: String
  orderOrError: CommerceOrderOrFailureUnion!
}

type CommerceUser {
  id: String!
}

type ConditionReportRequest {
  internalID: ID!
  saleArtworkID: ID
  userID: ID
}

input ConfirmPasswordInput {
  clientMutationId: String
  password: String!
}

type ConfirmPasswordPayload {
  clientMutationId: String
  valid: Boolean!
}

type ConfirmationToken {
  paymentMethodPreview: PaymentMethodPreview!
}

type Consignment {
  currency: String
  id: ID!
  internalID: ID
  saleDate: String
  saleName: String
  salePriceCents: Int
  state: ConsignmentState
  submission: ConsignmentSubmission!
  submissionID: ID
  submissionId: ID!
}

enum ConsignmentAttributionClass {
  LIMITED_EDITION
  OPEN_EDITION
  UNIQUE
  UNKNOWN_EDITION
}

type ConsignmentConnection {
  edges: [ConsignmentEdge]
  nodes: [Consignment]
  pageCursors: ConsignmentPageCursors
  pageInfo: PageInfo!
  totalCount: Int
  totalPages: Int
}

type ConsignmentEdge {
  cursor: String!
  node: Consignment
}

type ConsignmentInquiry {
  email: String!
  internalID: Int!
  message: String!
  name: String!
  phoneNumber: String
  recipientEmail: String
  userId: String
}

type ConsignmentInquiryMutationError {
  error: String
  message: String!
  statusCode: Int
  type: String
}

type ConsignmentInquiryMutationFailure {
  mutationError: ConsignmentInquiryMutationError
}

type ConsignmentInquiryMutationSuccess {
  consignmentInquiry: ConsignmentInquiry
}

type ConsignmentOffer {
  commissionPercentWhole: Int
  createdAt: ISO8601DateTime
  createdById: ID
  currency: String
  deadlineToConsign: String
  highEstimateAmount(decimal: String = ".", format: String = "%s%v", precision: Int = 0, symbol: String, thousand: String = ","): String
  highEstimateCents: Int
  id: ID!
  insuranceInfo: String
  lowEstimateAmount(decimal: String = ".", format: String = "%s%v", precision: Int = 0, symbol: String, thousand: String = ","): String
  lowEstimateCents: Int
  notes: String
  offerType: String
  otherFeesInfo: String
  partnerInfo: String
  photographyInfo: String
  saleDate: String
  saleLocation: String
  saleName: String
  shippingInfo: String
  startingBidCents: Int
  state: String
  submission: ConsignmentSubmission!
}

type ConsignmentOfferConnection {
  edges: [ConsignmentOfferEdge]
  nodes: [ConsignmentOffer]
  pageCursors: ConsignmentPageCursors
  pageInfo: PageInfo!
  totalCount: Int
  totalPages: Int
}

type ConsignmentOfferEdge {
  cursor: String!
  node: ConsignmentOffer
}

enum ConsignmentOfferSort {
  COMMISSION_PERCENT_ASC
  COMMISSION_PERCENT_DESC
  CONSIGNED_AT_ASC
  CONSIGNED_AT_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  CREATED_BY_ID_ASC
  CREATED_BY_ID_DESC
  CURRENCY_ASC
  CURRENCY_DESC
  DEADLINE_TO_CONSIGN_ASC
  DEADLINE_TO_CONSIGN_DESC
  HIGH_ESTIMATE_CENTS_ASC
  HIGH_ESTIMATE_CENTS_DESC
  ID_ASC
  ID_DESC
  INSURANCE_INFO_ASC
  INSURANCE_INFO_DESC
  LOW_ESTIMATE_CENTS_ASC
  LOW_ESTIMATE_CENTS_DESC
  NOTES_ASC
  NOTES_DESC
  OFFER_RESPONSES_COUNT_ASC
  OFFER_RESPONSES_COUNT_DESC
  OFFER_TYPE_ASC
  OFFER_TYPE_DESC
  OTHER_FEES_INFO_ASC
  OTHER_FEES_INFO_DESC
  OVERRIDE_EMAIL_ASC
  OVERRIDE_EMAIL_DESC
  PARTNER_INFO_ASC
  PARTNER_INFO_DESC
  PARTNER_SUBMISSION_ID_ASC
  PARTNER_SUBMISSION_ID_DESC
  PHOTOGRAPHY_INFO_ASC
  PHOTOGRAPHY_INFO_DESC
  PRICE_CENTS_ASC
  PRICE_CENTS_DESC
  REFERENCE_ID_ASC
  REFERENCE_ID_DESC
  REJECTED_AT_ASC
  REJECTED_AT_DESC
  REJECTED_BY_ASC
  REJECTED_BY_DESC
  REJECTION_NOTE_ASC
  REJECTION_NOTE_DESC
  REJECTION_REASON_ASC
  REJECTION_REASON_DESC
  REVIEW_STARTED_AT_ASC
  REVIEW_STARTED_AT_DESC
  SALE_DATE_ASC
  SALE_DATE_DESC
  SALE_LOCATION_ASC
  SALE_LOCATION_DESC
  SALE_NAME_ASC
  SALE_NAME_DESC
  SALE_PERIOD_END_ASC
  SALE_PERIOD_END_DESC
  SALE_PERIOD_START_ASC
  SALE_PERIOD_START_DESC
  SENT_AT_ASC
  SENT_AT_DESC
  SENT_BY_ASC
  SENT_BY_DESC
  SHIPPING_INFO_ASC
  SHIPPING_INFO_DESC
  STARTING_BID_CENTS_ASC
  STARTING_BID_CENTS_DESC
  STATE_ASC
  STATE_DESC
  SUBMISSION_ID_ASC
  SUBMISSION_ID_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}

type ConsignmentPageCursor {
  cursor: String!
  isCurrent: Boolean!
  page: Int!
}

type ConsignmentPageCursors {
  around: [ConsignmentPageCursor!]!
  first: ConsignmentPageCursor
  last: ConsignmentPageCursor
  previous: ConsignmentPageCursor
}

enum ConsignmentSort {
  ACCEPTED_OFFER_ID_ASC
  ACCEPTED_OFFER_ID_DESC
  ARTSY_COMMISSION_PERCENT_ASC
  ARTSY_COMMISSION_PERCENT_DESC
  CANCELED_REASON_ASC
  CANCELED_REASON_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  CURRENCY_ASC
  CURRENCY_DESC
  ID_ASC
  ID_DESC
  INVOICE_NUMBER_ASC
  INVOICE_NUMBER_DESC
  NOTES_ASC
  NOTES_DESC
  NOTIFIED_AT_ASC
  NOTIFIED_AT_DESC
  PARTNER_COMMISSION_PERCENT_ASC
  PARTNER_COMMISSION_PERCENT_DESC
  PARTNER_ID_ASC
  PARTNER_ID_DESC
  PARTNER_INVOICED_AT_ASC
  PARTNER_INVOICED_AT_DESC
  PARTNER_PAID_AT_ASC
  PARTNER_PAID_AT_DESC
  REFERENCE_ID_ASC
  REFERENCE_ID_DESC
  SALE_DATE_ASC
  SALE_DATE_DESC
  SALE_LOCATION_ASC
  SALE_LOCATION_DESC
  SALE_LOT_NUMBER_ASC
  SALE_LOT_NUMBER_DESC
  SALE_NAME_ASC
  SALE_NAME_DESC
  SALE_PRICE_CENTS_ASC
  SALE_PRICE_CENTS_DESC
  STATE_ASC
  STATE_DESC
  SUBMISSION_ID_ASC
  SUBMISSION_ID_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}

enum ConsignmentState {
  BOUGHT_IN
  CANCELLED
  OPEN
  SOLD
}

type ConsignmentSubmission {
  additionalInfo: String
  artist: Artist
  artistId: String!
  assets(assetType: [AssetType!] = []): [ConsignmentSubmissionCategoryAsset]
  attributionClass: ConsignmentAttributionClass
  authenticityCertificate: Boolean
  category: String
  createdAt: ISO8601DateTime
  currency: String
  depth: String
  dimensionsMetric: String
  edition: String
  editionNumber: String
  editionSize: String
  externalId: ID!
  height: String
  id: ID!
  internalID: ID
  locationAddress: String
  locationAddress2: String
  locationCity: String
  locationCountry: String
  locationCountryCode: String
  locationPostalCode: String
  locationState: String
  medium: String
  minimumPriceDollars: Int
  myCollectionArtwork: Artwork
  myCollectionArtworkID: String
  offers(gravityPartnerId: ID!): [ConsignmentOffer!]!
  primaryImage: ConsignmentSubmissionCategoryAsset
  provenance: String
  publishedAt: ISO8601DateTime
  rejectionReason: String
  saleState: String
  signature: Boolean
  source: ConsignmentSubmissionSource
  sourceArtworkID: String
  state: ConsignmentSubmissionStateAggregation
  title: String
  userAgent: String
  userEmail: String
  userId: String!
  userName: String
  userPhone: String
  userPhoneNumber: PhoneNumberType
  utmMedium: String
  utmSource: String
  utmTerm: String
  width: String
  year: String
}

enum ConsignmentSubmissionCategoryAggregation {
  ARCHITECTURE
  DESIGN_DECORATIVE_ART
  DRAWING_COLLAGE_OR_OTHER_WORK_ON_PAPER
  FASHION_DESIGN_AND_WEARABLE_ART
  INSTALLATION
  JEWELRY
  MIXED_MEDIA
  OTHER
  PAINTING
  PERFORMANCE_ART
  PHOTOGRAPHY
  PRINT
  SCULPTURE
  TEXTILE_ARTS
  VIDEO_FILM_ANIMATION
}

type ConsignmentSubmissionCategoryAsset {
  assetType: String!
  documentPath: String
  filename: String
  geminiToken: String
  id: ID!
  imageUrls: JSON
  s3Bucket: String
  s3Path: String
  size: String
  submissionID: ID
  submissionId: ID!
}

type ConsignmentSubmissionConnection {
  edges: [SubmissionEdge]
  nodes: [ConsignmentSubmission]
  pageCursors: ConsignmentPageCursors
  pageInfo: PageInfo!
  totalCount: Int
  totalPages: Int
}

enum ConsignmentSubmissionSort {
  ADDITIONAL_INFO_ASC
  ADDITIONAL_INFO_DESC
  ADMIN_ID_ASC
  ADMIN_ID_DESC
  ADMIN_RECEIPT_SENT_AT_ASC
  ADMIN_RECEIPT_SENT_AT_DESC
  APPROVED_AT_ASC
  APPROVED_AT_DESC
  APPROVED_BY_ASC
  APPROVED_BY_DESC
  ARTIST_ID_ASC
  ARTIST_ID_DESC
  ARTIST_PROOFS_ASC
  ARTIST_PROOFS_DESC
  ARTIST_SCORE_ASC
  ARTIST_SCORE_DESC
  ASSIGNED_TO_ASC
  ASSIGNED_TO_DESC
  ATTRIBUTION_CLASS_ASC
  ATTRIBUTION_CLASS_DESC
  AUCTION_SCORE_ASC
  AUCTION_SCORE_DESC
  AUTHENTICITY_CERTIFICATE_ASC
  AUTHENTICITY_CERTIFICATE_DESC
  CATALOGUER_ASC
  CATALOGUER_DESC
  CATEGORY_ASC
  CATEGORY_DESC
  COA_BY_AUTHENTICATING_BODY_ASC
  COA_BY_AUTHENTICATING_BODY_DESC
  COA_BY_GALLERY_ASC
  COA_BY_GALLERY_DESC
  CONDITION_REPORT_ASC
  CONDITION_REPORT_DESC
  CONSIGNED_PARTNER_SUBMISSION_ID_ASC
  CONSIGNED_PARTNER_SUBMISSION_ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  CURRENCY_ASC
  CURRENCY_DESC
  DEADLINE_TO_SELL_ASC
  DEADLINE_TO_SELL_DESC
  DELETED_AT_ASC
  DELETED_AT_DESC
  DEPTH_ASC
  DEPTH_DESC
  DIMENSIONS_METRIC_ASC
  DIMENSIONS_METRIC_DESC
  EDITION_ASC
  EDITION_DESC
  EDITION_NUMBER_ASC
  EDITION_NUMBER_DESC
  EDITION_SIZE_ASC
  EDITION_SIZE_DESC
  EXHIBITION_ASC
  EXHIBITION_DESC
  EXT_USER_ID_ASC
  EXT_USER_ID_DESC
  HEIGHT_ASC
  HEIGHT_DESC
  ID_ASC
  ID_DESC
  LITERATURE_ASC
  LITERATURE_DESC
  LOCATION_ADDRESS2_ASC
  LOCATION_ADDRESS2_DESC
  LOCATION_ADDRESS_ASC
  LOCATION_ADDRESS_DESC
  LOCATION_CITY_ASC
  LOCATION_CITY_DESC
  LOCATION_COUNTRY_ASC
  LOCATION_COUNTRY_CODE_ASC
  LOCATION_COUNTRY_CODE_DESC
  LOCATION_COUNTRY_DESC
  LOCATION_POSTAL_CODE_ASC
  LOCATION_POSTAL_CODE_DESC
  LOCATION_STATE_ASC
  LOCATION_STATE_DESC
  MEDIUM_ASC
  MEDIUM_DESC
  MINIMUM_PRICE_CENTS_ASC
  MINIMUM_PRICE_CENTS_DESC
  MY_COLLECTION_ARTWORK_ID_ASC
  MY_COLLECTION_ARTWORK_ID_DESC
  OFFERS_COUNT_ASC
  OFFERS_COUNT_DESC
  PRIMARY_IMAGE_ID_ASC
  PRIMARY_IMAGE_ID_DESC
  PROVENANCE_ASC
  PROVENANCE_DESC
  PUBLISHED_AT_ASC
  PUBLISHED_AT_DESC
  PUBLISHER_ASC
  PUBLISHER_DESC
  QUALIFIED_ASC
  QUALIFIED_DESC
  RECEIPT_SENT_AT_ASC
  RECEIPT_SENT_AT_DESC
  REJECTED_AT_ASC
  REJECTED_AT_DESC
  REJECTED_BY_ASC
  REJECTED_BY_DESC
  REJECTION_REASON_ASC
  REJECTION_REASON_DESC
  REMINDERS_SENT_COUNT_ASC
  REMINDERS_SENT_COUNT_DESC
  SESSION_ID_ASC
  SESSION_ID_DESC
  SIGNATURE_ASC
  SIGNATURE_DESC
  SIGNATURE_DETAIL_ASC
  SIGNATURE_DETAIL_DESC
  SOURCE_ARTWORK_ID_ASC
  SOURCE_ARTWORK_ID_DESC
  SOURCE_ASC
  SOURCE_DESC
  STATE_ASC
  STATE_DESC
  TITLE_ASC
  TITLE_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  USER_AGENT_ASC
  USER_AGENT_DESC
  USER_EMAIL_ASC
  USER_EMAIL_DESC
  USER_ID_ASC
  USER_ID_DESC
  USER_NAME_ASC
  USER_NAME_DESC
  USER_PHONE_ASC
  USER_PHONE_DESC
  UTM_MEDIUM_ASC
  UTM_MEDIUM_DESC
  UTM_SOURCE_ASC
  UTM_SOURCE_DESC
  UTM_TERM_ASC
  UTM_TERM_DESC
  UUID_ASC
  UUID_DESC
  WIDTH_ASC
  WIDTH_DESC
  YEAR_ASC
  YEAR_DESC
}

enum ConsignmentSubmissionSource {
  ADMIN
  APP_INBOUND
  MY_COLLECTION
  PARTNER
  WEB_INBOUND
}

enum ConsignmentSubmissionStateAggregation {
  APPROVED
  CLOSED
  DRAFT
  HOLD
  PUBLISHED
  REJECTED
  RESUBMITTED
  SUBMITTED
}

type Contact {
  canContact: Boolean
  email: String
  id: ID!
  internalID: ID!
  location: Location
  name: String
  phone: String
  position: String
  slug: ID!
}

type ContactConnection {
  edges: [ContactEdge]
  pageCursors: PageCursors!
  pageInfo: PageInfo!
  totalCount: Int
}

type ContactEdge {
  cursor: String!
  node: Contact
}

type ConvectionService {
  geminiTemplateKey: String!
}

type Conversation implements Node {
  artworks: [Artwork]
  buyerOutcome: String
  buyerOutcomeAt(format: String, timezone: String): String
  collectorInterestsConnection(after: String, before: String, first: Int, last: Int): UserInterestConnection
  collectorResume: CollectorResume
  createdAt(format: String, timezone: String): String
  deletedAt(format: String, timezone: String): String
  dismissedAt(format: String, timezone: String): String
  from: ConversationInitiator!
  fromLastViewedMessageID: String
  fromProfile: CollectorProfileType @deprecated(reason: "Use `collectorResume` instead")
  fromUser: User @deprecated(reason: "Will be inaccessible to partners in future versions. Prefer fromProfile.")
  id: ID!
  initialMessage: String! @deprecated(reason: "This field is no longer required. Prefer the first message from the MessageConnection.")
  inquiryID: String
  inquiryRequest: PartnerInquiryRequest
  internalID: ID
  isLastMessageToUser: Boolean
  items: [ConversationItem]
  lastMessage: String
  lastMessageAt(format: String, timezone: String): String
  lastMessageID: String @deprecated(reason: "Prefer querying `messagesConnection(last:1) { edges { node { internalID } } }`")
  messages(after: String, before: String, first: Int, last: Int, sort: sort): MessageConnection @deprecated(reason: "Prefer messagesConnection")
  messagesAndConversationEventsConnection(after: String, before: String, first: Int, last: Int, page: Int, size: Int): MessageOrConversationEventTypeConnection
  messagesConnection(after: String, before: String, first: Int, last: Int, sort: sort): MessageConnection
  orderConnection(after: String, before: String, first: Int, last: Int, participantType: CommerceOrderParticipantEnum, sellerId: ID, state: CommerceOrderStateEnum, states: [CommerceOrderStateEnum!]): CommerceOrderConnectionWithTotalCount
  to: ConversationResponder!
  toLastViewedMessageID: String
  unread: Boolean @deprecated(reason: "Use `unreadByCollector` instead")
  unreadByCollector: Boolean
  unreadByPartner: Boolean
}

type ConversationConnection {
  edges: [ConversationEdge]
  pageInfo: PageInfo!
  totalCount: Int
  totalUnreadCount: Int
}

type ConversationEdge {
  cursor: String!
  node: Conversation
}

type ConversationEvent implements Node {
  buyerBody: String
  eventKey: String!
  id: ID!
  internalID: ID!
  sellerBody: String
}

type ConversationInitiator {
  email: String!
  id: ID!
  initials(length: Int = 3): String
  internalID: ID!
  name: String!
  type: String!
}

type ConversationItem {
  item: ConversationItemType
  liveArtwork: ConversationItemType
  permalink: String
  title: String
}

union ConversationItemType = Artwork | Show

input ConversationMessageAttachmentInput {
  id: String
  name: String!
  size: String
  type: String!
  url: String!
}

type ConversationResponder {
  id: ID!
  initials(length: Int = 3): String
  internalID: ID!
  name: String!
  replyToImpulseIDs: [String]!
  type: String!
}

enum ConversationsInputMode {
  PARTNER
  USER
}

type CreateAccountRequestMutationFailure {
  mutationError: GravityMutationError
}

input CreateAccountRequestMutationInput {
  action: String
  clientMutationId: String
  email: String
  name: String
  notes: String!
  userID: String
}

type CreateAccountRequestMutationPayload {
  accountRequestOrError: CreateAccountRequestMutationType
  clientMutationId: String
}

type CreateAccountRequestMutationSuccess {
  accountRequest: AccountRequest
}

union CreateAccountRequestMutationType = CreateAccountRequestMutationFailure | CreateAccountRequestMutationSuccess

type CreateAlertFailure {
  mutationError: GravityMutationError
}

union CreateAlertResponseOrError = CreateAlertFailure | CreateAlertSuccess

type CreateAlertSuccess {
  alert: Alert
  me: Me!
}

input CreateAndSendBackupSecondFactorInput {
  clientMutationId: String
  userID: ID!
}

type CreateAndSendBackupSecondFactorPayload {
  clientMutationId: String
  factor: BackupSecondFactor!
}

input CreateAppSecondFactorInput {
  attributes: AppSecondFactorAttributes!
  clientMutationId: String
  password: String!
}

type CreateAppSecondFactorPayload {
  clientMutationId: String
  secondFactorOrErrors: AppSecondFactorOrErrorsUnion!
}

type CreateArtistFailure {
  mutationError: GravityMutationError
}

input CreateArtistMutationInput {
  birthday: String
  clientMutationId: String
  deathday: String
  displayName: String!
  firstName: String
  isPersonalArtist: Boolean
  lastName: String
  middleName: String
  nationality: String
  partnerID: String
}

type CreateArtistMutationPayload {
  artistOrError: CreateArtistSuccessOrErrorType
  clientMutationId: String
}

type CreateArtistSuccess {
  artist: Artist
}

union CreateArtistSuccessOrErrorType = CreateArtistFailure | CreateArtistSuccess

type CreateArtworkFailure {
  mutationError: GravityMutationError
}

type CreateArtworkImportArtworksFailure {
  mutationError: GravityMutationError
}

input CreateArtworkImportArtworksInput {
  artworkImportID: String!
  clientMutationId: String
}

type CreateArtworkImportArtworksPayload {
  clientMutationId: String
  createArtworkImportArtworksOrError: CreateArtworkImportArtworksResponseOrError
}

union CreateArtworkImportArtworksResponseOrError = CreateArtworkImportArtworksFailure | CreateArtworkImportArtworksSuccess

type CreateArtworkImportArtworksSuccess {
  artworkImport: ArtworkImport
  artworkImportID: String!
  created: Int!
  errors: Int!
}

type CreateArtworkImportFailure {
  mutationError: GravityMutationError
}

input CreateArtworkImportInput {
  async: Boolean
  clientMutationId: String
  fileName: String
  parseWithAI: Boolean
  parseWithAIModel: String
  partnerID: String!
  s3Bucket: String!
  s3Key: String!
}

type CreateArtworkImportPayload {
  artworkImportOrError: CreateArtworkImportResponseOrError
  clientMutationId: String
}

union CreateArtworkImportResponseOrError = CreateArtworkImportFailure | CreateArtworkImportSuccess

type CreateArtworkImportSuccess {
  artworkImport: ArtworkImport
  queued: Boolean
}

input CreateArtworkMutationInput {
  artistIds: [String!]!
  clientMutationId: String
  imageS3Bucket: String
  imageS3Buckets: [String!]
  imageS3Key: String
  imageS3Keys: [String!]
  partnerId: String!
  partnerShowId: String
}

type CreateArtworkMutationPayload {
  artworkOrError: CreateArtworkResponseOrError
  clientMutationId: String
}

union CreateArtworkResponseOrError = CreateArtworkFailure | CreateArtworkSuccess

type CreateArtworkSuccess {
  artwork: Artwork
}

input CreateBackupSecondFactorsInput {
  clientMutationId: String
  password: String!
}

type CreateBackupSecondFactorsPayload {
  clientMutationId: String
  secondFactorsOrErrors: BackupSecondFactorsOrErrorsUnion!
}

input CreateBankDebitSetupInput {
  clientMutationId: String
  paymentMethodTypes: [String!]!
}

type CreateBankDebitSetupPayload {
  clientMutationId: String
  clientSecret: String!
}

input CreateBidderInput {
  clientMutationId: String
  saleID: String!
}

type CreateBidderPayload {
  bidder: Bidder
  clientMutationId: String
}

type CreateCanonicalArtistFailure {
  mutationError: GravityMutationError
}

input CreateCanonicalArtistMutationInput {
  birthday: String
  clientMutationId: String
  deathday: String
  displayName: String
  firstName: String
  lastName: String
  middleName: String
  nationality: String
  partnerID: String
}

type CreateCanonicalArtistMutationPayload {
  artistOrError: CreateCanonicalArtistSuccessOrErrorType
  clientMutationId: String
}

type CreateCanonicalArtistSuccess {
  artist: Artist
}

union CreateCanonicalArtistSuccessOrErrorType = CreateCanonicalArtistFailure | CreateCanonicalArtistSuccess

type CreateCareerHighlightFailure {
  mutationError: GravityMutationError
}

input CreateCareerHighlightInput {
  artistId: String!
  clientMutationId: String
  collected: Boolean
  group: Boolean
  partnerId: String!
  solo: Boolean
}

type CreateCareerHighlightPayload {
  careerHighlightOrError: CreateCareerHighlightSuccessResponseOrError
  clientMutationId: String
}

type CreateCareerHighlightSuccess {
  careerHighlight: CareerHighlight
}

union CreateCareerHighlightSuccessResponseOrError = CreateCareerHighlightFailure | CreateCareerHighlightSuccess

type CreateCollectionFailure {
  mutationError: GravityMutationError
}

union CreateCollectionResponseOrError = CreateCollectionFailure | CreateCollectionSuccess

type CreateCollectionSuccess {
  collection: Collection
}

input CreateConsignmentInquiryMutationInput {
  clientMutationId: String
  email: String!
  message: String!
  name: String!
  phoneNumber: String
  recipientEmail: String
  userId: String
}

type CreateConsignmentInquiryMutationPayload {
  clientMutationId: String
  consignmentInquiryOrError: CreateConsignmentInquiryMutationType
}

union CreateConsignmentInquiryMutationType = ConsignmentInquiryMutationFailure | ConsignmentInquiryMutationSuccess

type CreateFeatureFailure {
  mutationError: GravityMutationError
}

input CreateFeatureMutationInput {
  active: Boolean!
  callout: String
  clientMutationId: String
  description: String
  layout: FeatureLayouts
  metaTitle: String
  name: String!
  sourceBucket: String
  sourceKey: String
  subheadline: String
}

type CreateFeatureMutationPayload {
  clientMutationId: String
  featureOrError: createFeatureResponseOrError
}

type CreateFeatureSuccess {
  feature: Feature
}

type CreateFeaturedLinkFailure {
  mutationError: GravityMutationError
}

input CreateFeaturedLinkMutationInput {
  clientMutationId: String
  description: String
  href: String!
  sourceBucket: String
  sourceKey: String
  subtitle: String
  title: String!
}

type CreateFeaturedLinkMutationPayload {
  clientMutationId: String
  featuredLinkOrError: CreateFeaturedLinkResponseOrError
}

union CreateFeaturedLinkResponseOrError = CreateFeaturedLinkFailure | CreateFeaturedLinkSuccess

type CreateFeaturedLinkSuccess {
  featuredLink: FeaturedLink
}

input CreateGeminiEntryForAssetInput {
  clientMutationId: String
  metadata: JSON!
  sourceBucket: String!
  sourceKey: String!
  templateKey: String!
}

type CreateGeminiEntryForAssetPayload {
  asset: GeminiEntry
  clientMutationId: String
}

input CreateHeroUnitLinkInput {
  text: String!
  url: String!
}

input CreateHeroUnitMutationInput {
  body: String!
  clientMutationId: String
  credit: String
  endAt: String
  imageUrl: String
  label: String
  link: CreateHeroUnitLinkInput!
  position: Int
  startAt: String
  title: String!
}

type CreateHeroUnitMutationPayload {
  clientMutationId: String
  heroUnitOrError: createHeroUnitResponseOrError
}

input CreateIdentityVerificationOverrideMutationInput {
  clientMutationId: String
  identityVerificationID: String!
  reason: String!
  state: String!
}

type CreateIdentityVerificationOverrideMutationPayload {
  clientMutationId: String
  createIdentityVerificationOverrideResponseOrError: CreateIdentityVerificationOverrideResponseOrError
}

union CreateIdentityVerificationOverrideResponseOrError = IdentityVerificationOverrideMutationFailure | IdentityVerificationOverrideMutationSuccess

input CreateImageInput {
  clientMutationId: String
  src: String!
  templateKey: String!
}

type CreateImagePayload {
  clientMutationId: String
  image: ARImage!
}

type CreateInvoicePaymentFailure {
  mutationError: GravityMutationError
}

input CreateInvoicePaymentInput {
  amountMinor: Float!
  clientMutationId: String
  creditCardToken: String!
  invoiceID: String!
  invoiceToken: String!
  provider: String!
}

type CreateInvoicePaymentPayload {
  clientMutationId: String
  responseOrError: CreateInvoicePaymentResponseOrError
}

union CreateInvoicePaymentResponseOrError = CreateInvoicePaymentFailure | CreateInvoicePaymentSuccess

type CreateInvoicePaymentSuccess {
  invoicePayment: InvoicePayment
}

input CreateOfferMutationInput {
  clientMutationId: String
  commissionPercentWhole: Int!
  createdById: String
  currency: String
  deadlineToConsign: String
  gravityPartnerId: String!
  highEstimateDollars: Int
  insuranceInfo: String
  lowEstimateDollars: Int
  notes: String
  offerType: String
  otherFeesInfo: String
  partnerInfo: String
  photographyInfo: String
  saleDate: Date
  saleLocation: String
  saleName: String
  shippingInfo: String
  startingBidDollars: Int
  state: String
  submissionId: ID!
}

type CreateOfferMutationPayload {
  clientMutationId: String
  consignmentOffer: ConsignmentOffer
}

input CreateOfferResponseMutationInput {
  clientMutationId: String
  comments: String
  intendedState: IntendedState!
  offerId: ID!
  phoneNumber: String
  rejectionReason: String
}

type CreateOfferResponseMutationPayload {
  clientMutationId: String
  consignmentOfferResponse: OfferResponse
}

input CreateOrderedSetMutationInput {
  clientMutationId: String
  description: String
  internalName: String
  itemId: String
  itemIds: [String]
  itemType: String!
  key: String!
  layout: OrderedSetLayouts
  name: String
  ownerType: String
  published: Boolean
}

type CreateOrderedSetMutationPayload {
  clientMutationId: String
  orderedSetOrError: createOrderedSetResponseOrError
}

type CreatePageFailure {
  mutationError: GravityMutationError
}

input CreatePageMutationInput {
  clientMutationId: String
  content: String!
  name: String!
  published: Boolean!
}

type CreatePageMutationPayload {
  clientMutationId: String
  pageOrError: CreatePageResponseOrError
}

union CreatePageResponseOrError = CreatePageFailure | CreatePageSuccess

type CreatePageSuccess {
  page: Page
}

type CreatePartnerArtistDocumentFailure {
  mutationError: GravityMutationError
}

input CreatePartnerArtistDocumentMutationInput {
  artistId: String!
  clientMutationId: String
  partnerId: String!
  remoteDocumentUrl: String!
  title: String!
}

type CreatePartnerArtistDocumentMutationPayload {
  clientMutationId: String
  documentOrError: CreatePartnerArtistDocumentResponseOrError
}

union CreatePartnerArtistDocumentResponseOrError = CreatePartnerArtistDocumentFailure | CreatePartnerArtistDocumentSuccess

type CreatePartnerArtistDocumentSuccess {
  document: PartnerDocument
  partner: Partner
}

type CreatePartnerContactFailure {
  mutationError: GravityMutationError
}

input CreatePartnerContactInput {
  canContact: Boolean
  clientMutationId: String
  email: String
  locationId: String
  name: String
  partnerID: String!
  phone: String
  position: String
}

union CreatePartnerContactOrError = CreatePartnerContactFailure | CreatePartnerContactSuccess

type CreatePartnerContactPayload {
  clientMutationId: String
  partnerContactOrError: CreatePartnerContactOrError
}

type CreatePartnerContactSuccess {
  partnerContact: Contact
}

type CreatePartnerLocationDaySchedulesFailure {
  mutationError: GravityMutationError
}

input CreatePartnerLocationDaySchedulesInput {
  clientMutationId: String
  daySchedules: [DayScheduleInput!]!
  locationId: String!
  partnerId: String!
}

union CreatePartnerLocationDaySchedulesOrError = CreatePartnerLocationDaySchedulesFailure | CreatePartnerLocationDaySchedulesSuccess

type CreatePartnerLocationDaySchedulesPayload {
  clientMutationId: String
  daySchedulesOrError: CreatePartnerLocationDaySchedulesOrError
}

type CreatePartnerLocationDaySchedulesSuccess {
  daySchedules: [DaySchedule]
}

type CreatePartnerLocationFailure {
  mutationError: GravityMutationError
}

input CreatePartnerLocationInput {
  address: String
  address2: String
  addressType: String
  city: String
  clientMutationId: String
  country: String
  email: String
  partnerId: String!
  phone: String
  postalCode: String
  publiclyViewable: Boolean
  state: String
}

union CreatePartnerLocationOrError = CreatePartnerLocationFailure | CreatePartnerLocationSuccess

type CreatePartnerLocationPayload {
  clientMutationId: String
  partnerLocationOrError: CreatePartnerLocationOrError
}

type CreatePartnerLocationSuccess {
  location: Location
}

type CreatePartnerShowDocumentFailure {
  mutationError: GravityMutationError
}

input CreatePartnerShowDocumentMutationInput {
  clientMutationId: String
  partnerId: String!
  remoteDocumentUrl: String!
  showId: String!
  title: String!
}

type CreatePartnerShowDocumentMutationPayload {
  clientMutationId: String
  documentOrError: CreatePartnerShowDocumentResponseOrError
}

union CreatePartnerShowDocumentResponseOrError = CreatePartnerShowDocumentFailure | CreatePartnerShowDocumentSuccess

type CreatePartnerShowDocumentSuccess {
  document: PartnerDocument
  show: Show
}

type CreatePartnerShowEventFailure {
  mutationError: GravityMutationError
}

input CreatePartnerShowEventMutationInput {
  clientMutationId: String
  description: String
  endAt: String!
  eventType: String!
  partnerId: String!
  showId: String!
  startAt: String!
  timeZone: String
}

type CreatePartnerShowEventMutationPayload {
  clientMutationId: String
  showEventOrError: CreatePartnerShowEventResponseOrError
}

union CreatePartnerShowEventResponseOrError = CreatePartnerShowEventFailure | CreatePartnerShowEventSuccess

type CreatePartnerShowEventSuccess {
  show: Show
  showEvent: ShowEventType
}

type CreatePartnerShowFailure {
  mutationError: GravityMutationError
}

input CreatePartnerShowFairLocationInput {
  booth: String
  floor: String
  hall: String
  pier: String
  room: String
  section: String
}

input CreatePartnerShowMutationInput {
  clientMutationId: String
  description: String
  endAt: String!
  fairId: String
  fairLocation: CreatePartnerShowFairLocationInput
  featured: Boolean
  locationId: String
  name: String!
  partnerId: String!
  pressRelease: String
  startAt: String!
  viewingRoomIds: [String]
}

type CreatePartnerShowMutationPayload {
  clientMutationId: String
  showOrError: CreatePartnerShowResponseOrError
}

union CreatePartnerShowResponseOrError = CreatePartnerShowFailure | CreatePartnerShowSuccess

type CreatePartnerShowSuccess {
  show: Show
}

type CreatePurchaseFailure {
  mutationError: GravityMutationError
}

union CreatePurchaseResponseOrError = CreatePurchaseFailure | CreatePurchaseSuccess

type CreatePurchaseSuccess {
  purchase: Purchase
}

type CreateSaleAgreementFailure {
  mutationError: GravityMutationError
}

input CreateSaleAgreementMutationInput {
  clientMutationId: String
  content: String!
  displayEndAt: String
  displayStartAt: String
  published: Boolean!
  saleId: String!
  status: SaleAgreementStatus!
}

type CreateSaleAgreementMutationPayload {
  clientMutationId: String
  saleAgreementOrError: CreateSaleAgreementResponseOrError
}

union CreateSaleAgreementResponseOrError = CreateSaleAgreementFailure | CreateSaleAgreementSuccess

type CreateSaleAgreementSuccess {
  saleAgreement: SaleAgreement
}

input CreateSmsSecondFactorInput {
  attributes: SmsSecondFactorAttributes!
  clientMutationId: String
  password: String!
}

type CreateSmsSecondFactorPayload {
  clientMutationId: String
  secondFactorOrErrors: SmsSecondFactorOrErrorsUnion!
}

input CreateSubmissionMutationInput {
  additionalInfo: String
  artistID: String!
  attributionClass: ConsignmentAttributionClass
  authenticityCertificate: Boolean
  category: ConsignmentSubmissionCategoryAggregation
  clientMutationId: String
  coaByAuthenticatingBody: Boolean
  coaByGallery: Boolean
  currency: String
  depth: String
  dimensionsMetric: String
  edition: Boolean
  editionNumber: String
  editionSize: Int
  editionSizeFormatted: String
  height: String
  locationAddress: String
  locationAddress2: String
  locationCity: String
  locationCountry: String
  locationCountryCode: String
  locationPostalCode: String
  locationState: String
  medium: String
  minimumPriceDollars: Int
  myCollectionArtworkID: String
  provenance: String
  sessionID: String
  signature: Boolean
  source: ConsignmentSubmissionSource
  sourceArtworkID: String
  state: ConsignmentSubmissionStateAggregation
  title: String
  userAgent: String
  userEmail: String
  userName: String
  userPhone: String
  utmMedium: String
  utmSource: String
  utmTerm: String
  width: String
  year: String
}

type CreateSubmissionMutationPayload {
  clientMutationId: String
  consignmentSubmission: ConsignmentSubmission
}

input CreateUserAddressInput {
  attributes: UserAddressAttributes!
  clientMutationId: String
}

type CreateUserAddressPayload {
  clientMutationId: String
  me: Me
  userAddressOrErrors: UserAddressOrErrorsUnion!
}

type CreateUserInterestFailure {
  mutationError: GravityMutationError
}

input CreateUserInterestForUserInput {
  body: String
  category: UserInterestCategory!
  clientMutationId: String
  interestId: String!
  interestType: UserInterestInterestType!
  ownerType: UserInterestOwnerType!
  userId: String!
}

type CreateUserInterestForUserPayload {
  clientMutationId: String
  userInterestOrError: createUserInterestForUserResponseOrError
}

input CreateUserInterestMutationInput {
  anonymousSessionId: String
  body: String
  category: UserInterestCategory!
  clientMutationId: String
  interestId: String!
  interestType: UserInterestInterestType!
  private: Boolean
  sessionID: String
}

type CreateUserInterestMutationPayload {
  clientMutationId: String
  me: Me!
  userInterest: UserInterest!
}

input CreateUserInterestsMutationInput {
  clientMutationId: String
  userInterests: [UserInterestInput!]!
}

type CreateUserInterestsMutationPayload {
  clientMutationId: String
  me: Me!
  userInterestsOrErrors: [UserInterestOrError!]!
}

type CreateUserSaleProfileFailure {
  mutationError: GravityMutationError
}

input CreateUserSaleProfileMutationInput {
  addressLine1: String
  addressLine2: String
  city: String
  clientMutationId: String
  country: String
  requireBidderApproval: Boolean
  state: String
  userId: String!
  zip: String
}

type CreateUserSaleProfileMutationPayload {
  clientMutationId: String
  userSaleProfileOrError: CreateUserSaleProfileResponseOrError
}

union CreateUserSaleProfileResponseOrError = CreateUserSaleProfileFailure | CreateUserSaleProfileSuccess

type CreateUserSaleProfileSuccess {
  userSaleProfile: UserSaleProfile
}

type CreateUserSeenArtworkFailure {
  mutationError: GravityMutationError
}

input CreateUserSeenArtworkInput {
  artworkId: String!
  clientMutationId: String
}

type CreateUserSeenArtworkPayload {
  clientMutationId: String
  userSeenArtworkOrError: CreateUserSeenArtworkSuccessResponseOrError
}

type CreateUserSeenArtworkSuccess {
  artworkId: String
}

union CreateUserSeenArtworkSuccessResponseOrError = CreateUserSeenArtworkFailure | CreateUserSeenArtworkSuccess

type CreateVerifiedRepresentativeFailure {
  mutationError: GravityMutationError
}

input CreateVerifiedRepresentativeInput {
  artistId: String!
  clientMutationId: String
  partnerId: String!
}

type CreateVerifiedRepresentativePayload {
  clientMutationId: String
  verifiedRepresentativeOrError: CreateVerifiedRepresentativeResponseOrError
}

union CreateVerifiedRepresentativeResponseOrError = CreateVerifiedRepresentativeFailure | CreateVerifiedRepresentativeSuccess

type CreateVerifiedRepresentativeSuccess {
  verifiedRepresentative: VerifiedRepresentative
}

input CreateViewingRoomInput {
  attributes: ViewingRoomAttributes
  body: String
  clientMutationId: String
  endAt: String
  image: ARImageInput
  introStatement: String
  partnerID: String
  partnerId: String
  pullQuote: String
  startAt: String
  timeZone: String
  title: String
}

type CreateViewingRoomPayload {
  clientMutationId: String
  viewingRoomOrErrors: ViewingRoomOrErrorsUnion!
}

type Credentials {
  credentials: String!
  policyDocument: S3PolicyDocumentType!
  policyEncoded: String!
  signature: String!
}

type CreditCard {
  brand: String!
  city: String
  country: String
  expirationMonth: Int!
  expirationYear: Int!
  id: ID!
  internalID: ID!
  lastDigits: String!
  name: String
  postalCode: String
  state: String
  street1: String
  street2: String
}

type CreditCardConnection {
  edges: [CreditCardEdge]
  pageInfo: PageInfo!
}

type CreditCardEdge {
  cursor: String!
  node: CreditCard
}

input CreditCardInput {
  clientMutationId: String
  oneTimeUse: Boolean = false
  token: String!
}

type CreditCardMutationFailure {
  mutationError: GravityMutationError
}

type CreditCardMutationSuccess {
  creditCard: CreditCard
  creditCardEdge: CreditCardEdge
}

union CreditCardMutationType = CreditCardMutationFailure | CreditCardMutationSuccess

type CreditCardPayload {
  clientMutationId: String
  creditCardOrError: CreditCardMutationType
  me: Me
}

type CroppedImageUrl {
  height: Int!
  src: String!
  srcSet: String!
  url: String!
  width: Int!
}

enum CurrencyPreference {
  EUR
  GBP
  USD
}

type CurrentEvent {
  details: String
  event: UnderlyingCurrentEvent!
  href: String
  image: Image
  name: String
  partner: String
  status: String
}

scalar Date

type DaySchedule {
  dayOfWeek: String
  endTime: Int
  startTime: Int
}

input DayScheduleInput {
  day: Int
  endTime: Int
  startTime: Int
}

type DeepZoom {
  Image: DeepZoomImage
}

type DeepZoomImage {
  Format: String
  Overlap: Int
  Size: DeepZoomImageSize
  TileSize: Int
  Url: String
  xmlns: String
}

type DeepZoomImageSize {
  Height: Int
  Width: Int
}

input DeleteAccountInput {
  clientMutationId: String
  explanation: String
  password: String
  url: String
}

type DeleteAccountPayload {
  clientMutationId: String
  userAccountOrError: AccountMutationType
}

type DeleteAlertFailure {
  mutationError: GravityMutationError
}

union DeleteAlertResponseOrError = DeleteAlertFailure | DeleteAlertSuccess

type DeleteAlertSuccess {
  alert: Alert
}

type DeleteArtistFailure {
  mutationError: GravityMutationError
}

input DeleteArtistInput {
  clientMutationId: String
  id: String!
}

type DeleteArtistPayload {
  artistOrError: DeleteArtistSuccessOrErrorType
  clientMutationId: String
}

type DeleteArtistSuccess {
  artist: Artist
}

union DeleteArtistSuccessOrErrorType = DeleteArtistFailure | DeleteArtistSuccess

type DeleteArtworkFailure {
  mutationError: GravityMutationError
}

input DeleteArtworkImageInput {
  artworkID: String!
  clientMutationId: String
  imageID: String!
}

type DeleteArtworkImagePayload {
  artworkOrError: ArtworkMutationType
  clientMutationId: String
}

input DeleteArtworkMutationInput {
  clientMutationId: String
  id: String!
}

type DeleteArtworkMutationPayload {
  artworkOrError: DeleteArtworkResponseOrError
  clientMutationId: String
}

union DeleteArtworkResponseOrError = DeleteArtworkFailure | DeleteArtworkSuccess

type DeleteArtworkSuccess {
  artwork: Artwork
}

input DeleteBankAccountInput {
  clientMutationId: String
  id: String!
}

type DeleteBankAccountPayload {
  bankAccountOrError: BankAccountMutationType
  clientMutationId: String
  me: Me
}

type DeleteCareerHighlightFailure {
  mutationError: GravityMutationError
}

input DeleteCareerHighlightInput {
  clientMutationId: String
  id: String!
}

type DeleteCareerHighlightPayload {
  careerHighlightOrError: DeleteCareerHighlightSuccessOrErrorType
  clientMutationId: String
}

type DeleteCareerHighlightSuccess {
  careerHighlight: CareerHighlight
}

union DeleteCareerHighlightSuccessOrErrorType = DeleteCareerHighlightFailure | DeleteCareerHighlightSuccess

type DeleteCollectionFailure {
  mutationError: GravityMutationError
}

union DeleteCollectionResponseOrError = DeleteCollectionFailure | DeleteCollectionSuccess

type DeleteCollectionSuccess {
  collection: Collection
}

type DeleteConversationFailure {
  mutationError: GravityMutationError
}

input DeleteConversationMutationInput {
  clientMutationId: String
  id: String!
}

type DeleteConversationMutationPayload {
  clientMutationId: String
  conversationOrError: DeleteConversationResponseOrError
}

union DeleteConversationResponseOrError = DeleteConversationFailure | DeleteConversationSuccess

type DeleteConversationSuccess {
  conversation: Conversation
}

input DeleteCreditCardInput {
  clientMutationId: String
  id: String!
}

type DeleteCreditCardPayload {
  clientMutationId: String
  creditCardOrError: CreditCardMutationType
  me: Me
}

type DeleteFeatureFailure {
  mutationError: GravityMutationError
}

input DeleteFeatureMutationInput {
  clientMutationId: String
  id: String!
}

type DeleteFeatureMutationPayload {
  clientMutationId: String
  featureOrError: DeleteFeatureResponseOrError
}

union DeleteFeatureResponseOrError = DeleteFeatureFailure | DeleteFeatureSuccess

type DeleteFeatureSuccess {
  feature: Feature
}

type DeleteFeaturedLinkFailure {
  mutationError: GravityMutationError
}

input DeleteFeaturedLinkMutationInput {
  clientMutationId: String
  id: String!
}

type DeleteFeaturedLinkMutationPayload {
  clientMutationId: String
  featuredLinkOrError: DeleteFeaturedLinkResponseOrError
}

union DeleteFeaturedLinkResponseOrError = DeleteFeaturedLinkFailure | DeleteFeaturedLinkSuccess

type DeleteFeaturedLinkSuccess {
  featuredLink: FeaturedLink
}

type DeletePageFailure {
  mutationError: GravityMutationError
}

input DeletePageMutationInput {
  clientMutationId: String
  id: String!
}

type DeletePageMutationPayload {
  clientMutationId: String
  pageOrError: DeletePageResponseOrError
}

union DeletePageResponseOrError = DeletePageFailure | DeletePageSuccess

type DeletePageSuccess {
  page: Page
}

type DeletePartnerArtistDocumentFailure {
  mutationError: GravityMutationError
}

input DeletePartnerArtistDocumentMutationInput {
  artistId: String!
  clientMutationId: String
  documentId: String!
  partnerId: String!
}

type DeletePartnerArtistDocumentMutationPayload {
  clientMutationId: String
  documentOrError: DeletePartnerArtistDocumentResponseOrError
}

union DeletePartnerArtistDocumentResponseOrError = DeletePartnerArtistDocumentFailure | DeletePartnerArtistDocumentSuccess

type DeletePartnerArtistDocumentSuccess {
  document: PartnerDocument
  partner: Partner
}

type DeletePartnerArtistFailure {
  mutationError: GravityMutationError
}

input DeletePartnerArtistMutationInput {
  artistId: String!
  clientMutationId: String
  partnerId: String!
}

type DeletePartnerArtistMutationPayload {
  clientMutationId: String
  partnerArtistOrError: DeletePartnerArtistResponseOrError
}

union DeletePartnerArtistResponseOrError = DeletePartnerArtistFailure | DeletePartnerArtistSuccess

type DeletePartnerArtistSuccess {
  partner: Partner
}

type DeletePartnerContactFailure {
  mutationError: GravityMutationError
}

input DeletePartnerContactMutationInput {
  clientMutationId: String
  contactId: String!
  partnerId: String!
}

type DeletePartnerContactMutationPayload {
  clientMutationId: String
  partnerContactOrError: DeletePartnerContactOrError
}

union DeletePartnerContactOrError = DeletePartnerContactFailure | DeletePartnerContactSuccess

type DeletePartnerContactSuccess {
  partnerContact: Contact
}

type DeletePartnerLocationFailure {
  mutationError: GravityMutationError
}

input DeletePartnerLocationMutationInput {
  clientMutationId: String
  locationId: String!
  partnerId: String!
}

type DeletePartnerLocationMutationPayload {
  clientMutationId: String
  partnerLocationOrError: DeletePartnerLocationOrError
}

union DeletePartnerLocationOrError = DeletePartnerLocationFailure | DeletePartnerLocationSuccess

type DeletePartnerLocationSuccess {
  location: Location
}

type DeletePartnerShowDocumentFailure {
  mutationError: GravityMutationError
}

input DeletePartnerShowDocumentMutationInput {
  clientMutationId: String
  documentId: String!
  partnerId: String!
  showId: String!
}

type DeletePartnerShowDocumentMutationPayload {
  clientMutationId: String
  documentOrError: DeletePartnerShowDocumentResponseOrError
}

union DeletePartnerShowDocumentResponseOrError = DeletePartnerShowDocumentFailure | DeletePartnerShowDocumentSuccess

type DeletePartnerShowDocumentSuccess {
  document: PartnerDocument
  show: Show
}

type DeletePartnerShowEventFailure {
  mutationError: GravityMutationError
}

input DeletePartnerShowEventMutationInput {
  clientMutationId: String
  eventId: String!
  partnerId: String!
  showId: String!
}

type DeletePartnerShowEventMutationPayload {
  clientMutationId: String
  showEventOrError: DeletePartnerShowEventResponseOrError
}

union DeletePartnerShowEventResponseOrError = DeletePartnerShowEventFailure | DeletePartnerShowEventSuccess

type DeletePartnerShowEventSuccess {
  show: Show
  showEvent: ShowEventType
}

type DeletePartnerShowFailure {
  mutationError: GravityMutationError
}

input DeletePartnerShowMutationInput {
  clientMutationId: String
  partnerId: String!
  showId: String!
}

type DeletePartnerShowMutationPayload {
  clientMutationId: String
  showOrError: DeletePartnerShowResponseOrError
}

union DeletePartnerShowResponseOrError = DeletePartnerShowFailure | DeletePartnerShowSuccess

type DeletePartnerShowSuccess {
  show: Show
}

type DeletePurchaseFailure {
  mutationError: GravityMutationError
}

union DeletePurchaseResponseOrError = DeletePurchaseFailure | DeletePurchaseSuccess

type DeletePurchaseSuccess {
  purchase: Purchase
}

input DeleteUserAddressInput {
  clientMutationId: String
  userAddressID: ID!
}

type DeleteUserAddressPayload {
  clientMutationId: String
  me: Me
  userAddressOrErrors: UserAddressOrErrorsUnion!
}

type DeleteUserFailure {
  mutationError: GravityMutationError
}

input DeleteUserIconInput {
  clientMutationId: String
}

type DeleteUserIconPayload {
  clientMutationId: String
  iconOrError: UserIconDeletionMutationType
}

input DeleteUserInput {
  clientMutationId: String
  id: String!
}

type DeleteUserInterestFailure {
  mutationError: GravityMutationError
}

input DeleteUserInterestForUserInput {
  clientMutationId: String
  id: String!
  userId: String
}

type DeleteUserInterestForUserPayload {
  clientMutationId: String
  userInterestOrError: deleteUserInterestForUserResponseOrError
}

input DeleteUserInterestMutationInput {
  anonymousSessionId: String
  clientMutationId: String
  id: String!
  sessionID: String
}

type DeleteUserInterestMutationPayload {
  clientMutationId: String
  me: Me!
  userInterest: UserInterest!
}

union DeleteUserInterestOrErrorType = DeleteUserInterestFailure | UserInterest

input DeleteUserInterestsMutationInput {
  clientMutationId: String
  ids: [String!]!
}

type DeleteUserInterestsMutationPayload {
  clientMutationId: String
  me: Me!
  userInterestsOrErrors: [DeleteUserInterestOrErrorType!]!
}

type DeleteUserPayload {
  clientMutationId: String
  userOrError: DeleteUserResponseOrError
}

union DeleteUserResponseOrError = DeleteUserFailure | DeleteUserSuccess

type DeleteUserSuccess {
  user: User
}

type DeleteVerifiedRepresentativeFailure {
  mutationError: GravityMutationError
}

input DeleteVerifiedRepresentativeMutationInput {
  clientMutationId: String
  id: String!
}

type DeleteVerifiedRepresentativeMutationPayload {
  clientMutationId: String
  verifiedRepresentativeOrError: DeleteVerifiedRepresentativeResponseOrError
}

union DeleteVerifiedRepresentativeResponseOrError = DeleteVerifiedRepresentativeFailure | DeleteVerifiedRepresentativeSuccess

type DeleteVerifiedRepresentativeSuccess {
  verifiedRepresentative: VerifiedRepresentative
}

input DeleteViewingRoomInput {
  clientMutationId: String
  viewingRoomID: ID!
}

type DeleteViewingRoomPayload {
  clientMutationId: String
  viewingRoom: ViewingRoom!
}

input DeliverSecondFactorInput {
  clientMutationId: String
  secondFactorID: ID!
}

type DeliverSecondFactorPayload {
  clientMutationId: String
  secondFactorOrErrors: SecondFactorOrErrorsUnion!
}

type Delivery {
  bouncedAt(format: String, timezone: String): String
  clickedAt(format: String, timezone: String): String
  deliveredAt(format: String, timezone: String): String
  fullTransformedEmail: String!
  id: ID!
  internalID: ID!
  openedAt(format: String, timezone: String): String
}

type DeliveryInfo {
  estimatedDelivery: String
  estimatedDeliveryWindow: String
  shipperName: String
  trackingNumber: String
  trackingURL: String
}

type Department {
  id: ID!
  jobs: [Job!]! @deprecated
  name: String!
}

type Device {
  appId: String!
  id: ID!
  name: String!
  platform: String!
  production: Boolean!
  token: String!
}

input DisableSecondFactorInput {
  clientMutationId: String
  password: String!
  secondFactorID: ID!
}

type DisableSecondFactorPayload {
  clientMutationId: String
  secondFactorOrErrors: SecondFactorOrErrorsUnion!
}

type DiscoveryCategoriesConnectionConnection {
  edges: [DiscoveryCategoriesConnectionEdge]
  pageCursors: PageCursors!
  pageInfo: PageInfo!
  totalCount: Int
}

type DiscoveryCategoriesConnectionEdge {
  cursor: String!
  node: DiscoveryCategory
}

type DiscoveryCategory {
  category: String!
  imageUrl: String
  slug: String
  title: String!
}

input DislikeArtworkInput {
  artworkID: String!
  clientMutationId: String
  remove: Boolean!
}

type DislikeArtworkPayload {
  artwork: Artwork
  clientMutationId: String
  me: Me!
}

type DismissTaskFailure {
  mutationError: GravityMutationError!
}

input DismissTaskMutationInput {
  clientMutationId: String
  id: String!
}

type DismissTaskMutationPayload {
  clientMutationId: String
  homeViewTasksSection: HomeViewSectionTasks
  taskOrError: DismissTaskResponseOrError!
}

union DismissTaskResponseOrError = DismissTaskFailure | DismissTaskSuccess

type DismissTaskSuccess {
  task: Task!
}

type DisplayTexts {
  messageType: DisplayTextsMessageTypeEnum!
  title: String!
}

enum DisplayTextsMessageTypeEnum {
  APPROVED_PICKUP
  APPROVED_SHIP
  APPROVED_SHIP_EXPRESS
  APPROVED_SHIP_STANDARD
  APPROVED_SHIP_WHITE_GLOVE
  CANCELED
  COMPLETED_PICKUP
  COMPLETED_SHIP
  DECLINED_BY_BUYER
  DECLINED_BY_SELLER
  PAYMENT_FAILED
  PROCESSING_PAYMENT_PICKUP
  PROCESSING_PAYMENT_SHIP
  PROCESSING_WIRE
  REFUNDED
  SHIPPED
  SUBMITTED_OFFER
  SUBMITTED_ORDER
  UNKNOWN
}

type DoNotUseThisPartner {
  displayName: String
  display_name: String @deprecated(reason: "Use displayName")
  givenName: String
  given_name: String @deprecated(reason: "Use givenName")
  id: ID!
  relativeSize: Int
  relative_size: Int @deprecated(reason: "Use relativeSize")
  slug: String
  subscriptionState: String
  subscription_state: String @deprecated(reason: "Use subscriptionState")
}

input EditableLocation {
  address: String
  address2: String
  city: String
  coordinates: [Float!]
  country: String
  countryCode: String
  postalCode: String
  state: String
  stateCode: String
  summary: String
}

type EditionSet implements Sellable {
  artistProofs: String
  availability: String
  availableEditions: [String]
  depth: String
  diameter: String
  dimensions: dimensions
  displayLabel: String
  displayPriceRange: Boolean
  duration: String
  editionOf: String
  editionSize: String
  framedDepth: String
  framedDiameter: String
  framedHeight: String
  framedMetric: String
  framedWidth: String
  height: String
  heightCm: Float
  id: ID!
  internalDisplayPrice: String
  internalID: ID!
  inventory: EditionSetInventory
  isAcquireable: Boolean
  isForSale: Boolean
  isInAuction: Boolean
  isInquireable: Boolean
  isOfferable: Boolean
  isOfferableFromInquiry: Boolean
  isPriceHidden: Boolean
  isSold: Boolean
  listPrice: ListPrice
  listingOptions: ArtworkListingOptions
  metric: String
  price: String
  priceDisplay: String
  priceListed: Money
  prototypes: String
  published: Boolean
  saleMessage: String
  shippingWeight: String
  shippingWeightMetric: String
  sizeBucket: String
  sizeScore: Float
  width: String
  widthCm: Float
}

type EditionSetInventory {
  count: Int
  isUnlimited: Boolean
}

enum EditionSetSorts {
  PRICE_ASC
}

input EnableSecondFactorInput {
  clientMutationId: String
  code: String!
  password: String!
  secondFactorID: ID!
}

type EnableSecondFactorPayload {
  clientMutationId: String
  recoveryCodes: [String!]
  secondFactorOrErrors: SecondFactorOrErrorsUnion!
}

input EndSaleInput {
  clientMutationId: String
  saleID: String
}

type EndSalePayload {
  clientMutationId: String
  sale: Sale
}

interface EntityWithFilterArtworksConnectionInterface {
  filterArtworksConnection(acquireable: Boolean, additionalGeneIDs: [String], after: String, aggregationPartnerCities: [String], aggregations: [ArtworkAggregation], artistID: String, artistIDs: [String], artistNationalities: [String], artistSeriesID: String, artistSeriesIDs: [String], artworkIDs: [String], atAuction: Boolean, attributionClass: [String], availability: String, before: String, categories: [String], color: String, colors: [String], dimensionRange: String, disableNotForSaleSorting: Boolean, excludeArtworkIDs: [String], extraAggregationGeneIDs: [String], first: Int, forSale: Boolean, framed: Boolean, geneID: String, geneIDs: [String], height: String, importSources: [String], includeAllJSON: Boolean, includeArtworksByFollowedArtists: Boolean, includeMediumFilterInAggregation: Boolean, includeUnpublished: Boolean, inquireableOnly: Boolean, keyword: String, keywordMatchExact: Boolean, last: Int, locationCities: [String], majorPeriods: [String], marketable: Boolean, marketingCollectionID: String, materialsTerms: [String], medium: String, offerable: Boolean, page: Int, partnerCities: [String], partnerID: ID, partnerIDs: [String], period: String, periods: [String], priceRange: String, published: Boolean, saleID: ID, showID: String, signed: Boolean, size: Int, sizes: [ArtworkSizes], sold: Boolean, sort: String, tagID: String, visibilityLevel: String, width: String): FilterArtworksConnection
  id: ID!
}

type Error {
  code: String!
  data: JSON
  message: String!
  path: [String!]
}

type Errors {
  errors: [Error!]!
}

enum EventStatus {
  ALL
  CLOSED
  CLOSING_SOON
  CURRENT
  RUNNING
  RUNNING_AND_UPCOMING
  UPCOMING
}

type ExchangeError {
  code: String!
  message: String!
}

type ExcludeArtistFromDiscoveryFailure {
  mutationError: GravityMutationError
}

input ExcludeArtistFromDiscoveryInput {
  artistId: String!
  clientMutationId: String
}

type ExcludeArtistFromDiscoveryPayload {
  clientMutationId: String
  excludeArtistFromDiscoveryOrError: ExcludeArtistFromDiscoveryResponseOrError
}

union ExcludeArtistFromDiscoveryResponseOrError = ExcludeArtistFromDiscoveryFailure | ExcludeArtistFromDiscoverySuccess

type ExcludeArtistFromDiscoverySuccess {
  artistId: String
}

enum ExhibitionPeriodFormat {
  LONG
  SHORT
}

type External {
  auctionHouses(size: Int, term: String): [ExternalAuctionHouse!]!
  fairs(size: Int, term: String): [ExternalFair!]!
  galleries(artsyOnly: Boolean = true, size: Int, term: String): [ExternalGallery!]!
}

type ExternalAuctionHouse {
  city: String
  country: String
  id: ID!
  internalID: ID!
  name: String!
}

type ExternalFair {
  city: String
  country: String
  endAt(format: String, timezone: String): String
  id: ID!
  internalID: ID!
  name: String!
  startAt(format: String, timezone: String): String
}

type ExternalGallery {
  city: String
  id: ID!
  internalID: ID!
  name: String!
  partner: Partner
  region: String
}

type ExternalPartner {
  city: String
  id: ID!
  internalID: ID!
  name: String
}

type Fair implements EntityWithFilterArtworksConnectionInterface & Node {
  about(format: Format): String
  activeStartAt(format: String, timezone: String): String
  articlesConnection(after: String, before: String, first: Int, inEditorialFeed: Boolean, last: Int, page: Int, size: Int, sort: ArticleSorts): ArticleConnection
  artistsConnection(after: String, before: String, first: Int, last: Int, sort: FairArtistSorts): ArtistConnection
  bannerSize: String
  cached: Int
  contact(format: Format): String
  counts: FairCounts
  endAt(format: String, timezone: String): String
  exhibitionPeriod(format: ExhibitionPeriodFormat = LONG): String
  exhibitorsGroupedByName: [FairExhibitorsGroup]
  featuredKeywords: [String!]!
  filterArtworksConnection(acquireable: Boolean, additionalGeneIDs: [String], after: String, aggregationPartnerCities: [String], aggregations: [ArtworkAggregation], artistID: String, artistIDs: [String], artistNationalities: [String], artistSeriesID: String, artistSeriesIDs: [String], artworkIDs: [String], atAuction: Boolean, attributionClass: [String], availability: String, before: String, categories: [String], color: String, colors: [String], dimensionRange: String, disableNotForSaleSorting: Boolean, excludeArtworkIDs: [String], extraAggregationGeneIDs: [String], first: Int, forSale: Boolean, framed: Boolean, geneID: String, geneIDs: [String], height: String, importSources: [String], includeAllJSON: Boolean, includeArtworksByFollowedArtists: Boolean, includeMediumFilterInAggregation: Boolean, includeUnpublished: Boolean, input: FilterArtworksInput, inquireableOnly: Boolean, keyword: String, keywordMatchExact: Boolean, last: Int, locationCities: [String], majorPeriods: [String], marketable: Boolean, marketingCollectionID: String, materialsTerms: [String], medium: String, offerable: Boolean, page: Int, partnerCities: [String], partnerID: ID, partnerIDs: [String], period: String, periods: [String], priceRange: String, published: Boolean, saleID: ID, showID: String, signed: Boolean, size: Int, sizes: [ArtworkSizes], sold: Boolean, sort: String, tagID: String, visibilityLevel: String, width: String): FilterArtworksConnection
  followedContent: FollowedContent
  formattedOpeningHours: String
  hasFullFeature: Boolean
  hasHomepageSection: Boolean
  hasLargeBanner: Boolean
  hasListing: Boolean
  hours(format: Format): String
  href: String
  id: ID!
  image: Image
  internalID: ID!
  isActive: Boolean
  isPublished: Boolean
  links(format: Format): String
  location: Location
  marketingCollectionSlugs: [String]!
  marketingCollections(size: Int): [MarketingCollection]!
  mobileImage: Image
  name: String
  organizer: FairOrganizer
  profile: Profile
  showsConnection(after: String, before: String, first: Int, last: Int, page: Int, section: String, sort: ShowSorts, totalCount: Boolean = false): ShowConnection
  slug: ID!
  sponsoredContent: FairSponsoredContent
  startAt(format: String, timezone: String): String
  summary(format: Format): String
  tagline: String
  tickets(format: Format): String
  ticketsLink: String
}

enum FairArtistSorts {
  NAME_ASC
  NAME_DESC
}

type FairConnection {
  edges: [FairEdge]
  pageCursors: PageCursors!
  pageInfo: PageInfo!
  totalCount: Int
}

type FairCounts {
  artists(format: String, label: String): FormattedNumber
  artworks(format: String, label: String): FormattedNumber
  partnerShows(format: String, label: String): FormattedNumber
  partners(format: String, label: String): FormattedNumber
}

type FairEdge {
  cursor: String!
  node: Fair
}

type FairExhibitor {
  name: String
  partner: Partner
  partnerID: String
  profileID: String
  slug: ID!
}

type FairExhibitorsGroup {
  exhibitors: [FairExhibitor]
  letter: String
}

type FairOrganizer {
  about(format: Format): String
  articlesConnection(after: String, before: String, first: Int, inEditorialFeed: Boolean, last: Int, page: Int, sort: ArticleSorts): ArticleConnection
  fairsConnection(after: String, before: String, first: Int, hasFullFeature: Boolean, hasHomepageSection: Boolean, hasListing: Boolean, last: Int, sort: FairSorts, status: EventStatus): FairConnection
  id: ID!
  internalID: ID!
  name: String
  profile: Profile
  profileID: ID
  slug: ID!
  website: String
}

enum FairSorts {
  CREATED_AT_ASC
  CREATED_AT_DESC
  NAME_ASC
  NAME_DESC
  START_AT_ASC
  START_AT_DESC
}

type FairSponsoredContent {
  activationText: String
  pressReleaseUrl: String
}

type Feature {
  callout(format: Format): String
  description(format: Format): String
  id: ID!
  image: Image
  internalID: ID!
  isActive: Boolean!
  layout: FeatureLayouts!
  meta: FeatureMeta!
  metaTitle: String
  name: String!
  setsConnection(after: String, before: String, first: Int, last: Int, sort: OrderedSetSorts = KEY_ASC): OrderedSetConnection
  slug: ID!
  subheadline(format: Format): String
}

type FeatureConnection {
  edges: [FeatureEdge]
  pageCursors: PageCursors!
  pageInfo: PageInfo!
  totalCount: Int
}

type FeatureEdge {
  cursor: String!
  node: Feature
}

type FeatureFlag {
  createdAt(format: String, timezone: String): String
  description: String
  environments: [FeatureFlagEnvironments]
  id: ID!
  impressionData: Boolean!
  lastSeenAt(format: String, timezone: String): String
  name: String!
  project: String!
  stale: Boolean!
  type: String!
  variants: [FeatureFlagVariantType]
}

type FeatureFlagEnvironments {
  enabled: Boolean!
  name: String!
}

input FeatureFlagStrategyInput {
  rollOut: Int = 100
  strategyType: FeatureFlagStrategyType
}

enum FeatureFlagStrategyType {
  DEFAULT
  FLEXIBLE_ROLLOUT
}

enum FeatureFlagToggleType {
  EXPERIMENT
  RELEASE
}

input FeatureFlagVariantInputName {
  name: String!
  stickiness: String = "sessionId"
  weight: Int!
  weightType: FeatureFlagVariantWeightType
}

type FeatureFlagVariantType {
  name: String
  stickiness: String
  weight: Int
  weightType: String
}

enum FeatureFlagVariantWeightType {
  VARIABLE
}

enum FeatureFlagsSortBy {
  CREATED_AT
  NAME
}

enum FeatureLayouts {
  DEFAULT
  FULL
}

type FeatureMeta {
  description: String!
  image: String
  name: String! @deprecated(reason: "Use `title` instead")
  title: String!
}

enum FeatureSorts {
  CREATED_AT_ASC
  CREATED_AT_DESC
  NAME_ASC
  NAME_DESC
}

type FeaturedGeneLink {
  href: String!
  image: Image
  internalID: String!
  title: String!
}

type FeaturedLink {
  description(format: Format): String
  entity: FeaturedLinkEntity
  href: String
  id: ID!
  image: Image
  initials(length: Int = 3): String
  internalID: ID!
  subtitle(format: Format): String
  title: String
}

type FeaturedLinkConnection {
  edges: [FeaturedLinkEdge]
  pageCursors: PageCursors!
  pageInfo: PageInfo!
  totalCount: Int
}

type FeaturedLinkEdge {
  cursor: String!
  node: FeaturedLink
}

union FeaturedLinkEntity = Artist | Gene | Partner

type Feedback {
  id: ID!
  internalID: ID!
  message: String!
}

type FieldErrorResults {
  message: String!
  name: String!
}

type FilterArtworksConnection implements ArtworkConnectionInterface & Node {
  aggregations: [ArtworksAggregationResults]
  counts: FilterArtworksCounts
  edges: [FilterArtworksEdge]
  facet: ArtworkFilterFacet
  hits: [Artwork] @deprecated(reason: "Prefer to use `edges`. [Will be removed in v2]")
  id: ID!
  merchandisableArtists(size: Int = 12): [Artist]
  pageCursors: PageCursors!
  pageInfo: PageInfo!
}

type FilterArtworksCounts {
  followedArtists(format: String, label: String): FormattedNumber
  total(format: String, label: String): FormattedNumber
}

type FilterArtworksEdge implements ArtworkEdgeInterface {
  cursor: String!
  node: Artwork
}

input FilterArtworksInput {
  acquireable: Boolean
  additionalGeneIDs: [String]
  after: String
  aggregationPartnerCities: [String]
  aggregations: [ArtworkAggregation]
  artistID: String
  artistIDs: [String]
  artistNationalities: [String]
  artistSeriesID: String
  artistSeriesIDs: [String]
  artworkIDs: [String]
  atAuction: Boolean
  attributionClass: [String]
  availability: String
  before: String
  categories: [String]
  color: String
  colors: [String]
  dimensionRange: String
  disableNotForSaleSorting: Boolean
  excludeArtworkIDs: [String]
  extraAggregationGeneIDs: [String]
  first: Int
  forSale: Boolean
  framed: Boolean
  geneID: String
  geneIDs: [String]
  height: String
  importSources: [String]
  includeAllJSON: Boolean
  includeArtworksByFollowedArtists: Boolean
  includeMediumFilterInAggregation: Boolean
  includeUnpublished: Boolean
  inquireableOnly: Boolean
  keyword: String
  keywordMatchExact: Boolean
  last: Int
  locationCities: [String]
  majorPeriods: [String]
  marketable: Boolean
  marketingCollectionID: String
  materialsTerms: [String]
  medium: String
  offerable: Boolean
  page: Int
  partnerCities: [String]
  partnerID: ID
  partnerIDs: [String]
  period: String
  periods: [String]
  priceRange: String
  published: Boolean
  saleID: ID
  showID: String
  signed: Boolean
  size: Int
  sizes: [ArtworkSizes]
  sold: Boolean
  sort: String
  tagID: String
  visibilityLevel: String
  width: String
}

type FilterPartners {
  aggregations: [PartnersAggregationResults]
  hits: [Partner]
  total: Int
}

type FilterSaleArtworksCounts {
  followedArtists(format: String, label: String): FormattedNumber
  total(format: String, label: String): FormattedNumber
}

type FlagArtworkImportCellFailure {
  mutationError: GravityMutationError
}

input FlagArtworkImportCellInput {
  artworkImportID: String!
  clientMutationId: String
  columnName: String!
  flaggedValue: String
  originalValue: String
  rowID: String!
  userNote: String!
}

type FlagArtworkImportCellPayload {
  clientMutationId: String
  flagArtworkImportCellOrError: FlagArtworkImportCellResponseOrError
}

union FlagArtworkImportCellResponseOrError = FlagArtworkImportCellFailure | FlagArtworkImportCellSuccess

type FlagArtworkImportCellSuccess {
  artworkImport: ArtworkImport
}

type FollowArtist {
  artist: Artist
  auto: Boolean
  id: ID!
  internalID: ID!
}

type FollowArtistConnection {
  edges: [FollowArtistEdge]
  pageCursors: PageCursors!
  pageInfo: PageInfo!
  totalCount: Int
}

type FollowArtistCounts {
  artists: Int
}

type FollowArtistEdge {
  cursor: String!
  node: FollowArtist
}

input FollowArtistInput {
  artistID: String!
  clientMutationId: String
  unfollow: Boolean = false
}

type FollowArtistPayload {
  artist: Artist
  clientMutationId: String
  me: Me!
  popularArtists(excludeArtistIDs: [String], excludeFollowedArtists: Boolean, size: Int): [Artist]
}

type FollowArtists {
  artists: [Artist]
  counts: FollowArtistCounts
}

type FollowGene {
  gene: Gene
  id: ID!
  internalID: ID!
}

type FollowGeneConnection {
  edges: [FollowGeneEdge]
  pageCursors: PageCursors!
  pageInfo: PageInfo!
  totalCount: Int
}

type FollowGeneEdge {
  cursor: String!
  node: FollowGene
}

input FollowGeneInput {
  clientMutationId: String
  geneID: String
  unfollow: Boolean = false
}

type FollowGenePayload {
  clientMutationId: String
  gene: Gene
}

input FollowProfileInput {
  clientMutationId: String
  profileID: String
  unfollow: Boolean = false
}

type FollowProfilePayload {
  clientMutationId: String
  me: Me!
  profile: Profile
}

input FollowShowInput {
  clientMutationId: String
  partnerShowID: String
  unfollow: Boolean = false
}

type FollowShowPayload {
  clientMutationId: String
  show: Show
}

type FollowedArtistsArtworksGroup implements Node {
  artists: String
  artworksConnection(after: String, before: String, first: Int, last: Int): ArtworkConnection
  href: String
  id: ID!
  image: Image
  publishedAt(format: String, timezone: String): String
  summary: String
}

type FollowedArtistsArtworksGroupConnection {
  edges: [FollowedArtistsArtworksGroupEdge]
  pageInfo: PageInfo!
}

type FollowedArtistsArtworksGroupEdge {
  cursor: String!
  node: FollowedArtistsArtworksGroup
}

type FollowedContent {
  artists: [Artist]
  galleries: [Partner]
}

type FollowedFairConnection {
  edges: [FollowedFairEdge]
  pageInfo: PageInfo!
}

type FollowedFairEdge {
  cursor: String!
  node: Fair
}

type FollowedGalleryConnection {
  edges: [FollowedGalleryEdge]
  pageInfo: PageInfo!
}

type FollowedGalleryEdge {
  cursor: String!
  node: Partner
}

type FollowedProfile {
  id: ID!
  internalID: ID!
  profile: Profile!
}

type FollowedProfileConnection {
  edges: [FollowedProfileEdge]
  pageCursors: PageCursors!
  pageInfo: PageInfo!
  totalCount: Int
}

type FollowedProfileEdge {
  cursor: String!
  node: FollowedProfile
}

type FollowedShowConnection {
  edges: [FollowedShowEdge]
  pageInfo: PageInfo!
}

type FollowedShowEdge {
  cursor: String!
  node: Show
}

type FollowsAndSaves {
  artistsConnection(after: String, before: String, fairID: String, first: Int, last: Int, page: Int, size: Int): FollowArtistConnection
  artworksConnection(after: String, before: String, first: Int, last: Int, page: Int, private: Boolean = false, size: Int, sort: CollectionArtworkSorts = POSITION_DESC): SavedArtworksConnection
  bundledArtworksByArtistConnection(after: String, before: String, first: Int, forSale: Boolean, last: Int, sort: ArtworkSorts): FollowedArtistsArtworksGroupConnection
  fairsConnection(after: String, before: String, first: Int, last: Int): FollowedFairConnection
  galleriesConnection(after: String, before: String, first: Int, last: Int): FollowedGalleryConnection
  genesConnection(after: String, before: String, first: Int, last: Int, page: Int, size: Int): FollowGeneConnection
  profilesConnection(after: String, before: String, first: Int, last: Int, page: Int, size: Int): FollowedProfileConnection
  showsConnection(after: String, before: String, city: String, dayThreshold: Int, first: Int, last: Int, status: EventStatus): FollowedShowConnection
}

enum Format {
  HTML
  MARKDOWN
  PLAIN
}

type FormattedDaySchedules {
  days: String
  hours: String
}

scalar FormattedNumber

type FulfillmentDetails {
  addressLine1: String
  addressLine2: String
  city: String
  country: String
  name: String
  phoneNumber: PhoneNumberType
  phoneNumberCountryCode: String @deprecated(reason: "Use `phoneNumber.regionCode` for the alpha-2 country code or phoneNumber.countryCode for the numeric country code")
  postalCode: String
  region: String
}

type FulfillmentOption {
  amount: Money
  selected: Boolean
  type: FulfillmentOptionTypeEnum!
}

input FulfillmentOptionInput {
  type: FulfillmentOptionInputEnum!
}

enum FulfillmentOptionInputEnum {
  DOMESTIC_FLAT
  INTERNATIONAL_FLAT
  PICKUP
}

enum FulfillmentOptionTypeEnum {
  DOMESTIC_FLAT
  INTERNATIONAL_FLAT
  PICKUP
  SHIPPING_TBD
}

type GeminiEntry {
  token: String!
}

type Gene implements Node & Searchable {
  artistsConnection(after: String, before: String, first: Int, last: Int): ArtistConnection
  cached: Int
  description(format: Format): String
  displayLabel: String
  displayName: String
  filterArtworksConnection(acquireable: Boolean, additionalGeneIDs: [String], after: String, aggregationPartnerCities: [String], aggregations: [ArtworkAggregation], artistID: String, artistIDs: [String], artistNationalities: [String], artistSeriesID: String, artistSeriesIDs: [String], artworkIDs: [String], atAuction: Boolean, attributionClass: [String], availability: String, before: String, categories: [String], color: String, colors: [String], dimensionRange: String, disableNotForSaleSorting: Boolean, excludeArtworkIDs: [String], extraAggregationGeneIDs: [String], first: Int, forSale: Boolean, framed: Boolean, geneID: String, geneIDs: [String], height: String, importSources: [String], includeAllJSON: Boolean, includeArtworksByFollowedArtists: Boolean, includeMediumFilterInAggregation: Boolean, includeUnpublished: Boolean, input: FilterArtworksInput, inquireableOnly: Boolean, keyword: String, keywordMatchExact: Boolean, last: Int, locationCities: [String], majorPeriods: [String], marketable: Boolean, marketingCollectionID: String, materialsTerms: [String], medium: String, offerable: Boolean, page: Int, partnerCities: [String], partnerID: ID, partnerIDs: [String], period: String, periods: [String], priceRange: String, published: Boolean, saleID: ID, showID: String, signed: Boolean, size: Int, sizes: [ArtworkSizes], sold: Boolean, sort: String, tagID: String, visibilityLevel: String, width: String): FilterArtworksConnection
  href: String
  id: ID!
  image: Image
  imageUrl: String
  internalID: ID!
  isFollowed: Boolean
  isPublished: Boolean
  meta: GeneMeta!
  mode: String
  name: String
  similar(after: String, before: String, excludeGeneIDs: [String], first: Int, last: Int): GeneConnection
  slug: ID!
  trendingArtists(sample: Int): [Artist]
}

type GeneConnection {
  edges: [GeneEdge]
  pageCursors: PageCursors!
  pageInfo: PageInfo!
  totalCount: Int
}

type GeneEdge {
  cursor: String!
  node: Gene
}

type GeneFamily {
  featuredGeneLinks: [FeaturedGeneLink]
  genes: [Gene]
  id: ID!
  internalID: ID!
  name: String!
  slug: ID!
}

type GeneFamilyConnection {
  edges: [GeneFamilyEdge]
  pageInfo: PageInfo!
}

type GeneFamilyEdge {
  cursor: String!
  node: GeneFamily
}

type GeneMeta {
  description: String!
}

type GravityARImage {
  height: Int
  imageURLs: GravityImageURLs
  internalID: String!
  width: Int
}

type GravityImageURLs {
  normalized: String
}

type GravityMutationError {
  detail: String
  error: String
  fieldErrors: [FieldErrorResults]
  message: String!
  statusCode: Int
  type: String
}

type HeroUnit {
  body: String!
  createdAt(format: String, timezone: String): String
  credit: String
  endAt(format: String, timezone: String): String
  id: ID!
  image: Image
  internalID: ID!
  label: String
  link: HeroUnitLink!
  position: Int
  startAt(format: String, timezone: String): String
  title: String!
}

type HeroUnitConnection {
  edges: [HeroUnitEdge]
  pageCursors: PageCursors!
  pageInfo: PageInfo!
  totalCount: Int
}

type HeroUnitEdge {
  cursor: String!
  node: HeroUnit
}

type HeroUnitLink {
  text: String!
  url: String!
}

type HighestBid {
  amount(decimal: String = ".", disambiguate: Boolean = false, format: String = "%s%v", precision: Int = 0, symbol: String, thousand: String = ","): String
  cents: Int
  createdAt(format: String, timezone: String): String
  display: String
  id: ID!
  internalID: ID!
  isCancelled: Boolean
  number: Int
}

type Highlights {
  broadCollectingGenes: [Gene]
  popularArtists(excludeArtistIDs: [String], excludeFollowedArtists: Boolean, size: Int): [Artist]
}

type HomePage {
  artistModule(key: HomePageArtistModuleTypes): HomePageArtistModule
  artistModules: [HomePageArtistModule]
  artworkModule(followedArtistID: String, id: String, key: HomePageArtworkModuleTypes, relatedArtistID: String): HomePageArtworkModule
  artworkModules(exclude: [HomePageArtworkModuleTypes] = [], include: [HomePageArtworkModuleTypes], maxFollowedGeneRails: Int = 1, maxRails: Int = 8, order: [HomePageArtworkModuleTypes]): [HomePageArtworkModule]
  fairsModule: HomePageFairsModule
  heroUnits(platform: HomePageHeroUnitPlatform!): [HomePageHeroUnit]
  marketingCollectionsModule: HomePageMarketingCollectionsModule
  onboardingModule: HomePageMyCollectionOnboardingModule
  salesModule: HomePageSalesModule
}

type HomePageArtistModule implements Node {
  id: ID!
  key: String
  results: [Artist]
}

enum HomePageArtistModuleTypes {
  CURATED_TRENDING
  POPULAR
  SUGGESTED
  TRENDING
}

type HomePageArtworkModule implements Node {
  context: HomePageArtworkModuleContext
  id: ID!
  isDisplayable: Boolean
  key: String
  params: HomePageModulesParams
  results: [Artwork]
  title: String
}

union HomePageArtworkModuleContext = Fair | FollowArtists | Gene | HomePageFollowedArtistArtworkModule | HomePageRelatedArtistArtworkModule | Sale | TrendingArtists

enum HomePageArtworkModuleTypes {
  ACTIVE_BIDS
  CURRENT_FAIRS
  FOLLOWED_ARTIST
  FOLLOWED_ARTISTS
  FOLLOWED_GALLERIES
  FOLLOWED_GENES
  GENERIC_GENES
  LIVE_AUCTIONS
  POPULAR_ARTISTS
  RECENTLY_VIEWED_WORKS
  RECOMMENDED_WORKS
  RELATED_ARTISTS
  SAVED_WORKS
  SIMILAR_TO_RECENTLY_VIEWED
  SIMILAR_TO_SAVED_WORKS
}

type HomePageFairsModule {
  results: [Fair]!
}

type HomePageFollowedArtistArtworkModule {
  artist: Artist
}

type HomePageHeroUnit {
  backgroundImageURL(version: HomePageHeroUnitImageVersion): String
  cached: Int
  creditLine: String
  heading: String
  href: String
  id: ID!
  internalID: ID!
  linkText: String
  mode: HomePageHeroUnitMode
  slug: ID!
  subtitle: String
  title: String
  titleImageURL(retina: Boolean): String
}

enum HomePageHeroUnitImageVersion {
  NARROW
  WIDE
}

enum HomePageHeroUnitMode {
  CENTERED_DARK
  CENTERED_LIGHT
  LEFT_DARK
  LEFT_LIGHT
  RIGHT_DARK
  RIGHT_LIGHT
}

enum HomePageHeroUnitPlatform {
  DESKTOP
  MARTSY
  MOBILE
}

type HomePageMarketingCollectionsModule {
  results: [MarketingCollection]!
}

type HomePageModulesParams {
  followedArtistID: ID
  geneID: String
  internalID: ID
  medium: String
  priceRange: String
  relatedArtistID: ID
}

type HomePageMyCollectionOnboardingModule {
  showMyCollectionCard: Boolean!
  showSWACard: Boolean!
}

type HomePageRelatedArtistArtworkModule {
  artist: Artist
  basedOn: Artist
}

type HomePageSalesModule {
  results: [Sale]!
}

type HomeView {
  experiments: [ClientFeatureFlag]!
  section(id: String!): HomeViewSectionGeneric
  sectionsConnection(after: String, before: String, first: Int, last: Int): HomeViewSectionGenericConnection!
}

type HomeViewCard {
  badgeText: String
  buttonText: String
  entityID: String
  entityType: String
  href: String
  image: Image
  subtitle: String
  title: String!
}

type HomeViewCardConnection {
  edges: [HomeViewCardEdge]
  pageCursors: PageCursors!
  pageInfo: PageInfo!
  totalCount: Int
}

type HomeViewCardEdge {
  cursor: String!
  node: HomeViewCard
}

type HomeViewComponent {
  backgroundImageURL(version: HomeViewComponentBackgroundImageURLVersion): String
  behaviors: HomeViewComponentBehaviors
  description: String
  href: String @deprecated(reason: "Use `behaviors.viewAll.href` instead")
  title: String
  type: String
}

enum HomeViewComponentBackgroundImageURLVersion {
  NARROW
  WIDE
}

type HomeViewComponentBehaviors {
  viewAll: HomeViewComponentBehaviorsViewAll
}

type HomeViewComponentBehaviorsViewAll {
  buttonText: String
  href: String
  ownerType: String
}

type HomeViewSectionActivity implements HomeViewSectionGeneric & Node {
  component: HomeViewComponent
  contextModule: String
  id: ID!
  internalID: ID!
  notificationsConnection(after: String, before: String, first: Int, last: Int): NotificationConnection
  ownerType: String
}

type HomeViewSectionArticles implements HomeViewSectionGeneric & Node {
  articlesConnection(after: String, before: String, first: Int, last: Int): ArticleConnection
  component: HomeViewComponent
  contextModule: String
  id: ID!
  internalID: ID!
  ownerType: String
}

type HomeViewSectionArtists implements HomeViewSectionGeneric & Node {
  artistsConnection(after: String, before: String, first: Int, last: Int): ArtistConnection
  component: HomeViewComponent
  contextModule: String
  id: ID!
  internalID: ID!
  ownerType: String
}

type HomeViewSectionArtworks implements HomeViewSectionGeneric & Node {
  artworksConnection(after: String, before: String, first: Int, last: Int): ArtworkConnection
  component: HomeViewComponent
  contextModule: String
  id: ID!
  internalID: ID!
  ownerType: String
  trackItemImpressions: Boolean!
}

type HomeViewSectionAuctionResults implements HomeViewSectionGeneric & Node {
  auctionResultsConnection(after: String, before: String, first: Int, last: Int): AuctionResultConnection
  component: HomeViewComponent
  contextModule: String
  id: ID!
  internalID: ID!
  ownerType: String
}

type HomeViewSectionCard implements HomeViewSectionGeneric & Node {
  card: HomeViewCard
  component: HomeViewComponent
  contextModule: String
  id: ID!
  internalID: ID!
  ownerType: String
}

type HomeViewSectionCards implements HomeViewSectionGeneric & Node {
  cardsConnection(after: String, before: String, first: Int, last: Int): HomeViewCardConnection
  component: HomeViewComponent
  contextModule: String
  id: ID!
  internalID: ID!
  ownerType: String
}

type HomeViewSectionFairs implements HomeViewSectionGeneric & Node {
  component: HomeViewComponent
  contextModule: String
  fairsConnection(after: String, before: String, first: Int, last: Int): FairConnection
  id: ID!
  internalID: ID!
  ownerType: String
}

interface HomeViewSectionGeneric {
  component: HomeViewComponent
  contextModule: String
  id: ID!
  internalID: ID!
  ownerType: String
}

type HomeViewSectionGenericConnection {
  edges: [HomeViewSectionGenericEdge]
  pageCursors: PageCursors!
  pageInfo: PageInfo!
  totalCount: Int
}

type HomeViewSectionGenericEdge {
  cursor: String!
  node: HomeViewSectionGeneric
}

type HomeViewSectionHeroUnits implements HomeViewSectionGeneric & Node {
  component: HomeViewComponent
  contextModule: String
  heroUnitsConnection(after: String, before: String, first: Int, last: Int): HeroUnitConnection
  id: ID!
  internalID: ID!
  ownerType: String
}

type HomeViewSectionMarketingCollections implements HomeViewSectionGeneric & Node {
  component: HomeViewComponent
  contextModule: String
  id: ID!
  internalID: ID!
  marketingCollectionsConnection(after: String, before: String, first: Int, last: Int): MarketingCollectionConnection
  ownerType: String
}

type HomeViewSectionNavigationPills implements HomeViewSectionGeneric & Node {
  component: HomeViewComponent
  contextModule: String
  id: ID!
  internalID: ID!
  navigationPills: [NavigationPill]!
  ownerType: String
}

type HomeViewSectionSales implements HomeViewSectionGeneric & Node {
  component: HomeViewComponent
  contextModule: String
  id: ID!
  internalID: ID!
  ownerType: String
  salesConnection(after: String, before: String, first: Int, last: Int): SaleConnection
}

type HomeViewSectionShows implements HomeViewSectionGeneric & Node {
  component: HomeViewComponent
  contextModule: String
  id: ID!
  internalID: ID!
  ownerType: String
  showsConnection(after: String, before: String, first: Int, last: Int, near: Near): ShowConnection
}

type HomeViewSectionTasks implements HomeViewSectionGeneric & Node {
  component: HomeViewComponent
  contextModule: String
  id: ID!
  internalID: ID!
  ownerType: String
  tasksConnection(after: String, before: String, first: Int, last: Int): TaskConnection
}

type HomeViewSectionViewingRooms implements HomeViewSectionGeneric & Node {
  component: HomeViewComponent
  contextModule: String
  id: ID!
  internalID: ID!
  ownerType: String
}

scalar ISO8601DateTime

type IdentityVerification {
  createdAt(format: String, timezone: String): String
  email: String
  id: ID!
  initiatorID: String
  internalID: ID!
  invitationExpiresAt(format: String, timezone: String): String
  name: String
  orderID: String
  overrides: [IdentityVerificationOverride]
  pageURL: String
  saleID: String
  scanReferences: [IdentityVerificationScanReference]
  state: String!
  userID: String
}

type IdentityVerificationConnection {
  edges: [IdentityVerificationEdge]
  pageCursors: PageCursors!
  pageInfo: PageInfo!
  totalCount: Int
}

type IdentityVerificationEdge {
  cursor: String!
  node: IdentityVerification
}

type IdentityVerificationEmail {
  created_at(format: String, timezone: String): String
  email: String
  id: ID!
  internalID: ID!
  name: String
  state: String!
  updated_at(format: String, timezone: String): String
  userID: String
}

type IdentityVerificationEmailMutationFailureType {
  mutationError: GravityMutationError
}

type IdentityVerificationEmailMutationSuccessType {
  identityVerification: IdentityVerification
  identityVerificationEmail: IdentityVerificationEmail @deprecated(reason: "use identityVerification instead")
}

union IdentityVerificationEmailMutationType = IdentityVerificationEmailMutationFailureType | IdentityVerificationEmailMutationSuccessType

type IdentityVerificationOverride {
  createdAt(format: String, timezone: String): String
  creator: User
  id: ID!
  internalID: ID!
  newState: String!
  oldState: String!
  reason: String!
  userID: String
}

type IdentityVerificationOverrideMutationFailure {
  mutationError: GravityMutationError
}

type IdentityVerificationOverrideMutationSuccess {
  identityVerification: IdentityVerification
}

type IdentityVerificationScanReference {
  createdAt(format: String, timezone: String): String
  extractedFirstName: String
  extractedIdFailReason: String
  extractedLastName: String
  extractedSimilarityFailReason: String
  finishedAt(format: String, timezone: String): String
  id: ID!
  internalID: ID!
  jumioID: String!
  result: String
}

type Image {
  aspectRatio: Float!
  blurhash: String
  caption: String
  cropped(height: Int!, quality: [Int!], version: [String], width: Int!): CroppedImageUrl
  deepZoom: DeepZoom
  geminiToken: String
  height: Int
  href: String
  imageURL: String
  imageVersions: [String]
  internalID: ID
  isDefault: Boolean
  isZoomable: Boolean
  maxTiledHeight: Int
  maxTiledWidth: Int
  orientation: String
  originalHeight: Int
  originalWidth: Int
  placeholder: String
  position: Int
  resized(height: Int, quality: [Int!], version: [String], width: Int): ResizedImageUrl
  tileBaseURL: String
  tileFormat: String
  tileSize: Int
  title: String
  url(version: [String]): String
  versions: [String]
  width: Int
}

type ImageConnection {
  edges: [ImageEdge]
  pageCursors: PageCursors!
  pageInfo: PageInfo!
  totalCount: Int
}

type ImageEdge {
  cursor: String!
  node: Image
}

type ImageURLs {
  normalized: String
}

type InputAddress {
  addressLine1: String!
  addressLine2: String
  city: String!
  country: String!
  postalCode: String!
  region: String
}

type InputAddressFields {
  address: InputAddress
  lines: [String]
}

type InquirerCollectorProfile {
  artsyUserSince(format: String, timezone: String): String
  bio: String
  collectedArtworksCount: Int!
  collectorLevel: Int
  companyName: String
  companyWebsite: String
  confirmedBuyerAt(format: String, timezone: String): String
  email: String
  emailConfirmed: Boolean @deprecated(reason: "emailConfirmed is going to be removed, use isEmailConfirmed instead")
  firstNameLastInitial: String
  followedArtistsCount: Int!
  hasPartnerFollow: Boolean
  icon: Image
  id: ID!
  identityVerified: Boolean @deprecated(reason: "identityVerified is going to be removed, use isIdentityVerified instead")
  initials(length: Int = 3): String
  inquiryRequestsCount: Int!
  institutionalAffiliations: String
  intents: [String]
  interestsConnection(after: String, before: String, first: Int, last: Int): UserInterestConnection
  internalID: ID!
  isActiveBidder: Boolean
  isActiveInquirer: Boolean
  isEmailConfirmed: Boolean
  isIdentityVerified: Boolean
  isProfileComplete: Boolean
  lastUpdatePromptAt(format: String, timezone: String): String
  location: MyLocation
  loyaltyApplicantAt(format: String, timezone: String): String
  name: String
  otherRelevantPositions: String
  owner: User!
  ownerID: ID!
  partnerEngagement(partnerID: ID!): PartnerEngagement
  privacy: String
  profession: String
  professionalBuyerAppliedAt(format: String, timezone: String): String
  professionalBuyerAt(format: String, timezone: String): String
  savedArtworksCount: Int!
  selfReportedPurchases: String
  summaryParagraph(artworkID: String): String
  totalBidsCount: Int!
  userInterests: [UserInterest]! @deprecated(reason: "Use \"owner#interestsConnection\" field instead.")
}

union InquiryItemType = Artwork | Show

type InquiryQuestion {
  id: ID!
  internalID: ID!
  question: String!
}

input InquiryQuestionInput {
  details: String
  questionID: String!
}

type InquiryRequest {
  contactGallery: Boolean
  id: ID!
  inquireable: InquiryItemType
  inquirer: User
  internalID: ID!
  questions: [String]
  shippingLocation: Location
}

enum IntendedState {
  ACCEPTED
  REJECTED
  REVIEW
}

enum Intents {
  BUY_ART_AND_DESIGN
  FIND_ART_EXHIBITS
  LEARN_ABOUT_ART
  READ_ART_MARKET_NEWS
  RESEARCH_ART_PRICES
  SELL_ART_AND_DESIGN
}

type Invoice {
  currency: String!
  email: String
  externalNote: String
  id: ID!
  internalID: ID!
  lineItems: [InvoiceLineItem!]!
  name: String
  number: String!
  payments: [InvoicePayment!]!
  readyAt(format: String, timezone: String): String
  remaining(decimal: String = ".", disambiguate: Boolean = false, format: String = "%s%v", precision: Int = 0, symbol: String, thousand: String = ","): String
  remainingMinor: Int!
  state: InvoiceState!
}

type InvoiceLineItem {
  amount(decimal: String = ".", disambiguate: Boolean = false, format: String = "%s%v", precision: Int = 0, symbol: String, thousand: String = ","): String
  description: String!
  id: ID!
  internalID: ID!
  quantity: Int!
  subtotal(decimal: String = ".", disambiguate: Boolean = false, format: String = "%s%v", precision: Int = 0, symbol: String, thousand: String = ","): String
}

type InvoicePayment {
  amount(decimal: String = ".", disambiguate: Boolean = false, format: String = "%s%v", precision: Int = 0, symbol: String, thousand: String = ","): String
  createdAt(format: String, timezone: String): String
  creditCard: CreditCard
  id: ID!
  internalID: ID!
  successful: Boolean!
}

enum InvoiceState {
  CANCELED
  DRAFT
  PAID
  READY
}

scalar JSON

type Job {
  content: String!
  departmentName: String!
  externalURL: String!
  id: ID!
  location: String!
  teamName: String!
  title: String!
  updatedAt(format: String, timezone: String): String
}

enum LabelSignalEnum {
  CURATORS_PICK
  INCREASED_INTEREST
  PARTNER_OFFER
}

type LatLng {
  lat: Float
  lng: Float
}

enum LengthUnitPreference {
  CM
  IN
}

type LineItem {
  artwork: Artwork
  artworkOrEditionSet: ArtworkOrEditionSetType
  artworkVersion: ArtworkVersion
  currencyCode: String!
  id: ID!
  internalID: ID!
  listPrice: Money
  quantity: Int!
}

input LinkAuthenticationMutationInput {
  appleUid: String
  clientMutationId: String
  email: String
  idToken: String
  name: String
  oauthToken: String!
  provider: AuthenticationProvider!
}

type LinkAuthenticationMutationPayload {
  clientMutationId: String
  me: Me!
}

union ListPrice = Money | PriceRange

enum LiveAuctionRole {
  OPERATOR
  PARTICIPANT
}

type Location {
  address: String
  address2: String
  addressType: String
  booth: String
  cached: Int
  city: String
  coordinates: LatLng
  country: String
  dayScheduleText: String
  daySchedules: [DaySchedule]
  display: String
  displayCountry: String
  email: String
  euShippingLocation: Boolean
  floor: String
  hall: String
  id: ID!
  internalID: ID!
  openingHours: OpeningHoursUnion
  phone: String
  pier: String
  postalCode: String
  publiclyViewable: Boolean
  room: String
  section: String
  state: String
  summary: String
}

type LocationConnection {
  edges: [LocationEdge]
  pageCursors: PageCursors!
  pageInfo: PageInfo!
  totalCount: Int
}

type LocationEdge {
  cursor: String!
  node: Location
}

scalar Long

type Lot implements Node {
  id: ID!
  internalID: ID!
  lot: AuctionsLotState
  saleArtwork: SaleArtwork
  slug: ID!
}

type LotConnection {
  edges: [LotEdge]
  pageCursors: PageCursors!
  pageInfo: PageInfo!
  totalCount: Int
}

type LotEdge {
  cursor: String!
  node: Lot
}

type LotStanding {
  activeBid: BidderPosition
  bidder: Bidder
  isHighestBidder: Boolean
  isLeadingBidder: Boolean
  mostRecentBid: BidderPosition
  sale: Sale
  saleArtwork: SaleArtwork
}

type MarkAllNotificationsAsReadFailure {
  mutationError: GravityMutationError
}

input MarkAllNotificationsAsReadInput {
  clientMutationId: String
}

type MarkAllNotificationsAsReadPayload {
  clientMutationId: String
  responseOrError: MarkAllNotificationsAsReadResponseOrError
}

union MarkAllNotificationsAsReadResponseOrError = MarkAllNotificationsAsReadFailure | MarkAllNotificationsAsReadSuccess

type MarkAllNotificationsAsReadSuccess {
  me: Me!
  success: Boolean
}

type MarkNotificationAsReadFailure {
  mutationError: GravityMutationError
}

input MarkNotificationAsReadInput {
  clientMutationId: String
  id: String!
}

type MarkNotificationAsReadPayload {
  clientMutationId: String
  responseOrError: MarkNotificationAsReadResponseOrError
}

union MarkNotificationAsReadResponseOrError = MarkNotificationAsReadFailure | MarkNotificationAsReadSuccess

type MarkNotificationAsReadSuccess {
  me: Me!
  success: Boolean
}

type MarkNotificationsAsSeenFailure {
  mutationError: GravityMutationError
}

input MarkNotificationsAsSeenInput {
  clientMutationId: String
  until: String!
}

type MarkNotificationsAsSeenPayload {
  clientMutationId: String
  responseOrError: MarkNotificationsAsSeenResponseOrError
}

union MarkNotificationsAsSeenResponseOrError = MarkNotificationsAsSeenFailure | MarkNotificationsAsSeenSuccess

type MarkNotificationsAsSeenSuccess {
  me: Me!
  success: Boolean
}

type MarkdownContent {
  content(format: Format): String
}

type MarketPriceInsights {
  annualLotsSold: Int
  annualValueSoldCents: BigInt
  artistId: ID
  artistName: String
  artsyQInventory: Int
  createdAt: ISO8601DateTime
  demandRank: Float
  demandTrend: Float
  highRangeCents: BigInt
  id: ID!
  largeHighRangeCents: BigInt
  largeLowRangeCents: BigInt
  largeMidRangeCents: BigInt
  lastAuctionResultDate: ISO8601DateTime
  liquidityRank: Float
  lotsSoldLast12Months: Int
  lotsSoldLast24Months: Int
  lotsSoldLast36Months: Int
  lotsSoldLast48Months: Int
  lotsSoldLast60Months: Int
  lotsSoldLast72Months: Int
  lotsSoldLast84Months: Int
  lotsSoldLast96Months: Int
  lowRangeCents: BigInt
  medianSaleOverEstimatePercentage: Int
  medianSalePriceLast36Months: BigInt
  medianSalePriceLast96Months: BigInt
  medianSaleToEstimateRatio: Float
  medium: String
  mediumHighRangeCents: BigInt
  mediumLowRangeCents: BigInt
  mediumMidRangeCents: BigInt
  midRangeCents: BigInt
  sellThroughRate: Float
  smallHighRangeCents: BigInt
  smallLowRangeCents: BigInt
  smallMidRangeCents: BigInt
  updatedAt: ISO8601DateTime
}

type MarketPriceInsightsConnection {
  edges: [MarketPriceInsightsEdge]
  nodes: [MarketPriceInsights]
  pageCursors: PageCursors
  pageInfo: AnalyticsPageInfo!
  totalCount: Int
  totalPages: Int
}

type MarketPriceInsightsEdge {
  cursor: String!
  node: MarketPriceInsights
}

type MarketingCollection implements Node {
  artistIds: [String]
  artworkIds: [String]
  artworksConnection(acquireable: Boolean, additionalGeneIDs: [String], after: String, aggregationPartnerCities: [String], aggregations: [ArtworkAggregation], artistID: String, artistIDs: [String], artistNationalities: [String], artistSeriesID: String, artistSeriesIDs: [String], artworkIDs: [String], atAuction: Boolean, attributionClass: [String], availability: String, before: String, categories: [String], color: String, colors: [String], dimensionRange: String, disableNotForSaleSorting: Boolean, excludeArtworkIDs: [String], extraAggregationGeneIDs: [String], first: Int, forSale: Boolean, framed: Boolean, geneID: String, geneIDs: [String], height: String, importSources: [String], includeAllJSON: Boolean, includeArtworksByFollowedArtists: Boolean, includeMediumFilterInAggregation: Boolean, includeUnpublished: Boolean, input: FilterArtworksInput, inquireableOnly: Boolean, keyword: String, keywordMatchExact: Boolean, last: Int, locationCities: [String], majorPeriods: [String], marketable: Boolean, marketingCollectionID: String, materialsTerms: [String], medium: String, offerable: Boolean, page: Int, partnerCities: [String], partnerID: ID, partnerIDs: [String], period: String, periods: [String], priceRange: String, published: Boolean, saleID: ID, showID: String, signed: Boolean, size: Int, sizes: [ArtworkSizes], sold: Boolean, sort: String, tagID: String, visibilityLevel: String, width: String): FilterArtworksConnection
  category: String!
  createdAt(format: String, timezone: String): String
  credit: String
  description: String @deprecated(reason: "Use `markdownDescription` field instead")
  descriptionMarkdown: String @deprecated(reason: "Use `markdownDescription` field instead")
  featuredArtistExclusionIds: [String!]!
  geneIds: [String]
  headerImage: String
  id: ID!
  internalID: ID!
  isDepartment: Boolean!
  isFeaturedArtistContent: Boolean!
  keyword: String
  linkedCollections: [MarketingCollectionGroup!]!
  markdownDescription(format: Format): String
  priceGuidance: Float
  query: MarketingCollectionQuery!
  relatedCollections(size: Int = 10): [MarketingCollection!]!
  representativeArtworkID: String
  showFeaturedArtists: Boolean!
  showHeaderArtworksRail: Boolean!
  slug: String!
  thumbnail: String
  thumbnailImage: Image
  title: String!
  updatedAt(format: String, timezone: String): String
}

type MarketingCollectionCategory {
  collections: [MarketingCollection!]!
  name: String!
}

type MarketingCollectionConnection {
  edges: [MarketingCollectionEdge]
  pageCursors: PageCursors!
  pageInfo: PageInfo!
  totalCount: Int
}

type MarketingCollectionEdge {
  cursor: String!
  node: MarketingCollection
}

type MarketingCollectionGroup {
  groupType: MarketingCollectionGroupTypeEnum!
  internalID: ID!
  members: [MarketingCollection!]!
  name: String!
}

enum MarketingCollectionGroupTypeEnum {
  ArtistSeries
  FeaturedCollections
  OtherCollections
}

type MarketingCollectionQuery {
  artistIDs: [String]
  geneIDs: [String]
  id: String
  internalID: ID
  keyword: String
  tagID: String
}

enum MarketingCollectionsSorts {
  CREATED_AT_ASC
  CREATED_AT_DESC
  CURATED
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}

union Match = Article | Artist | Artwork | Fair | Feature | Gene | Page | Profile | Sale | Show | Tag

type MatchArtworkImportArtistsFailure {
  mutationError: GravityMutationError
}

input MatchArtworkImportArtistsInput {
  artworkImportID: String!
  clientMutationId: String
}

type MatchArtworkImportArtistsPayload {
  clientMutationId: String
  matchArtworkImportArtistsOrError: MatchArtworkImportArtistsResponseOrError
}

union MatchArtworkImportArtistsResponseOrError = MatchArtworkImportArtistsFailure | MatchArtworkImportArtistsSuccess

type MatchArtworkImportArtistsSuccess {
  artworkImport: ArtworkImport
  artworkImportID: String!
  matched: Int!
  unmatched: Int!
}

type MatchArtworkImportRowImageFailure {
  mutationError: GravityMutationError
}

input MatchArtworkImportRowImageInput {
  artworkImportID: String!
  clientMutationId: String
  fileName: String!
  rowID: String
  s3Bucket: String!
  s3Key: String!
}

type MatchArtworkImportRowImagePayload {
  clientMutationId: String
  matchArtworkImportRowImageOrError: MatchArtworkImportRowImageResponseOrError
}

union MatchArtworkImportRowImageResponseOrError = MatchArtworkImportRowImageFailure | MatchArtworkImportRowImageSuccess

type MatchArtworkImportRowImageSuccess {
  artworkImport: ArtworkImport
  success: Boolean!
}

type MatchConnection {
  edges: [MatchEdge]
  pageCursors: PageCursors!
  pageInfo: PageInfo!
  totalCount: Int
}

type MatchEdge {
  cursor: String!
  node: Match
}

type Me implements Node {
  addressConnection(after: String, before: String, first: Int, last: Int): UserAddressConnection
  alert(id: String!): Alert
  alertsConnection(after: String, attributes: PreviewSavedSearchAttributes, before: String, first: Int, last: Int, sort: AlertsConnectionSortEnum): AlertConnection!
  artistRecommendations(after: String, before: String, first: Int, last: Int, page: Int): ArtistConnection
  artworkInquiriesConnection(after: String, before: String, first: Int, last: Int): ArtworkInquiryConnection
  artworkRecommendations(after: String, before: String, first: Int, last: Int, page: Int): ArtworkConnection
  auctionResultsByFollowedArtists(after: String, allowEmptyCreatedDates: Boolean = true, before: String, categories: [String], earliestCreatedYear: Int, first: Int, last: Int, latestCreatedYear: Int, organizations: [String], recordsTrusted: Boolean = false, sizes: [ArtworkSizes], sort: AuctionResultSorts, state: AuctionResultsState = ALL): AuctionResultConnection
  auctionSegmentation: AuctionSegmentationType
  auctionsLotStandingConnection(after: String, before: String, first: Int, last: Int): AuctionsLotStandingConnection!
  authentications: [AuthenticationType!]!
  bankAccounts(after: String, before: String, first: Int, last: Int, type: BankAccountTypes): BankAccountConnection
  bidderPosition(id: String!): BidderPositionResult
  bidderPositions(artworkID: String, current: Boolean, saleID: String): [BidderPosition]
  bidderStatus(artworkID: String!, saleID: String!): LotStanding
  bidders(active: Boolean, saleID: String): [Bidder]
  bio: String
  canRequestEmailConfirmation: Boolean!
  collection(id: String!): Collection
  collectionsConnection(after: String, before: String, default: Boolean, first: Int, includesArtworkID: String, last: Int, page: Int, saves: Boolean, size: Int, sort: CollectionSorts): CollectionsConnection
  collectorLevel: Int
  collectorProfile: CollectorProfileType
  confirmationToken(id: String!): ConfirmationToken
  conversation(id: String!): Conversation
  conversationsConnection(after: String, artistId: String, before: String, dismissed: Boolean, first: Int, fromId: String, hasMessage: Boolean, hasReply: Boolean, last: Int, partnerId: String, toBeReplied: Boolean, type: ConversationsInputMode = USER): ConversationConnection
  counts: MeCounts
  createdAt(format: String, timezone: String): String
  creditCards(after: String, before: String, first: Int, last: Int): CreditCardConnection
  currencyPreference: CurrencyPreference!
  email: String
  emailConfirmed: Boolean! @deprecated(reason: "emailConfirmed is going to be removed, use isEmailConfirmed instead")
  emailFrequency: String
  followsAndSaves: FollowsAndSaves
  hasCreditCards: Boolean
  hasPassword: Boolean!
  hasPriceRange: Boolean!
  hasQualifiedCreditCards: Boolean
  hasSecondFactorEnabled: Boolean!
  hasStaleArtworkBudget: Boolean!
  icon: Image
  id: ID!
  identityVerification(id: String!): IdentityVerification
  identityVerified: Boolean @deprecated(reason: "identityVerified is going to be removed, use isIdentityVerified instead")
  initials(length: Int = 3): String
  inquiryIntroduction: String
  internalID: ID!
  isCollector: Boolean!
  isEmailConfirmed: Boolean!
  isIdentityVerified: Boolean
  labFeatures: [String!]!
  lengthUnitPreference: LengthUnitPreference!
  location: MyLocation
  lotStanding(artworkID: String, saleArtworkID: String, saleID: String): LotStanding
  lotStandings(activePositions: Boolean, artworkID: String, live: Boolean, saleArtworkID: String, saleID: String): [LotStanding]
  lotsByFollowedArtistsConnection(after: String, aggregations: [SaleArtworkAggregation], artistIDs: [String], before: String, biddableSale: Boolean, estimateRange: String, excludeClosedLots: Boolean, first: Int, geneIDs: [String], includeArtworksByFollowedArtists: Boolean, isAuction: Boolean, last: Int, liveSale: Boolean, marketable: Boolean, page: Int, saleID: ID, saleSlug: String, size: Int, sort: String, userId: String): SaleArtworksConnection
  myBids: MyBids
  myCollectionAuctionResults(after: String, allowEmptyCreatedDates: Boolean = true, before: String, categories: [String], earliestCreatedYear: Int, first: Int, last: Int, latestCreatedYear: Int, organizations: [String], recordsTrusted: Boolean = false, sizes: [ArtworkSizes], sort: AuctionResultSorts, state: AuctionResultsState = ALL): AuctionResultConnection
  myCollectionConnection(after: String, artistIDs: [String!], before: String, excludePurchasedArtworks: Boolean = false, first: Int, includeOnlyTargetSupply: Boolean = false, last: Int, page: Int, size: Int, sort: MyCollectionArtworkSorts, sortByLastAuctionResultDate: Boolean = false): MyCollectionConnection
  myCollectionInfo: MyCollectionInfo
  name: String
  newWorksByInterestingArtists(after: String, before: String, first: Int, last: Int, page: Int): ArtworkConnection
  newWorksFromGalleriesYouFollowConnection(after: String, before: String, first: Int, last: Int): ArtworkConnection
  notification(id: String!): Notification
  order(id: ID!): Order
  orders(after: String, before: String, first: Int, last: Int, mode: CommerceOrderModeEnum, sellerId: String, sort: CommerceOrderConnectionSortEnum, states: [CommerceOrderStateEnum!]): CommerceOrderConnectionWithTotalCount
  otherRelevantPosition: String @deprecated(reason: "Use `otherRelevantPositions` instead")
  otherRelevantPositions: String
  paddleNumber: String
  partnerOffersConnection(after: String, artworkID: String, before: String, first: Int, last: Int, page: Int, size: Int, sort: PartnerOfferToCollectorSorts): PartnerOfferToCollectorConnection
  partners(size: Int): [Partner]
  pendingIdentityVerification: IdentityVerification
  phone: String
  phoneNumber: PhoneNumberType
  pricePreference: Float
  priceRange: String
  priceRangeMax: Float
  priceRangeMin: Float
  privacy: String
  profession: String
  quiz: Quiz!
  receiveLotOpeningSoonNotification: Boolean
  receiveNewSalesNotification: Boolean
  receiveNewWorksNotification: Boolean
  receiveOrderNotification: Boolean
  receiveOutbidNotification: Boolean
  receivePartnerOfferNotification: Boolean
  receivePartnerShowNotification: Boolean
  receivePromotionNotification: Boolean
  receivePurchaseNotification: Boolean
  receiveSaleOpeningClosingNotification: Boolean
  receiveViewingRoomNotification: Boolean
  recentlyViewedArtworkIds: [String]!
  recentlyViewedArtworksConnection(after: String, before: String, first: Int, last: Int): ArtworkConnection
  recommendedArtworks(after: String, before: String, first: Int, last: Int, page: Int): ArtworkConnection @deprecated(reason: "These genomic recs are deprecated. Use artworkRecommendations instead.")
  saleRegistrationsConnection(after: String, auctionState: AuctionState, before: String, first: Int, ids: [String], isAuction: Boolean = true, last: Int, live: Boolean = true, published: Boolean = true, registered: Boolean, sort: SaleSorts, term: String): SaleRegistrationConnection
  secondFactors(kinds: [SecondFactorKind]): [SecondFactor]
  shareFollows: Boolean!
  showsByFollowedArtists(after: String, before: String, first: Int, last: Int, sort: ShowSorts = CREATED_AT_DESC, status: EventStatus = CURRENT): ShowConnection
  showsConnection(after: String, before: String, first: Int, includeShowsNearIpBasedLocation: Boolean = false, ip: String, last: Int, near: Near, sort: ShowSorts = CREATED_AT_DESC, status: EventStatus = CURRENT): ShowConnection
  similarToRecentlyViewedConnection(after: String, before: String, first: Int, last: Int): ArtworkConnection
  submissionsConnection(after: String, before: String, first: Int, last: Int, states: [ArtworkConsignmentSubmissionState]): ArtworkConsignmentSubmissionConnection
  tasks(limit: Int): [Task]
  type: String
  unreadConversationCount: Int!
  unreadNotificationsCount: Int!
  unseenNotificationsCount: Int!
  userInterest(id: String): UserInterest
  userInterestsConnection(after: String, before: String, category: UserInterestCategory, first: Int, interestID: String, interestType: UserInterestInterestType, last: Int, page: Int, size: Int): UserInterestConnection
  watchedLotConnection(after: String, before: String, first: Int, last: Int): LotConnection
}

type MeCounts {
  followedArtists: Int!
  followedProfiles: Int!
  savedArtworks: Int!
  savedSearches: Int!
}

type MergeArtistsFailure {
  mutationError: GravityMutationError
}

input MergeArtistsFieldOverrides {
  birthday: ID
  deathday: ID
  gender: ID
  hometown: ID
  location: ID
  nationality: ID
}

input MergeArtistsMutationInput {
  badIds: [String!]!
  clientMutationId: String
  goodId: String!
  overrides: MergeArtistsFieldOverrides
}

type MergeArtistsMutationPayload {
  clientMutationId: String
  mergeArtistsResponseOrError: MergeArtistsResponseOrError
}

union MergeArtistsResponseOrError = MergeArtistsFailure | MergeArtistsSuccess

type MergeArtistsSuccess {
  artist: Artist
}

type Message implements Node {
  attachments: [Attachment]
  body: String
  cc: [String!]!
  createdAt(format: String, timezone: String): String
  deliveries: [Delivery]
  from: MessageInitiator
  id: ID!
  impulseID: String! @deprecated(reason: "Prefer internalID")
  internalID: ID!
  isFirstMessage: Boolean
  isFromUser: Boolean
  isMessageSentOnPlatform: Boolean
  sentAt(format: String, timezone: String): String
  to: [String!]!
}

type MessageConnection {
  edges: [MessageEdge]
  pageInfo: PageInfo!
  totalCount: Int
}

type MessageEdge {
  cursor: String!
  node: Message
}

type MessageInitiator {
  email: String
  name: String
}

union MessageOrConversationEventType = ConversationEvent | Message

type MessageOrConversationEventTypeConnection {
  edges: [MessageOrConversationEventTypeEdge]
  pageCursors: PageCursors!
  pageInfo: PageInfo!
  totalCount: Int
}

type MessageOrConversationEventTypeEdge {
  cursor: String!
  node: MessageOrConversationEventType
}

type MetaphysicsService {
  environment: String!
  queryTracing: Boolean!
  stitching: Boolean!
  stitchingConvection: Boolean!
  stitchingExchange: Boolean!
  stitchingGravity: Boolean!
}

type Money {
  amount: String
  currencyCode: String!
  currencyPrefix: String
  currencySymbol: String
  display: String
  major(convertTo: String): Float!
  minor: Long!
}

type Mutation {
  acceptPartnerAgreement(input: AcceptPartnerAgreementInput!): AcceptPartnerAgreementPayload
  ackTask(input: AckTaskMutationInput!): AckTaskMutationPayload
  addArtworkToPartnerShow(input: AddArtworkToPartnerShowMutationInput!): AddArtworkToPartnerShowMutationPayload
  addAssetToConsignmentSubmission(input: AddAssetToConsignmentSubmissionInput!): AddAssetToConsignmentSubmissionPayload
  addAssetsToConsignmentSubmission(input: AddAssetsToConsignmentSubmissionInput!): AddAssetsToConsignmentSubmissionPayload
  addInstallShotToPartnerShow(input: AddInstallShotToPartnerShowMutationInput!): AddInstallShotToPartnerShowMutationPayload
  addOrderedSetItem(input: addOrderedSetItemMutationInput!): addOrderedSetItemMutationPayload
  addUserRole(input: addUserRoleMutationInput!): addUserRoleMutationPayload
  addUserToSubmission(input: AddUserToSubmissionMutationInput!): AddUserToSubmissionMutationPayload
  adminCreateFeatureFlag(input: AdminCreateFeatureFlagInput!): AdminCreateFeatureFlagPayload
  adminDeleteFeatureFlag(input: AdminDeleteFeatureFlagInput!): AdminDeleteFeatureFlagPayload
  adminToggleFeatureFlag(input: AdminToggleFeatureFlagInput!): AdminToggleFeatureFlagPayload
  adminUpdateFeatureFlag(input: AdminUpdateFeatureFlagInput!): AdminUpdateFeatureFlagPayload
  artsyShippingOptIn(input: ArtsyShippingOptInMutationInput!): ArtsyShippingOptInMutationPayload
  artworksCollectionsBatchUpdate(input: ArtworksCollectionsBatchUpdateInput!): ArtworksCollectionsBatchUpdatePayload
  assignArtworkImportArtist(input: AssignArtworkImportArtistInput!): AssignArtworkImportArtistPayload
  bulkAddArtworksToShow(input: BulkAddArtworksToShowMutationInput!): BulkAddArtworksToShowMutationPayload
  bulkUpdateArtworksMetadata(input: BulkUpdateArtworksMetadataMutationInput!): BulkUpdateArtworksMetadataMutationPayload
  cancelArtworkImport(input: CancelArtworkImportInput!): CancelArtworkImportPayload
  commerceAddInitialOfferToOrder(input: CommerceAddInitialOfferToOrderInput!): CommerceAddInitialOfferToOrderPayload
  commerceApproveOrder(input: CommerceApproveOrderInput!): CommerceApproveOrderPayload
  commerceBuyerAcceptOffer(input: CommerceBuyerAcceptOfferInput!): CommerceBuyerAcceptOfferPayload
  commerceBuyerCounterOffer(input: CommerceBuyerCounterOfferInput!): CommerceBuyerCounterOfferPayload
  commerceBuyerRejectOffer(input: CommerceBuyerRejectOfferInput!): CommerceBuyerRejectOfferPayload
  commerceConfirmFulfillment(input: CommerceConfirmFulfillmentInput!): CommerceConfirmFulfillmentPayload
  commerceConfirmPickup(input: CommerceConfirmPickupInput!): CommerceConfirmPickupPayload
  commerceCreateBankDebitSetupForOrder(input: CommerceCreateBankDebitSetupForOrderInput!): CommerceCreateBankDebitSetupForOrderPayload
  commerceCreateInquiryOfferOrderWithArtwork(input: CommerceCreateInquiryOfferOrderWithArtworkInput!): CommerceCreateInquiryOfferOrderWithArtworkPayload
  commerceCreateInquiryOrderWithArtwork(input: CommerceCreateInquiryOrderWithArtworkInput!): CommerceCreateInquiryOrderWithArtworkPayload
  commerceCreateOfferOrderWithArtwork(input: CommerceCreateOfferOrderWithArtworkInput!): CommerceCreateOfferOrderWithArtworkPayload
  commerceCreateOrderWithArtwork(input: CommerceCreateOrderWithArtworkInput!): CommerceCreateOrderWithArtworkPayload
  commerceCreatePartnerOfferOrder(input: CommerceCreatePartnerOfferOrderInput!): CommerceCreatePartnerOfferOrderPayload
  commerceFixFailedPayment(input: CommerceFixFailedPaymentInput!): CommerceFixFailedPaymentPayload
  commerceFulfillAtOnce(input: CommerceFulfillAtOnceInput!): CommerceFulfillAtOncePayload
  commerceOptIn(input: CommerceOptInMutationInput!): CommerceOptInMutationPayload
  commerceOptInReport(input: CommerceOptInReportMutationInput!): CommerceOptInReportMutationPayload
  commerceSelectShippingOption(input: CommerceSelectShippingOptionInput!): CommerceSelectShippingOptionPayload
  commerceSellerAcceptOffer(input: CommerceSellerAcceptOfferInput!): CommerceSellerAcceptOfferPayload
  commerceSellerAcceptProvisionalOffer(input: CommerceSellerAcceptProvisionalOfferInput!): CommerceSellerAcceptProvisionalOfferPayload
  commerceSellerCounterOffer(input: CommerceSellerCounterOfferInput!): CommerceSellerCounterOfferPayload
  commerceSellerRejectOffer(input: CommerceSellerRejectOfferInput!): CommerceSellerRejectOfferPayload
  commerceSetPayment(input: CommerceSetPaymentInput!): CommerceSetPaymentPayload
  commerceSetPaymentByStripeIntent(input: CommerceSetPaymentByStripeIntentInput!): CommerceSetPaymentByStripeIntentPayload
  commerceSetShipping(input: CommerceSetShippingInput!): CommerceSetShippingPayload
  commerceSubmitOrder(input: CommerceSubmitOrderInput!): CommerceSubmitOrderPayload
  commerceSubmitOrderWithOffer(input: CommerceSubmitOrderWithOfferInput!): CommerceSubmitOrderWithOfferPayload
  commerceSubmitPendingOffer(input: CommerceSubmitPendingOfferInput!): CommerceSubmitPendingOfferPayload
  commerceUpdateImpulseConversationId(input: CommerceUpdateImpulseConversationIdInput!): CommerceUpdateImpulseConversationIdPayload
  confirmPassword(input: ConfirmPasswordInput!): ConfirmPasswordPayload
  convectionCreateConsignmentSubmission(input: CreateSubmissionMutationInput!): CreateSubmissionMutationPayload
  createAccountRequest(input: CreateAccountRequestMutationInput!): CreateAccountRequestMutationPayload
  createAlert(input: createAlertInput!): createAlertPayload
  createAndSendBackupSecondFactor(input: CreateAndSendBackupSecondFactorInput!): CreateAndSendBackupSecondFactorPayload
  createAppSecondFactor(input: CreateAppSecondFactorInput!): CreateAppSecondFactorPayload
  createArtist(input: CreateArtistMutationInput!): CreateArtistMutationPayload
  createArtwork(input: CreateArtworkMutationInput!): CreateArtworkMutationPayload
  createArtworkImport(input: CreateArtworkImportInput!): CreateArtworkImportPayload
  createArtworkImportArtworks(input: CreateArtworkImportArtworksInput!): CreateArtworkImportArtworksPayload
  createBackupSecondFactors(input: CreateBackupSecondFactorsInput!): CreateBackupSecondFactorsPayload
  createBankDebitSetup(input: CreateBankDebitSetupInput!): CreateBankDebitSetupPayload
  createBidder(input: CreateBidderInput!): CreateBidderPayload
  createBidderPosition(input: BidderPositionInput!): BidderPositionPayload
  createCanonicalArtist(input: CreateCanonicalArtistMutationInput!): CreateCanonicalArtistMutationPayload
  createCareerHighlight(input: CreateCareerHighlightInput!): CreateCareerHighlightPayload
  createCollection(input: createCollectionInput!): createCollectionPayload
  createConsignmentInquiry(input: CreateConsignmentInquiryMutationInput!): CreateConsignmentInquiryMutationPayload
  createConsignmentOffer(input: CreateOfferMutationInput!): CreateOfferMutationPayload
  createConsignmentOfferResponse(input: CreateOfferResponseMutationInput!): CreateOfferResponseMutationPayload
  createConsignmentSubmission(input: CreateSubmissionMutationInput!): CreateSubmissionMutationPayload
  createCreditCard(input: CreditCardInput!): CreditCardPayload
  createFeature(input: CreateFeatureMutationInput!): CreateFeatureMutationPayload
  createFeaturedLink(input: CreateFeaturedLinkMutationInput!): CreateFeaturedLinkMutationPayload
  createGeminiEntryForAsset(input: CreateGeminiEntryForAssetInput!): CreateGeminiEntryForAssetPayload
  createHeroUnit(input: CreateHeroUnitMutationInput!): CreateHeroUnitMutationPayload
  createIdentityVerificationOverride(input: CreateIdentityVerificationOverrideMutationInput!): CreateIdentityVerificationOverrideMutationPayload
  createImage(input: CreateImageInput!): CreateImagePayload
  createInquiryOfferOrder(input: CommerceCreateInquiryOfferOrderWithArtworkInput!): CommerceCreateInquiryOfferOrderWithArtworkPayload
  createInquiryOrder(input: CommerceCreateInquiryOrderWithArtworkInput!): CommerceCreateInquiryOrderWithArtworkPayload
  createInvoicePayment(input: CreateInvoicePaymentInput!): CreateInvoicePaymentPayload
  createOrderedSet(input: CreateOrderedSetMutationInput!): CreateOrderedSetMutationPayload
  createPage(input: CreatePageMutationInput!): CreatePageMutationPayload
  createPartnerArtistDocument(input: CreatePartnerArtistDocumentMutationInput!): CreatePartnerArtistDocumentMutationPayload
  createPartnerContact(input: CreatePartnerContactInput!): CreatePartnerContactPayload
  createPartnerLocation(input: CreatePartnerLocationInput!): CreatePartnerLocationPayload
  createPartnerLocationDaySchedules(input: CreatePartnerLocationDaySchedulesInput!): CreatePartnerLocationDaySchedulesPayload
  createPartnerOffer(input: createPartnerOfferMutationInput!): createPartnerOfferMutationPayload
  createPartnerShow(input: CreatePartnerShowMutationInput!): CreatePartnerShowMutationPayload
  createPartnerShowDocument(input: CreatePartnerShowDocumentMutationInput!): CreatePartnerShowDocumentMutationPayload
  createPartnerShowEvent(input: CreatePartnerShowEventMutationInput!): CreatePartnerShowEventMutationPayload
  createPurchase(input: createPurchaseInput!): createPurchasePayload
  createSaleAgreement(input: CreateSaleAgreementMutationInput!): CreateSaleAgreementMutationPayload
  createSmsSecondFactor(input: CreateSmsSecondFactorInput!): CreateSmsSecondFactorPayload
  createUserAddress(input: CreateUserAddressInput!): CreateUserAddressPayload
  createUserAdminNote(input: createUserAdminNoteMutationInput!): createUserAdminNoteMutationPayload
  createUserInterest(input: CreateUserInterestMutationInput!): CreateUserInterestMutationPayload
  createUserInterestForUser(input: CreateUserInterestForUserInput!): CreateUserInterestForUserPayload
  createUserInterests(input: CreateUserInterestsMutationInput!): CreateUserInterestsMutationPayload
  createUserSaleProfile(input: CreateUserSaleProfileMutationInput!): CreateUserSaleProfileMutationPayload
  createUserSeenArtwork(input: CreateUserSeenArtworkInput!): CreateUserSeenArtworkPayload
  createVerifiedRepresentative(input: CreateVerifiedRepresentativeInput!): CreateVerifiedRepresentativePayload
  createViewingRoom(input: CreateViewingRoomInput!): CreateViewingRoomPayload
  deleteAlert(input: deleteAlertInput!): deleteAlertPayload
  deleteArtist(input: DeleteArtistInput!): DeleteArtistPayload
  deleteArtwork(input: DeleteArtworkMutationInput!): DeleteArtworkMutationPayload
  deleteArtworkImage(input: DeleteArtworkImageInput!): DeleteArtworkImagePayload
  deleteBankAccount(input: DeleteBankAccountInput!): DeleteBankAccountPayload
  deleteCareerHighlight(input: DeleteCareerHighlightInput!): DeleteCareerHighlightPayload
  deleteCollection(input: deleteCollectionInput!): deleteCollectionPayload
  deleteConversation(input: DeleteConversationMutationInput!): DeleteConversationMutationPayload
  deleteCreditCard(input: DeleteCreditCardInput!): DeleteCreditCardPayload
  deleteFeature(input: DeleteFeatureMutationInput!): DeleteFeatureMutationPayload
  deleteFeaturedLink(input: DeleteFeaturedLinkMutationInput!): DeleteFeaturedLinkMutationPayload
  deleteHeroUnit(input: deleteHeroUnitMutationInput!): deleteHeroUnitMutationPayload
  deleteMyAccountMutation(input: DeleteAccountInput!): DeleteAccountPayload
  deleteMyUserProfileIcon(input: DeleteUserIconInput!): DeleteUserIconPayload
  deleteOrderedSet(input: deleteOrderedSetMutationInput!): deleteOrderedSetMutationPayload
  deleteOrderedSetItem(input: deleteOrderedSetItemMutationInput!): deleteOrderedSetItemMutationPayload
  deletePage(input: DeletePageMutationInput!): DeletePageMutationPayload
  deletePartnerArtist(input: DeletePartnerArtistMutationInput!): DeletePartnerArtistMutationPayload
  deletePartnerArtistDocument(input: DeletePartnerArtistDocumentMutationInput!): DeletePartnerArtistDocumentMutationPayload
  deletePartnerContact(input: DeletePartnerContactMutationInput!): DeletePartnerContactMutationPayload
  deletePartnerLocation(input: DeletePartnerLocationMutationInput!): DeletePartnerLocationMutationPayload
  deletePartnerShow(input: DeletePartnerShowMutationInput!): DeletePartnerShowMutationPayload
  deletePartnerShowDocument(input: DeletePartnerShowDocumentMutationInput!): DeletePartnerShowDocumentMutationPayload
  deletePartnerShowEvent(input: DeletePartnerShowEventMutationInput!): DeletePartnerShowEventMutationPayload
  deletePurchase(input: deletePurchaseInput!): deletePurchasePayload
  deleteUser(input: DeleteUserInput!): DeleteUserPayload
  deleteUserAddress(input: DeleteUserAddressInput!): DeleteUserAddressPayload
  deleteUserAdminNote(input: deleteUserAdminNoteMutationInput!): deleteUserAdminNoteMutationPayload
  deleteUserInterest(input: DeleteUserInterestMutationInput!): DeleteUserInterestMutationPayload
  deleteUserInterestForUser(input: DeleteUserInterestForUserInput!): DeleteUserInterestForUserPayload
  deleteUserInterests(input: DeleteUserInterestsMutationInput!): DeleteUserInterestsMutationPayload
  deleteUserRole(input: deleteUserRoleMutationInput!): deleteUserRoleMutationPayload
  deleteVerifiedRepresentative(input: DeleteVerifiedRepresentativeMutationInput!): DeleteVerifiedRepresentativeMutationPayload
  deleteViewingRoom(input: DeleteViewingRoomInput!): DeleteViewingRoomPayload
  deliverSecondFactor(input: DeliverSecondFactorInput!): DeliverSecondFactorPayload
  disableSecondFactor(input: DisableSecondFactorInput!): DisableSecondFactorPayload
  dislikeArtwork(input: DislikeArtworkInput!): DislikeArtworkPayload
  dismissTask(input: DismissTaskMutationInput!): DismissTaskMutationPayload
  enableSecondFactor(input: EnableSecondFactorInput!): EnableSecondFactorPayload
  endSale(input: EndSaleInput!): EndSalePayload
  excludeArtistFromDiscovery(input: ExcludeArtistFromDiscoveryInput!): ExcludeArtistFromDiscoveryPayload
  flagArtworkImportCell(input: FlagArtworkImportCellInput!): FlagArtworkImportCellPayload
  followArtist(input: FollowArtistInput!): FollowArtistPayload
  followGene(input: FollowGeneInput!): FollowGenePayload
  followProfile(input: FollowProfileInput!): FollowProfilePayload
  followShow(input: FollowShowInput!): FollowShowPayload
  linkAuthentication(input: LinkAuthenticationMutationInput!): LinkAuthenticationMutationPayload
  markAllNotificationsAsRead(input: MarkAllNotificationsAsReadInput!): MarkAllNotificationsAsReadPayload
  markNotificationAsRead(input: MarkNotificationAsReadInput!): MarkNotificationAsReadPayload
  markNotificationsAsSeen(input: MarkNotificationsAsSeenInput!): MarkNotificationsAsSeenPayload
  matchArtworkImportArtists(input: MatchArtworkImportArtistsInput!): MatchArtworkImportArtistsPayload
  matchArtworkImportRowImage(input: MatchArtworkImportRowImageInput!): MatchArtworkImportRowImagePayload
  mergeArtists(input: MergeArtistsMutationInput!): MergeArtistsMutationPayload
  myCollectionCreateArtwork(input: MyCollectionCreateArtworkInput!): MyCollectionCreateArtworkPayload
  myCollectionDeleteArtwork(input: MyCollectionDeleteArtworkInput!): MyCollectionDeleteArtworkPayload
  myCollectionUpdateArtwork(input: MyCollectionUpdateArtworkInput!): MyCollectionUpdateArtworkPayload
  publishViewingRoom(input: PublishViewingRoomInput!): PublishViewingRoomPayload
  recordArtworkView(input: RecordArtworkViewInput!): RecordArtworkViewPayload
  removeArtworkFromPartnerShow(input: RemoveArtworkFromPartnerShowMutationInput!): RemoveArtworkFromPartnerShowMutationPayload
  removeArtworkImportImage(input: RemoveArtworkImportImageInput!): RemoveArtworkImportImagePayload
  removeAssetFromConsignmentSubmission(input: RemoveAssetFromConsignmentSubmissionInput!): RemoveAssetFromConsignmentSubmissionPayload
  removeInstallShotFromPartnerShow(input: RemoveInstallShotFromPartnerShowMutationInput!): RemoveInstallShotFromPartnerShowMutationPayload
  repositionArtworksInPartnerShow(input: RepositionArtworksInPartnerShowMutationInput!): RepositionArtworksInPartnerShowMutationPayload
  repositionInstallShotsInPartnerShow(input: RepositionInstallShotsInPartnerShowMutationInput!): RepositionInstallShotsInPartnerShowMutationPayload
  repositionPartnerArtistArtworks(input: RepositionPartnerArtistArtworksMutationInput!): RepositionPartnerArtistArtworksMutationPayload
  repositionPartnerLocations(input: RepositionPartnerLocationsMutationInput!): RepositionPartnerLocationsMutationPayload
  requestConditionReport(input: RequestConditionReportInput!): RequestConditionReportPayload
  requestCredentialsForAssetUpload(input: RequestCredentialsForAssetUploadInput!): RequestCredentialsForAssetUploadPayload
  requestPriceEstimate(input: RequestPriceEstimateInput!): RequestPriceEstimatePayload
  saveArtwork(input: SaveArtworkInput!): SaveArtworkPayload
  sendConfirmationEmail(input: SendConfirmationEmailMutationInput!): SendConfirmationEmailMutationPayload
  sendConversationMessage(input: SendConversationMessageMutationInput!): SendConversationMessageMutationPayload
  sendFeedback(input: SendFeedbackMutationInput!): SendFeedbackMutationPayload
  sendIdentityVerificationEmail(input: SendIdentityVerificationEmailMutationInput!): SendIdentityVerificationEmailMutationPayload
  setOrderFulfillmentOption(input: setOrderFulfillmentOptionInput!): setOrderFulfillmentOptionPayload
  startIdentityVerification(input: startIdentityVerificationMutationInput!): startIdentityVerificationMutationPayload
  submitInquiryRequestMutation(input: SubmitInquiryRequestMutationInput!): SubmitInquiryRequestMutationPayload
  submitOfferOrderWithConversation(input: CommerceSubmitOrderWithOfferInput!): CommerceSubmitOrderWithOfferPayload
  submitOrder(input: submitOrderInput!): submitOrderPayload
  toggleArtworkImportRowExclusion(input: ToggleArtworkImportRowExclusionInput!): ToggleArtworkImportRowExclusionPayload
  transferMyCollection(input: TransferMyCollectionInput!): TransferMyCollectionPayload
  triggerCampaign(input: TriggerCampaignInput!): TriggerCampaignPayload
  unlinkAuthentication(input: UnlinkAuthenticationMutationInput!): UnlinkAuthenticationMutationPayload
  unpublishViewingRoom(input: UnpublishViewingRoomInput!): UnpublishViewingRoomPayload
  unsetOrderFulfillmentOption(input: unsetOrderFulfillmentOptionInput!): unsetOrderFulfillmentOptionPayload
  unsetOrderPaymentMethod(input: unsetOrderPaymentMethodInput!): unsetOrderPaymentMethodPayload
  updateAlert(input: updateAlertInput!): updateAlertPayload
  updateAppSecondFactor(input: UpdateAppSecondFactorInput!): UpdateAppSecondFactorPayload
  updateArtist(input: UpdateArtistMutationInput!): UpdateArtistMutationPayload
  updateArtwork(input: UpdateArtworkMutationInput!): UpdateArtworkMutationPayload
  updateArtworkImportCurrency(input: UpdateArtworkImportCurrencyInput!): UpdateArtworkImportCurrencyPayload
  updateArtworkImportDimensionMetric(input: UpdateArtworkImportDimensionMetricInput!): UpdateArtworkImportDimensionMetricPayload
  updateArtworkImportRow(input: UpdateArtworkImportRowInput!): UpdateArtworkImportRowPayload
  updateArtworkImportWeightMetric(input: UpdateArtworkImportWeightMetricInput!): UpdateArtworkImportWeightMetricPayload
  updateCMSLastAccessTimestamp(input: UpdateCMSLastAccessTimestampMutationInput!): UpdateCMSLastAccessTimestampMutationPayload
  updateCareerHighlight(input: UpdateCareerHighlightInput!): UpdateCareerHighlightPayload
  updateCollection(input: updateCollectionInput!): updateCollectionPayload
  updateCollectorProfile(input: UpdateCollectorProfileInput!): UpdateCollectorProfilePayload
  updateCollectorProfileWithID(input: UpdateCollectorProfileWithIDInput!): UpdateCollectorProfileWithIDPayload
  updateConsignmentSubmission(input: UpdateSubmissionMutationInput!): UpdateSubmissionMutationPayload
  updateConversation(input: UpdateConversationMutationInput!): UpdateConversationMutationPayload
  updateFeature(input: UpdateFeatureMutationInput!): UpdateFeatureMutationPayload
  updateFeaturedLink(input: UpdateFeaturedLinkMutationInput!): UpdateFeaturedLinkMutationPayload
  updateHeroUnit(input: UpdateHeroUnitMutationInput!): UpdateHeroUnitMutationPayload
  updateInstallShotForPartnerShow(input: UpdateInstallShotForPartnerShowMutationInput!): UpdateInstallShotForPartnerShowMutationPayload
  updateMeCollectionsMutation(input: updateMeCollectionsMutationInput!): updateMeCollectionsMutationPayload
  updateMessage(input: UpdateMessageMutationInput!): UpdateMessageMutationPayload
  updateMyPassword(input: UpdateMyPasswordMutationInput!): UpdateMyPasswordMutationPayload
  updateMyUserProfile(input: UpdateMyProfileInput!): UpdateMyProfilePayload
  updateNotificationPreferences(input: updateNotificationPreferencesMutationInput!): updateNotificationPreferencesMutationPayload
  updateOrder(input: updateOrderInput!): updateOrderPayload
  updateOrderShippingAddress(input: updateOrderShippingAddressInput!): updateOrderShippingAddressPayload
  updateOrderedSet(input: UpdateOrderedSetMutationInput!): UpdateOrderedSetMutationPayload
  updatePage(input: UpdatePageMutationInput!): UpdatePageMutationPayload
  updatePartner(input: UpdatePartnerMutationInput!): UpdatePartnerMutationPayload
  updatePartnerArtist(input: UpdatePartnerArtistMutationInput!): UpdatePartnerArtistMutationPayload
  updatePartnerArtistDocument(input: UpdatePartnerArtistDocumentMutationInput!): UpdatePartnerArtistDocumentMutationPayload
  updatePartnerContact(input: UpdatePartnerContactInput!): UpdatePartnerContactPayload
  updatePartnerFlags(input: UpdatePartnerFlagsMutationInput!): UpdatePartnerFlagsMutationPayload
  updatePartnerLocation(input: UpdatePartnerLocationInput!): UpdatePartnerLocationPayload
  updatePartnerProfileImage(input: UpdatePartnerProfileImageInput!): UpdatePartnerProfileImagePayload
  updatePartnerShow(input: UpdatePartnerShowMutationInput!): UpdatePartnerShowMutationPayload
  updatePartnerShowDocument(input: UpdatePartnerShowDocumentMutationInput!): UpdatePartnerShowDocumentMutationPayload
  updatePartnerShowEvent(input: UpdatePartnerShowEventMutationInput!): UpdatePartnerShowEventMutationPayload
  updateProfile(input: UpdateProfileMutationInput!): UpdateProfileMutationPayload
  updatePurchase(input: updatePurchaseInput!): updatePurchasePayload
  updateQuiz(input: updateQuizMutationInput!): updateQuizMutationPayload
  updateSaleAgreement(input: UpdateSaleAgreementMutationInput!): UpdateSaleAgreementMutationPayload
  updateSmsSecondFactor(input: UpdateSmsSecondFactorInput!): UpdateSmsSecondFactorPayload
  updateUser(input: UpdateUserMutationInput!): UpdateUserMutationPayload
  updateUserAddress(input: UpdateUserAddressInput!): UpdateUserAddressPayload
  updateUserDefaultAddress(input: UpdateUserDefaultAddressInput!): UpdateUserDefaultAddressPayload
  updateUserInterest(input: UpdateUserInterestMutationInput!): UpdateUserInterestMutationPayload
  updateUserInterests(input: UpdateUserInterestsMutationInput!): UpdateUserInterestsMutationPayload
  updateUserSaleProfile(input: UpdateUserSaleProfileMutationInput!): UpdateUserSaleProfileMutationPayload
  updateViewingRoom(input: UpdateViewingRoomInput!): UpdateViewingRoomPayload
  updateViewingRoomArtworks(input: UpdateViewingRoomArtworksInput!): UpdateViewingRoomArtworksPayload
  updateViewingRoomSubsections(input: UpdateViewingRoomSubsectionsInput!): UpdateViewingRoomSubsectionsPayload
}

type MyBid {
  sale: Sale
  saleArtworks: [SaleArtwork]
}

type MyBids {
  active: [MyBid]
  closed: [MyBid]
}

input MyCollectionArtistInput {
  displayName: String
}

type MyCollectionArtworkMutationDeleteSuccess {
  success: Boolean
}

type MyCollectionArtworkMutationFailure {
  mutationError: GravityMutationError
}

type MyCollectionArtworkMutationSuccess {
  artwork: Artwork
  artworkEdge: MyCollectionEdge
}

union MyCollectionArtworkMutationType = MyCollectionArtworkMutationDeleteSuccess | MyCollectionArtworkMutationFailure | MyCollectionArtworkMutationSuccess

enum MyCollectionArtworkSorts {
  CREATED_AT_ASC
  CREATED_AT_DESC
  POSITION_ASC
  POSITION_DESC
}

type MyCollectionConnection {
  artistInsights(kind: ArtistInsightKind): [ArtistInsight!]!
  artistInsightsCount: ArtistInsightsCount
  artistsCount: Int!
  artworksCount: Int!
  collectedArtistsConnection(after: String, before: String, first: Int, includePersonalArtists: Boolean = false, last: Int, page: Int, size: Int, sort: ArtistSorts): ArtistConnection @deprecated(reason: "Please use `me.userInterestsConnection` instead")
  default: Boolean!
  description: String!
  edges: [MyCollectionEdge]
  includesPurchasedArtworks: Boolean!
  name: String!
  pageCursors: PageCursors!
  pageInfo: PageInfo!
  private: Boolean!
  totalCount: Int
}

input MyCollectionCreateArtworkInput {
  additionalInformation: String
  artistIds: [String]
  artists: [MyCollectionArtistInput]
  artworkLocation: String
  attributionClass: ArtworkAttributionClassType
  category: String
  clientMutationId: String
  coaByAuthenticatingBody: Boolean
  coaByGallery: Boolean
  collectorLocation: EditableLocation
  condition: ArtworkConditionEnumType
  conditionDescription: String
  confidentialNotes: String
  costCurrencyCode: String
  costMajor: Int
  costMinor: Int
  date: String
  depth: String
  editionNumber: String
  editionSize: String
  externalImageUrls: [String]
  framedDepth: String
  framedHeight: String
  framedMetric: String
  framedWidth: String
  hasCertificateOfAuthenticity: Boolean
  height: String
  importSource: ArtworkImportSource
  isEdition: Boolean
  isFramed: Boolean
  medium: String
  metric: String
  pricePaidCents: Long
  pricePaidCurrency: String
  provenance: String
  signatureDetails: String
  signatureTypes: [ArtworkSignatureTypeEnum]
  submissionId: String
  title: String!
  width: String
}

type MyCollectionCreateArtworkPayload {
  artworkOrError: MyCollectionArtworkMutationType
  clientMutationId: String
}

input MyCollectionDeleteArtworkInput {
  artworkId: String!
  clientMutationId: String
}

type MyCollectionDeleteArtworkPayload {
  artworkOrError: MyCollectionArtworkMutationType
  clientMutationId: String
}

type MyCollectionEdge {
  cursor: String!
  node: Artwork
}

type MyCollectionInfo {
  artistInsights(kind: ArtistInsightKind): [ArtistInsight!]!
  artistInsightsCount: ArtistInsightsCount
  artistsCount: Int!
  artworksCount: Int!
  collectedArtistsConnection(after: String, before: String, first: Int, includePersonalArtists: Boolean = false, last: Int, page: Int, size: Int, sort: ArtistSorts): ArtistConnection @deprecated(reason: "Please use `me.userInterestsConnection` instead")
  default: Boolean!
  description: String!
  includesPurchasedArtworks: Boolean!
  name: String!
  private: Boolean!
}

input MyCollectionUpdateArtworkInput {
  additionalInformation: String
  artistIds: [String]
  artworkId: String!
  artworkLocation: String
  attributionClass: ArtworkAttributionClassType
  category: String
  clientMutationId: String
  coaByAuthenticatingBody: Boolean
  coaByGallery: Boolean
  collectorLocation: EditableLocation
  condition: ArtworkConditionEnumType
  conditionDescription: String
  confidentialNotes: String
  costCurrencyCode: String
  costMajor: Int
  costMinor: Int
  date: String
  depth: String
  editionNumber: String
  editionSize: String
  externalImageUrls: [String]
  framedDepth: String
  framedHeight: String
  framedMetric: String
  framedWidth: String
  hasCertificateOfAuthenticity: Boolean
  height: String
  isEdition: Boolean
  isFramed: Boolean
  medium: String
  metric: String
  pricePaidCents: Long
  pricePaidCurrency: String
  provenance: String
  signatureDetails: String
  signatureTypes: [ArtworkSignatureTypeEnum]
  submissionId: String
  title: String
  width: String
}

type MyCollectionUpdateArtworkPayload {
  artworkOrError: MyCollectionArtworkMutationType
  clientMutationId: String
}

type MyLocation {
  address: String
  address2: String
  city: String
  coordinates: LatLng!
  country: String
  countryCode: String
  display: String
  displayCountry: String
  id: ID!
  internalID: ID!
  postalCode: String
  state: String
  summary: String
  timezone: String
}

type NavigationPill {
  href: String!
  icon: String
  ownerType: String!
  title: String!
}

input Near {
  lat: Float!
  lng: Float!
  maxDistance: Float
}

interface Node {
  id: ID!
}

type Notification implements Node {
  artworksConnection(after: String, before: String, first: Int, last: Int): ArtworkConnection
  createdAt(format: String, timezone: String): String @deprecated(reason: "Please use `publishedAt` instead")
  headline: String!
  id: ID!
  internalID: ID!
  isUnread: Boolean!
  item: NotificationItem
  message: String!
  notificationType: NotificationTypesEnum!
  objectsCount: Int!
  previewImages(size: Int): [Image!]!
  publishedAt(format: String): String!
  targetHref: String!
  title: String!
}

type NotificationConnection {
  counts: NotificationCounts
  edges: [NotificationEdge]
  pageCursors: PageCursors!
  pageInfo: PageInfo!
  totalCount: Int
}

type NotificationCounts {
  total(format: String, label: String): FormattedNumber
  unread(format: String, label: String): FormattedNumber
  unseen(format: String, label: String): FormattedNumber
}

type NotificationEdge {
  cursor: String!
  node: Notification
}

union NotificationItem = AlertNotificationItem | ArticleFeaturedArtistNotificationItem | ArtworkPublishedNotificationItem | CollectorProfileUpdatePromptNotificationItem | PartnerOfferCreatedNotificationItem | ShowOpenedNotificationItem | ViewingRoomPublishedNotificationItem

type NotificationPreference {
  channel: String!
  id: String!
  name: String!
  status: SubGroupStatus!
}

input NotificationPreferenceInput {
  channel: String
  name: String!
  status: SubGroupInputStatus!
}

enum NotificationTypesEnum {
  ARTICLE_FEATURED_ARTIST
  ARTWORK_ALERT
  ARTWORK_PUBLISHED
  COLLECTOR_PROFILE_UPDATE_PROMPT
  PARTNER_OFFER_CREATED
  PARTNER_SHOW_OPENED
  VIEWING_ROOM_PUBLISHED
}

type OfferResponse {
  comments: String
  id: ID!
  intendedState: IntendedState!
  offer: ConsignmentOffer!
  phoneNumber: String
  rejectionReason: String
}

type OfferableActivity {
  totalCount: Int
}

type OpeningHoursArray {
  schedules: [FormattedDaySchedules]
}

type OpeningHoursText {
  text: String
}

union OpeningHoursUnion = OpeningHoursArray | OpeningHoursText

type Order {
  availablePaymentMethods: [OrderPaymentMethodEnum!]!
  availableShippingCountries: [String!]!
  buyerPhoneNumber: String @deprecated(reason: "Use `order.fulfillmentDetails.phoneNumber`")
  buyerState: OrderBuyerStateEnum
  buyerStateExpiresAt: String
  buyerTotal: Money
  code: String!
  creditCardWalletType: OrderCreditCardWalletTypeEnum
  currencyCode: String!
  deliveryInfo: DeliveryInfo
  displayTexts: DisplayTexts!
  fulfillmentDetails: FulfillmentDetails
  fulfillmentOptions: [FulfillmentOption!]!
  id: ID!
  impulseConversationId: String
  internalID: ID!
  itemsTotal: Money
  lineItems: [LineItem]!
  mode: OrderModeEnum!
  paymentMethod: OrderPaymentMethodEnum
  paymentMethodDetails: PaymentMethodUnion
  pricingBreakdownLines: [PricingBreakdownLineUnion]!
  selectedFulfillmentOption: FulfillmentOption
  seller: SellerType
  shippingOrigin: String
  shippingTotal: Money
  source: OrderSourceEnum!
  stripeConfirmationToken: String
  taxTotal: Money
  totalListPrice: Money
}

type OrderActionData {
  clientSecret: String!
}

enum OrderBuyerStateEnum {
  APPROVED
  CANCELLED
  COMPLETED
  DECLINED_BY_BUYER
  DECLINED_BY_SELLER
  INCOMPLETE
  PAYMENT_FAILED
  PROCESSING_OFFLINE_PAYMENT
  PROCESSING_PAYMENT
  REFUNDED
  SHIPPED
  SUBMITTED
  UNKNOWN
}

enum OrderCreditCardWalletTypeEnum {
  APPLE_PAY
  GOOGLE_PAY
}

enum OrderModeEnum {
  BUY
  OFFER
}

type OrderMutationActionRequired {
  actionData: OrderActionData!
}

type OrderMutationError {
  mutationError: ExchangeError!
}

union OrderMutationResponse = OrderMutationActionRequired | OrderMutationError | OrderMutationSuccess

type OrderMutationSuccess {
  order: Order!
}

union OrderParty = Partner | User

enum OrderPaymentMethodEnum {
  CREDIT_CARD
  SEPA_DEBIT
  US_BANK_ACCOUNT
  WIRE_TRANSFER
}

enum OrderSourceEnum {
  ARTWORK_PAGE
  INQUIRY
  PARTNER_OFFER
  PRIVATE_SALE
}

type OrderedSet {
  cached: Int
  createdAt(format: String, timezone: String): String
  createdBy: User
  description(format: Format): String
  id: ID!
  internalID: ID!
  internalName: String
  itemType: String
  items: [OrderedSetItem]
  itemsConnection(after: String, before: String, first: Int, last: Int): ArtworkConnection @deprecated(reason: "Utilize `orderedItemsConnection` for union type")
  key: String
  layout: OrderedSetLayouts!
  name: String
  orderedItemsConnection(after: String, before: String, first: Int, last: Int): OrderedSetItemConnection!
  ownerType: String
  published: Boolean!
}

type OrderedSetConnection {
  edges: [OrderedSetEdge]
  pageCursors: PageCursors!
  pageInfo: PageInfo!
  totalCount: Int
}

type OrderedSetEdge {
  cursor: String!
  node: OrderedSet
}

union OrderedSetItem = Artist | Artwork | FeaturedLink | Gene | Profile | Sale | Show

type OrderedSetItemConnection {
  edges: [OrderedSetItemEdge]
  pageCursors: PageCursors!
  pageInfo: PageInfo!
  totalCount: Int
}

type OrderedSetItemEdge {
  cursor: String!
  node: OrderedSetItem
}

enum OrderedSetLayouts {
  DEFAULT
  FULL
}

enum OrderedSetSorts {
  CREATED_AT_ASC
  CREATED_AT_DESC
  ID_ASC
  ID_DESC
  INTERNAL_NAME_ASC
  INTERNAL_NAME_DESC
  ITEM_TYPE_ASC
  ITEM_TYPE_DESC
  KEY_ASC
  KEY_DESC
  NAME_ASC
  NAME_DESC
  OWNER_ID_ASC
  OWNER_ID_DESC
  OWNER_TYPE_ASC
  OWNER_TYPE_DESC
}

type Page {
  content(format: Format): String
  id: ID!
  internalID: ID!
  name: String!
  published: Boolean!
}

type PageConnection {
  edges: [PageEdge]
  pageCursors: PageCursors!
  pageInfo: PageInfo!
  totalCount: Int
}

type PageCursor {
  cursor: String!
  isCurrent: Boolean!
  page: Int!
}

type PageCursors {
  around: [PageCursor!]!
  first: PageCursor
  last: PageCursor
  previous: PageCursor
}

type PageEdge {
  cursor: String!
  node: Page
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type PartialArtwork {
  context: ArtworkContext
  contextGrids(includeRelatedArtworks: Boolean! = true): [ArtworkContextGrid]
  id: ID!
  internalID: ID!
  layer(id: String): ArtworkLayer
  slug: ID!
}

type Partner implements Node {
  alertsConnection(after: String, artistID: String, before: String, first: Int, id: String, last: Int, page: Int, size: Int): PartnerAlertsConnection
  allArtistsConnection(displayOnPartnerProfile: Boolean, hasNotRepresentedArtistWithPublishedArtworks: Boolean, hasPublishedArtworks: Boolean, includeAllFields: Boolean, representedBy: Boolean): ArtistPartnerConnection
  analytics: AnalyticsPartnerStats
  articlesConnection(after: String, before: String, first: Int, inEditorialFeed: Boolean, last: Int, page: Int, sort: ArticleSorts): ArticleConnection
  artistsConnection(after: String, artistIDs: [String], before: String, displayOnPartnerProfile: Boolean, first: Int, hasPublishedArtworks: Boolean, includeAllFields: Boolean, last: Int, representedBy: Boolean, representedByOrHasPublishedArtworks: Boolean, sort: ArtistSorts): ArtistPartnerConnection
  artistsSearchConnection(after: String, before: String, first: Int, last: Int, page: Int = 1, query: String!, size: Int = 10): ArtistConnection
  artistsWithAlertCountsConnection(after: String, before: String, first: Int, last: Int, page: Int, size: Int, sort: ArtistAlertsSort): ArtistsWithAlertCountsConnection
  artworkImportsConnection(after: String, before: String, first: Int, last: Int): ArtworkImportConnection
  artworksConnection(after: String, artistID: String, artworkIDs: [String], before: String, exclude: [String], first: Int, forSale: Boolean, includeUnpublished: Boolean, last: Int, missingPriorityMetadata: Boolean, page: Int, partnerOfferable: Boolean, publishedWithin: Int, shallow: Boolean, sort: ArtworkSorts, visibilityLevels: [Visibility]): ArtworkConnection
  artworksSearchConnection(after: String, before: String, first: Int, last: Int, page: Int, query: String!, size: Int): ArtworkConnection
  cached: Int
  categories: [PartnerCategory]
  cities(size: Int = 25): [String]
  claimed: Boolean
  collectingInstitution: String
  contact(contactId: String!): Contact
  contactsConnection(after: String, before: String, contactType: contactType, first: Int, last: Int): ContactConnection
  counts: PartnerCounts
  defaultProfileID: String
  displayArtistsSection: Boolean
  displayFullPartnerPage: Boolean
  displayWorksSection: Boolean
  distinguishRepresentedArtists: Boolean
  documentsConnection(after: String, artistID: String, before: String, documentIDs: [String], first: Int, last: Int, showID: String): PartnerDocumentConnection
  featuredKeywords: [String!]!
  featuredShow: Show
  filterArtworksConnection(acquireable: Boolean, additionalGeneIDs: [String], after: String, aggregationPartnerCities: [String], aggregations: [ArtworkAggregation], artistID: String, artistIDs: [String], artistNationalities: [String], artistSeriesID: String, artistSeriesIDs: [String], artworkIDs: [String], atAuction: Boolean, attributionClass: [String], availability: String, before: String, categories: [String], color: String, colors: [String], dimensionRange: String, disableNotForSaleSorting: Boolean, excludeArtworkIDs: [String], extraAggregationGeneIDs: [String], first: Int, forSale: Boolean, framed: Boolean, geneID: String, geneIDs: [String], height: String, importSources: [String], includeAllJSON: Boolean, includeArtworksByFollowedArtists: Boolean, includeMediumFilterInAggregation: Boolean, includeUnpublished: Boolean, input: FilterArtworksInput, inquireableOnly: Boolean, keyword: String, keywordMatchExact: Boolean, last: Int, locationCities: [String], majorPeriods: [String], marketable: Boolean, marketingCollectionID: String, materialsTerms: [String], medium: String, offerable: Boolean, page: Int, partnerCities: [String], partnerID: ID, partnerIDs: [String], period: String, periods: [String], priceRange: String, published: Boolean, saleID: ID, showID: String, signed: Boolean, size: Int, sizes: [ArtworkSizes], sold: Boolean, sort: String, tagID: String, visibilityLevel: String, width: String): FilterArtworksConnection
  fullProfileEligible: Boolean @deprecated(reason: "Prefer displayFullPartnerPage")
  hasFairPartnership: Boolean
  hasVisibleFollowsCount: Boolean!
  href: String
  id: ID!
  initials(length: Int = 3): String
  inquiryRequest(inquiryId: String!): PartnerInquiryRequest
  internalID: ID!
  isDefaultProfilePublic: Boolean
  isInquireable: Boolean!
  isLinkable: Boolean
  isPreQualify: Boolean
  isVerifiedSeller: Boolean
  location(locationId: String!): Location
  locations(size: Int = 25): [Location] @deprecated(reason: "Prefer to use `locationsConnection`. [Will be removed in v2]")
  locationsConnection(addressType: addressType, after: String, before: String, first: Int, last: Int, page: Int, private: Boolean, size: Int): LocationConnection
  merchantAccount: PartnerMerchantAccount
  meta: PartnerMeta
  name: String
  partnerAlertHitsConnection(after: String, before: String, first: Int, last: Int, page: Int, size: Int): PartnerAlertHitsConnection
  partnerPageEligible: Boolean
  partnerType: String
  profile: Profile
  profileArtistsLayout: String
  profileBannerDisplay: String
  showPromoted: Boolean
  showsConnection(after: String, artistID: String, atAFair: Boolean, before: String, dayThreshold: Int, first: Int, isDisplayable: Boolean, last: Int, page: Int, sort: ShowSorts, status: EventStatus = CURRENT): ShowConnection
  showsSearchConnection(after: String, before: String, first: Int, last: Int, page: Int = 1, query: String!, size: Int = 10): ShowConnection
  slug: ID!
  type: String
  vatInformation: String
  vatNumber: String
  vatStatus: String
  viewingRoomsConnection(after: String, before: String, first: Int, last: Int, statuses: [ViewingRoomStatusEnum!]): ViewingRoomsConnection
  website: String
}

type PartnerAgreement {
  acceptedAt: ISO8601DateTime
  acceptedBy: String
  agreement: Agreement!
  id: ID!
}

union PartnerAgreementOrErrorsUnion = Errors | PartnerAgreement

type PartnerAlertHitsConnection {
  edges: [PartnerAlertHitsEdge]
  pageCursors: PageCursors!
  pageInfo: PageInfo!
  totalCount: Int
}

type PartnerAlertHitsEdge {
  artwork: Artwork
  createdAt(format: String, timezone: String): String
  cursor: String!
  id: ID!
  internalID: ID!
  node: Alert
  partnerSearchCriteriaID: String
  userIDs: [String]
}

type PartnerAlertsConnection {
  edges: [PartnerAlertsEdge]
  pageCursors: PageCursors!
  pageInfo: PageInfo!
  totalCount: Int
}

type PartnerAlertsEdge {
  artistID: String
  collectorProfilesConnection(after: String, before: String, first: Int, last: Int, page: Int, size: Int): PartnerCollectorProfilesConnection
  cursor: String!
  id: ID!
  internalID: ID!
  matchedAt: String
  node: Alert
  partnerID: String
  score: String
  searchCriteriaID: String
  userIDs: [String]
}

type PartnerArtist {
  artist: Artist
  artworksConnection(after: String, before: String, first: Int, last: Int, sort: PartnerArtistArtworksSort): ArtworkConnection
  biography: String
  biographyBlurb(format: Format): PartnerArtistBlurb
  counts: PartnerArtistCounts
  documentsConnection(after: String, before: String, first: Int, last: Int): PartnerDocumentConnection
  filterArtworksConnection(acquireable: Boolean, additionalGeneIDs: [String], after: String, aggregationPartnerCities: [String], aggregations: [ArtworkAggregation], artistID: String, artistIDs: [String], artistNationalities: [String], artistSeriesID: String, artistSeriesIDs: [String], artworkIDs: [String], atAuction: Boolean, attributionClass: [String], availability: String, before: String, categories: [String], color: String, colors: [String], dimensionRange: String, disableNotForSaleSorting: Boolean, excludeArtworkIDs: [String], extraAggregationGeneIDs: [String], first: Int, forSale: Boolean, framed: Boolean, geneID: String, geneIDs: [String], height: String, importSources: [String], includeAllJSON: Boolean, includeArtworksByFollowedArtists: Boolean, includeMediumFilterInAggregation: Boolean, includeUnpublished: Boolean, input: FilterArtworksInput, inquireableOnly: Boolean, keyword: String, keywordMatchExact: Boolean, last: Int, locationCities: [String], majorPeriods: [String], marketable: Boolean, marketingCollectionID: String, materialsTerms: [String], medium: String, offerable: Boolean, page: Int, partnerCities: [String], partnerID: ID, partnerIDs: [String], period: String, periods: [String], priceRange: String, published: Boolean, saleID: ID, showID: String, signed: Boolean, size: Int, sizes: [ArtworkSizes], sold: Boolean, sort: String, tagID: String, visibilityLevel: String, width: String): FilterArtworksConnection
  id: ID!
  image: Image
  imageUrl: String
  internalID: ID!
  isDisplayOnPartnerProfile: Boolean
  isHiddenInPresentationMode: Boolean
  isUseDefaultBiography: Boolean
  partner: Partner
  representedBy: Boolean
  showsConnection(after: String, before: String, first: Int, last: Int): ShowConnection
  sortableID: String
}

enum PartnerArtistArtworksSort {
  POSITION_ASC
  POSITION_DESC
}

type PartnerArtistBlurb {
  credit: String
  text: String
}

type PartnerArtistConnection {
  edges: [PartnerArtistEdge]
  pageInfo: PageInfo!
}

type PartnerArtistCounts {
  artworks(format: String, label: String): FormattedNumber
  documents: Int
  forSaleArtworks(format: String, label: String): FormattedNumber
  managedArtworks(format: String, label: String): FormattedNumber
  shows: Int
  unlistedArtworks(format: String, label: String): FormattedNumber
}

type PartnerArtistDocumentConnection {
  edges: [PartnerArtistDocumentEdge]
  pageCursors: PageCursors!
  pageInfo: PageInfo!
  totalCount: Int
}

type PartnerArtistDocumentEdge {
  cursor: String!
  node: PartnerDocument
}

type PartnerArtistEdge {
  artist: Artist
  artworksConnection(after: String, before: String, first: Int, last: Int, sort: PartnerArtistArtworksSort): ArtworkConnection
  biography: String
  biographyBlurb(format: Format): PartnerArtistBlurb
  counts: PartnerArtistCounts
  cursor: String!
  documentsConnection(after: String, before: String, first: Int, last: Int): PartnerDocumentConnection
  filterArtworksConnection(acquireable: Boolean, additionalGeneIDs: [String], after: String, aggregationPartnerCities: [String], aggregations: [ArtworkAggregation], artistID: String, artistIDs: [String], artistNationalities: [String], artistSeriesID: String, artistSeriesIDs: [String], artworkIDs: [String], atAuction: Boolean, attributionClass: [String], availability: String, before: String, categories: [String], color: String, colors: [String], dimensionRange: String, disableNotForSaleSorting: Boolean, excludeArtworkIDs: [String], extraAggregationGeneIDs: [String], first: Int, forSale: Boolean, framed: Boolean, geneID: String, geneIDs: [String], height: String, importSources: [String], includeAllJSON: Boolean, includeArtworksByFollowedArtists: Boolean, includeMediumFilterInAggregation: Boolean, includeUnpublished: Boolean, input: FilterArtworksInput, inquireableOnly: Boolean, keyword: String, keywordMatchExact: Boolean, last: Int, locationCities: [String], majorPeriods: [String], marketable: Boolean, marketingCollectionID: String, materialsTerms: [String], medium: String, offerable: Boolean, page: Int, partnerCities: [String], partnerID: ID, partnerIDs: [String], period: String, periods: [String], priceRange: String, published: Boolean, saleID: ID, showID: String, signed: Boolean, size: Int, sizes: [ArtworkSizes], sold: Boolean, sort: String, tagID: String, visibilityLevel: String, width: String): FilterArtworksConnection
  id: ID!
  image: Image
  imageUrl: String
  internalID: ID!
  isDisplayOnPartnerProfile: Boolean
  isHiddenInPresentationMode: Boolean
  isUseDefaultBiography: Boolean
  node: Partner
  partner: Partner
  representedBy: Boolean
  showsConnection(after: String, before: String, first: Int, last: Int): ShowConnection
  sortableID: String
}

type PartnerArtworkGrid implements ArtworkContextGrid {
  artworksConnection(after: String, before: String, first: Int, last: Int): ArtworkConnection
  ctaHref: String
  ctaTitle: String
  title: String
}

type PartnerCategory {
  cached: Int
  categoryType: PartnerCategoryType
  id: ID!
  internal: Boolean
  internalID: ID!
  name: String
  partners(defaultProfilePublic: Boolean, eligibleForCarousel: Boolean, eligibleForListing: Boolean, eligibleForPrimaryBucket: Boolean, eligibleForSecondaryBucket: Boolean, excludeFollowedPartners: Boolean, hasFullProfile: Boolean, ids: [String], includePartnersNearIpBasedLocation: Boolean = false, includePartnersWithFollowedArtists: Boolean, maxDistance: Int, near: String, page: Int, partnerCategories: [String], size: Int, sort: PartnersSortType, term: String, type: [PartnerClassification]): [Partner]
  slug: ID!
}

enum PartnerCategoryType {
  GALLERY
  INSTITUTION
}

enum PartnerClassification {
  AUCTION
  BRAND
  DEMO
  GALLERY
  INSTITUTION
  INSTITUTIONAL_SELLER
  PRIVATE_COLLECTOR
  PRIVATE_DEALER
}

type PartnerCollectorProfilesConnection {
  edges: [PartnerCollectorProfilesEdge]
  pageCursors: PageCursors!
  pageInfo: PageInfo!
  totalCount: Int
}

type PartnerCollectorProfilesEdge {
  cursor: String!
  node: CollectorProfileType
}

type PartnerConnection {
  edges: [PartnerEdge]
  pageCursors: PageCursors!
  pageInfo: PageInfo!
  totalCount: Int
}

type PartnerCounts {
  artistDocuments(format: String, label: String): FormattedNumber
  artists(format: String, label: String): FormattedNumber
  artworks(format: String, label: String): FormattedNumber
  currentDisplayableShows(format: String, label: String): FormattedNumber
  displayableShows(format: String, label: String): FormattedNumber
  eligibleArtworks(format: String, label: String): FormattedNumber
  partnerArtists(format: String, label: String): FormattedNumber
  partnerShowDocuments(format: String, label: String): FormattedNumber
  publishedForSaleArtworks(format: String, label: String): FormattedNumber
  publishedNotForSaleArtworks(format: String, label: String): FormattedNumber
  shows(format: String, label: String): FormattedNumber
}

type PartnerDocument {
  filesize: Int!
  id: ID!
  internalID: ID!
  publicURL: String!
  publicUrl: String! @deprecated(reason: "Prefer `publicURL`")
  size: Int! @deprecated(reason: "Prefer `filesize`")
  slug: ID!
  title: String!
}

type PartnerDocumentConnection {
  edges: [PartnerDocumentEdge]
  pageCursors: PageCursors!
  pageInfo: PageInfo!
  totalCount: Int
}

type PartnerDocumentEdge {
  cursor: String!
  node: PartnerDocument
}

type PartnerEdge {
  cursor: String!
  node: Partner
}

type PartnerEngagement {
  counts: PartnerEngagementCounts
}

type PartnerEngagementCounts {
  alerts: Int!
  artworkInquiries(artistID: String): Int!
  followedArtists: Int!
  savedArtworks: Int!
}

type PartnerInquiryRequest {
  collectorProfile: InquirerCollectorProfile
  formattedFirstMessage: String
  id: ID!
  internalID: ID!
  questions: [InquiryQuestion]
  shippingLocation: Location
}

type PartnerMerchantAccount {
  externalId: String!
}

type PartnerMeta {
  description: String
  image: String
  title: String
}

type PartnerOffer implements Node {
  artworkId: String
  createdAt(format: String, timezone: String): String
  discountPercentage: Int
  endAt(format: String, timezone: String): String
  id: ID!
  internalID: ID!
  isActive: Boolean
  isAvailable: Boolean
  note: String
  partnerId: String
  priceListed: Money
  priceListedMessage: String @deprecated(reason: "This field is deprecated. Use 'priceListed' instead.")
  priceWithDiscount: Money
  priceWithDiscountMessage: String @deprecated(reason: "This field is deprecated. Use 'priceWithDiscount' instead.")
  source: PartnerOfferSourceEnum
  userIds: [String]
}

type PartnerOfferConnection {
  edges: [PartnerOfferEdge]
  pageCursors: PageCursors!
  pageInfo: PageInfo!
  totalCount: Int
}

type PartnerOfferCreatedNotificationItem {
  artworksConnection(after: String, before: String, first: Int, last: Int): ArtworkConnection
  available: Boolean
  expiresAt(format: String, timezone: String): String
  partnerOffer: PartnerOffer
}

type PartnerOfferEdge {
  cursor: String!
  node: PartnerOffer
}

enum PartnerOfferSorts {
  CREATED_AT_ASC
  CREATED_AT_DESC
  END_AT_ASC
  END_AT_DESC
}

enum PartnerOfferSourceEnum {
  ABANDONED_ORDER
  SAVE
}

type PartnerOfferToCollector implements Node {
  artworkId: String
  createdAt(format: String, timezone: String): String
  endAt(format: String, timezone: String): String
  id: ID!
  internalID: ID!
  isActive: Boolean
  isAvailable: Boolean
  note: String
  partnerId: String
  priceWithDiscount: Money
  source: PartnerOfferSourceEnum
}

type PartnerOfferToCollectorConnection {
  edges: [PartnerOfferToCollectorEdge]
  pageCursors: PageCursors!
  pageInfo: PageInfo!
  totalCount: Int
}

type PartnerOfferToCollectorEdge {
  cursor: String!
  node: PartnerOfferToCollector
}

enum PartnerOfferToCollectorSorts {
  CREATED_AT_ASC
  CREATED_AT_DESC
  END_AT_ASC
  END_AT_DESC
}

type PartnerShowDocumentConnection {
  edges: [PartnerShowDocumentEdge]
  pageCursors: PageCursors!
  pageInfo: PageInfo!
  totalCount: Int
}

type PartnerShowDocumentEdge {
  cursor: String!
  node: PartnerDocument
}

enum PartnerShowPartnerType {
  GALLERY
  MUSEUM
}

union PartnerTypes = ExternalPartner | Partner

enum PartnersAggregation {
  CATEGORY
  LOCATION
  TOTAL
}

type PartnersAggregationResults {
  counts: [AggregationCount]
  slice: PartnersAggregation
}

enum PartnersSortType {
  CREATED_AT_ASC
  CREATED_AT_DESC
  DISTANCE
  PUBLISHED_AT_DESC
  RANDOM_SCORE_DESC
  RELATIVE_SIZE_ASC
  RELATIVE_SIZE_DESC
  SORTABLE_ID_ASC
  SORTABLE_ID_DESC
}

union PaymentMethodPreview = Card | SEPADebit | USBankAccount

union PaymentMethodUnion = BankAccount | CreditCard | WireTransfer

enum PhoneNumberErrors {
  INVALID_COUNTRY_CODE
  INVALID_NUMBER
  TOO_LONG
  TOO_SHORT
}

enum PhoneNumberFormats {
  E164
  INTERNATIONAL
  NATIONAL
  RFC3966
}

type PhoneNumberType {
  countryCode: String
  display(format: PhoneNumberFormats): String
  error: PhoneNumberErrors
  isValid: Boolean
  originalNumber: String
  regionCode: String
}

type PreviewSavedSearch {
  displayName: String!
  href: String
  labels: [SearchCriteriaLabel]!
  suggestedFilters(source: AlertSource): [SearchCriteriaLabel!]!
}

input PreviewSavedSearchAttributes {
  acquireable: Boolean
  additionalGeneIDs: [String]
  artistIDs: [String]
  artistSeriesIDs: [String]
  atAuction: Boolean
  attributionClass: [String]
  colors: [String]
  height: String
  inquireableOnly: Boolean
  locationCities: [String]
  majorPeriods: [String]
  materialsTerms: [String]
  offerable: Boolean
  partnerIDs: [String]
  priceRange: String
  sizes: [ArtworkSizes]
  width: String
}

type PriceInsightConnection {
  edges: [PriceInsightEdge]
  nodes: [MarketPriceInsights]
  pageCursors: PageCursors
  pageInfo: AnalyticsPageInfo!
  totalCount: Int
  totalPages: Int
}

type PriceInsightEdge {
  cursor: String!
  node: MarketPriceInsights
}

enum PriceInsightSort {
  ANNUAL_LOTS_SOLD_ASC
  ANNUAL_LOTS_SOLD_DESC
  ANNUAL_VALUE_SOLD_CENTS_ASC
  ANNUAL_VALUE_SOLD_CENTS_DESC
  ARTIST_ID_ASC
  ARTIST_ID_DESC
  ARTIST_NAME_ASC
  ARTIST_NAME_DESC
  ARTSY_Q_INVENTORY_ASC
  ARTSY_Q_INVENTORY_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  DEMAND_RANK_ASC
  DEMAND_RANK_DESC
  DEMAND_TREND_ASC
  DEMAND_TREND_DESC
  HIGH_RANGE_CENTS_ASC
  HIGH_RANGE_CENTS_DESC
  ID_ASC
  ID_DESC
  LARGE_HIGH_RANGE_CENTS_ASC
  LARGE_HIGH_RANGE_CENTS_DESC
  LARGE_LOW_RANGE_CENTS_ASC
  LARGE_LOW_RANGE_CENTS_DESC
  LARGE_MID_RANGE_CENTS_ASC
  LARGE_MID_RANGE_CENTS_DESC
  LAST_AUCTION_RESULT_DATE_ASC
  LAST_AUCTION_RESULT_DATE_DESC
  LIQUIDITY_RANK_ASC
  LIQUIDITY_RANK_DESC
  LOTS_SOLD_LAST_12_MONTHS_ASC
  LOTS_SOLD_LAST_12_MONTHS_DESC
  LOTS_SOLD_LAST_24_MONTHS_ASC
  LOTS_SOLD_LAST_24_MONTHS_DESC
  LOTS_SOLD_LAST_36_MONTHS_ASC
  LOTS_SOLD_LAST_36_MONTHS_DESC
  LOTS_SOLD_LAST_48_MONTHS_ASC
  LOTS_SOLD_LAST_48_MONTHS_DESC
  LOTS_SOLD_LAST_60_MONTHS_ASC
  LOTS_SOLD_LAST_60_MONTHS_DESC
  LOTS_SOLD_LAST_72_MONTHS_ASC
  LOTS_SOLD_LAST_72_MONTHS_DESC
  LOTS_SOLD_LAST_84_MONTHS_ASC
  LOTS_SOLD_LAST_84_MONTHS_DESC
  LOTS_SOLD_LAST_96_MONTHS_ASC
  LOTS_SOLD_LAST_96_MONTHS_DESC
  LOW_RANGE_CENTS_ASC
  LOW_RANGE_CENTS_DESC
  MEDIAN_SALE_PRICE_LAST_36_MONTHS_ASC
  MEDIAN_SALE_PRICE_LAST_36_MONTHS_DESC
  MEDIAN_SALE_PRICE_LAST_96_MONTHS_ASC
  MEDIAN_SALE_PRICE_LAST_96_MONTHS_DESC
  MEDIAN_SALE_TO_ESTIMATE_RATIO_ASC
  MEDIAN_SALE_TO_ESTIMATE_RATIO_DESC
  MEDIUM_ASC
  MEDIUM_DESC
  MEDIUM_HIGH_RANGE_CENTS_ASC
  MEDIUM_HIGH_RANGE_CENTS_DESC
  MEDIUM_LOW_RANGE_CENTS_ASC
  MEDIUM_LOW_RANGE_CENTS_DESC
  MEDIUM_MID_RANGE_CENTS_ASC
  MEDIUM_MID_RANGE_CENTS_DESC
  MID_RANGE_CENTS_ASC
  MID_RANGE_CENTS_DESC
  SELL_THROUGH_RATE_ASC
  SELL_THROUGH_RATE_DESC
  SMALL_HIGH_RANGE_CENTS_ASC
  SMALL_HIGH_RANGE_CENTS_DESC
  SMALL_LOW_RANGE_CENTS_ASC
  SMALL_LOW_RANGE_CENTS_DESC
  SMALL_MID_RANGE_CENTS_ASC
  SMALL_MID_RANGE_CENTS_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}

type PriceRange {
  display: String
  maxPrice: Money
  minPrice: Money
}

union PricingBreakdownLineUnion = ShippingLine | SubtotalLine | TaxLine | TotalLine

type Profile {
  bio: String
  cached: Int
  counts: ProfileCounts
  displayArtistsSection: Boolean @deprecated(reason: "Prefer displayArtistsSection in Partner type")
  fullBio: String
  href: String
  icon: Image
  id: ID!
  image: Image
  initials(length: Int = 3): String
  internalID: ID!
  isFollowed: Boolean
  isPubliclyVisible: Boolean
  isPublished: Boolean
  location: String
  name: String
  owner: ProfileOwnerType!
  profileArtistsLayout: String @deprecated(reason: "Prefer profileArtistsLayout in Partner type")
  slug: ID!
}

type ProfileConnection {
  edges: [ProfileEdge]
  pageCursors: PageCursors!
  pageInfo: PageInfo!
  totalCount: Int
}

type ProfileCounts {
  follows(format: String, label: String): FormattedNumber
}

type ProfileEdge {
  cursor: String!
  node: Profile
}

union ProfileOwnerType = Fair | FairOrganizer | Partner

input PublishViewingRoomInput {
  clientMutationId: String
  viewingRoomID: ID!
}

type PublishViewingRoomPayload {
  clientMutationId: String
  viewingRoom: ViewingRoom!
}

type Purchase implements Node {
  artsyCommission: Float
  artwork: Artwork
  createdAt(format: String, timezone: String): String
  discoverAdmin: User
  email: String
  fair: Fair
  id: ID!
  internalID: ID!
  note: String
  ownerID: String
  ownerType: String
  sale: Sale
  saleAdmin: User
  saleDate(format: String, timezone: String): String
  salePrice: Float
  source: String
  user: User
}

type PurchasesConnection {
  edges: [PurchasesEdge]
  pageCursors: PageCursors!
  pageInfo: PageInfo!
  totalCount: Int
}

type PurchasesEdge {
  cursor: String!
  node: Purchase
}

type Query {
  _do_not_use_conversation(id: String!): Conversation
  _do_not_use_image: Image
  _unused_auctionsLot(id: ID!): AuctionsLotState
  _unused_auctionsLotStandingConnection(after: String, before: String, first: Int, last: Int, userId: ID!): AuctionsLotStandingConnection!
  _unused_gravity_matchPartners(matchType: String, page: Int = 1, size: Int = 5, term: String!): [DoNotUseThisPartner!]
  _unused_gravity_match_partners(match_type: String, page: Int = 1, size: Int = 5, term: String!): [DoNotUseThisPartner!] @deprecated(reason: "Use matchPartners")
  _unused_gravity_partner(id: ID!): DoNotUseThisPartner
  _unused_gravity_partners(ids: [ID!]!): [DoNotUseThisPartner!]
  _unused_gravity_userAddressConnection(after: String, before: String, first: Int, last: Int, userId: ID!): UserAddressConnection
  admin: Admin
  agreement(id: ID!): Agreement
  analyticsArtistSparklines(after: String, artistId: String!, before: String, first: Int, last: Int): AnalyticsArtistSparklineConnection
  analyticsArtworkRecommendations(after: String, before: String, first: Int, last: Int, userId: String): AnalyticsArtworkRecommendationConnection
  analyticsCalendarYearMarketPriceInsights(artistId: ID!, endYear: String, medium: String!, startYear: String): [CalendarYearMarketPriceInsights!]
  analyticsCalendarYearPriceInsights(artistId: ID!, endYear: String, startYear: String): [CalendarYearPriceInsights!]
  analyticsLastUpdatedAt: AnalyticsDateTime
  analyticsPartnerStats(partnerId: String!): AnalyticsPartnerStats
  analyticsUserStats(userId: String!): AnalyticsUserStats
  article(id: String!): Article
  articles(auctionID: String, authorID: String, channelID: String, featured: Boolean, ids: [String], layout: ArticleLayout, limit: Int, offset: Int, omit: [String!], published: Boolean = true, showID: String, sort: ArticleSorts): [Article!]!
  articlesConnection(after: String, before: String, channelId: String, featured: Boolean, first: Int, inEditorialFeed: Boolean, last: Int, layout: ArticleLayout, omit: [String!], page: Int, sort: ArticleSorts): ArticleConnection
  artist(id: String!): Artist
  artistSeries(id: ID!): ArtistSeries
  artistSeriesConnection(after: String, artistID: ID, artworkID: ID, before: String, excludeIDs: [ID!], first: Int, last: Int): ArtistSeriesConnection
  artists(ids: [String], page: Int = 1, size: Int, slugs: [String], sort: ArtistSorts): [Artist]
  artistsConnection(after: String, before: String, first: Int, ids: [String], last: Int, letter: String, page: Int, size: Int, slugs: [String], sort: ArtistSorts, term: String): ArtistConnection
  artwork(id: String!): Artwork
  artworkAttributionClasses: [AttributionClass]
  artworkImport(id: String!): ArtworkImport
  artworkMediums: [ArtworkMedium]
  artworkResult(id: String!): ArtworkResult
  artworks(after: String, before: String, first: Int, ids: [String], last: Int, respectParamsOrder: Boolean = false): ArtworkConnection @deprecated(reason: "This is only for use in resolving stitched queries, not for first-class client use!")
  artworksConnection(acquireable: Boolean, additionalGeneIDs: [String], after: String, aggregationPartnerCities: [String], aggregations: [ArtworkAggregation], artistID: String, artistIDs: [String], artistNationalities: [String], artistSeriesID: String, artistSeriesIDs: [String], artworkIDs: [String], atAuction: Boolean, attributionClass: [String], availability: String, before: String, categories: [String], color: String, colors: [String], dimensionRange: String, disableNotForSaleSorting: Boolean, excludeArtworkIDs: [String], extraAggregationGeneIDs: [String], first: Int, forSale: Boolean, framed: Boolean, geneID: String, geneIDs: [String], height: String, importSources: [String], includeAllJSON: Boolean, includeArtworksByFollowedArtists: Boolean, includeMediumFilterInAggregation: Boolean, includeUnpublished: Boolean, input: FilterArtworksInput, inquireableOnly: Boolean, keyword: String, keywordMatchExact: Boolean, last: Int, locationCities: [String], majorPeriods: [String], marketable: Boolean, marketingCollectionID: String, materialsTerms: [String], medium: String, offerable: Boolean, page: Int, partnerCities: [String], partnerID: ID, partnerIDs: [String], period: String, periods: [String], priceRange: String, published: Boolean, saleID: ID, showID: String, signed: Boolean, size: Int, sizes: [ArtworkSizes], sold: Boolean, sort: String, tagID: String, visibilityLevel: String, width: String): FilterArtworksConnection
  artworksForUser(after: String, before: String, excludeArtworkIds: [String] = [], excludeDislikedArtworks: Boolean = false, first: Int, includeBackfill: Boolean!, last: Int, marketable: Boolean, maxWorksPerArtist: Int, onlyAtAuction: Boolean = false, page: Int, userId: String, version: String): ArtworkConnection
  auctionResult(id: String!): AuctionResult
  auctionResultsByArtistsConnection(after: String, artistIds: [ID!]!, before: String, first: Int, last: Int): AuctionResultsByArtistsConnection
  authenticationStatus: AuthenticationStatus!
  author(id: String!): Author
  bankAccount(id: String!): BankAccount
  channel(id: ID!): Channel!
  cities(featured: Boolean = false): [City!]!
  city(near: Near, slug: String): City
  collection(id: String!, userID: String!): Collection
  collectorProfile(userID: String): CollectorProfileType
  collectorProfilesConnection(after: String, before: String, first: Int, last: Int, partnerID: ID, term: String): CollectorProfileTypeConnection
  commerceAbandonedOrders(after: String, artworkId: ID!, before: String, excludeFailedPayments: Boolean, first: Int, from: CommerceDateTime!, last: Int, sellerId: String!): CommerceOrderConnectionWithTotalCount
  commerceBankAccountBalance(bankAccountId: ID, setupIntentId: ID): CommerceBankAccountBalance
  commerceBuyerActivity(buyerId: String!, sellerId: String): CommerceBuyerActivity
  commerceCompetingOrders(after: String, before: String, first: Int, last: Int, orderId: ID!): CommerceOrderConnectionWithTotalCount
  commerceLineItems(after: String, artworkId: String, before: String, editionSetId: String, first: Int, last: Int, orderStates: [CommerceOrderStateEnum!]): CommerceLineItemConnection
  commerceMyOrders(after: String, before: String, filters: [CommerceOrderConnectionFilterEnum!] = [], first: Int, last: Int, mode: CommerceOrderModeEnum, sellerId: String, sort: CommerceOrderConnectionSortEnum, states: [CommerceOrderStateEnum!]): CommerceOrderConnectionWithTotalCount
  commerceOrder(code: String, id: ID): CommerceOrder
  commerceOrders(after: String, before: String, buyerId: String, buyerType: String, first: Int, impulseConversationId: String, last: Int, mode: CommerceOrderModeEnum, sellerId: String, sellerType: String, sort: CommerceOrderConnectionSortEnum, state: CommerceOrderStateEnum, states: [CommerceOrderStateEnum!]): CommerceOrderConnectionWithTotalCount
  consignments(after: String, before: String, first: Int, gravityPartnerId: ID!, last: Int, sort: ConsignmentSort): ConsignmentConnection
  conversation(id: String!): Conversation
  conversationsConnection(after: String, artistId: String, before: String, dismissed: Boolean, first: Int, fromId: String, hasMessage: Boolean, hasReply: Boolean, last: Int, partnerId: String, toBeReplied: Boolean, type: ConversationsInputMode = USER): ConversationConnection
  creditCard(id: String!): CreditCard
  curatedMarketingCollections(size: Int): [MarketingCollection]
  curatedTrendingArtists(after: String, before: String, first: Int, last: Int): ArtistConnection
  departments: [Department!]!
  discoverArtworks(after: String, before: String, curatedPicksSize: Int = 2, excludeArtworkIds: [String], first: Int, last: Int, likedArtworkIds: [String], limit: Int = 5, mltFields: [String] = ["genes", "materials", "tags", "medium"], osWeights: [Float] = [0.6, 0.4]): ArtworkConnection
  discoveryCategoriesConnection(after: String, before: String, first: Int, last: Int): DiscoveryCategoriesConnectionConnection
  discoveryMarketingCollections(after: String, before: String, first: Int, last: Int, size: Int = 12): [MarketingCollection!]
  external: External!
  fair(id: String!): Fair
  fairOrganizer(id: String!): FairOrganizer
  fairs(fairOrganizerID: String, hasFullFeature: Boolean, hasHomepageSection: Boolean, hasListing: Boolean, ids: [String], near: Near, page: Int, size: Int, sort: FairSorts, status: EventStatus): [Fair]
  fairsConnection(after: String, before: String, fairOrganizerID: String, first: Int, hasFullFeature: Boolean, hasHomepageSection: Boolean, hasListing: Boolean, ids: [String], last: Int, near: Near, sort: FairSorts, status: EventStatus, term: String): FairConnection
  feature(id: ID): Feature
  featuredFairs(includeBackfill: Boolean = true, size: Int): [Fair]
  featuredLinksConnection(after: String, before: String, first: Int, last: Int, term: String): FeaturedLinkConnection
  featuresConnection(after: String, before: String, first: Int, last: Int, sort: FeatureSorts, term: String): FeatureConnection
  filterPartners(aggregations: [PartnersAggregation]!, defaultProfilePublic: Boolean, eligibleForCarousel: Boolean, eligibleForListing: Boolean, eligibleForPrimaryBucket: Boolean, eligibleForSecondaryBucket: Boolean, excludeFollowedPartners: Boolean, hasFullProfile: Boolean, ids: [String], includePartnersNearIpBasedLocation: Boolean = false, includePartnersWithFollowedArtists: Boolean, maxDistance: Int, near: String, page: Int, partnerCategories: [String], size: Int, sort: PartnersSortType, term: String, type: [PartnerClassification]): FilterPartners
  gene(id: String!): Gene
  geneFamiliesConnection(after: String, before: String, first: Int, last: Int): GeneFamilyConnection
  genes(size: Int, slugs: [String]): [Gene]
  heroUnit(id: String!): HeroUnit
  heroUnitsConnection(after: String, before: String, first: Int, last: Int, private: Boolean = false, term: String): HeroUnitConnection
  highlights: Highlights
  homePage: HomePage
  homeView: HomeView!
  identityVerification(id: String!): IdentityVerification
  identityVerificationsConnection(after: String, before: String, email: String, first: Int, last: Int, name: String, page: Int, size: Int, userId: String): IdentityVerificationConnection
  invoice(token: String!): Invoice
  job(id: ID!): Job!
  jobs: [Job!]!
  markdown(content: String!): MarkdownContent
  marketPriceInsights(artistId: ID!, medium: String!): MarketPriceInsights
  marketingCategories: [MarketingCollectionCategory!]!
  marketingCollection(slug: String!): MarketingCollection
  marketingCollections(after: String, artistID: String, before: String, category: String, categorySlug: String, first: Int, isFeaturedArtistContent: Boolean, last: Int, size: Int, slugs: [String], sort: MarketingCollectionsSorts): [MarketingCollection!]!
  matchArtist(excludeIDs: [String], page: Int, size: Int, term: String!): [Artist]
  matchConnection(after: String, before: String, entities: [SearchEntity!] = [ARTIST, ARTIST_SERIES, ARTWORK, ARTICLE, CITY, COLLECTION, FAIR, FEATURE, GALLERY, GENE, INSTITUTION, PAGE, PROFILE, SALE, SHOW, TAG, VIEWING_ROOM], first: Int, last: Int, mode: SearchMode = SITE, page: Int = 1, size: Int = 10, term: String!): MatchConnection
  matchPartner(query: String!): [Partner]
  me: Me
  node(id: ID!): Node
  notificationPreferences(authenticationToken: String): [NotificationPreference!]!
  notificationsConnection(after: String, before: String, first: Int, last: Int, notificationTypes: [NotificationTypesEnum]): NotificationConnection
  offer(gravityPartnerId: ID, id: ID!): ConsignmentOffer
  offers(after: String, before: String, first: Int, gravityPartnerId: ID!, last: Int, sort: ConsignmentOfferSort, states: [String!]): ConsignmentOfferConnection
  orderedSet(id: String!): OrderedSet
  orderedSets(key: String!, public: Boolean = true): [OrderedSet]
  orderedSetsConnection(after: String, before: String, first: Int, last: Int, term: String): OrderedSetConnection
  page(id: ID!): Page!
  pagesConnection(after: String, before: String, first: Int, last: Int, term: String): PageConnection
  partner(id: String!): Partner
  partnerArtistDocumentsConnection(after: String, artistID: String!, before: String, first: Int, last: Int, page: Int, partnerID: String!, size: Int): PartnerArtistDocumentConnection @deprecated(reason: "Prefer `partner.documentsConnection`")
  partnerArtworks(after: String, before: String, first: Int, last: Int, partnerID: String!, private: Boolean, viewingRoomID: String): ArtworkConnection @deprecated(reason: "This is only for use in resolving stitched queries, not for first-class client use.")
  partnerCategories(categoryType: PartnerCategoryType, internal: Boolean = false, size: Int): [PartnerCategory]
  partnerCategory(id: String!): PartnerCategory
  partnerShowDocumentsConnection(after: String, before: String, first: Int, last: Int, page: Int, partnerID: String!, showID: String!, size: Int): PartnerShowDocumentConnection @deprecated(reason: "Prefer `partner.documentsConnection`")
  partnersConnection(after: String, before: String, defaultProfilePublic: Boolean, eligibleForListing: Boolean, excludeFollowedPartners: Boolean, first: Int, ids: [String], includePartnersNearIpBasedLocation: Boolean = false, includePartnersWithFollowedArtists: Boolean, last: Int, maxDistance: Int, near: String, partnerCategories: [String], sort: PartnersSortType, type: [PartnerClassification]): PartnerConnection
  phoneNumber(phoneNumber: String!, regionCode: String): PhoneNumberType
  previewSavedSearch(attributes: PreviewSavedSearchAttributes): PreviewSavedSearch
  priceInsights(after: String, artistId: ID!, before: String, first: Int, last: Int, sort: PriceInsightSort): PriceInsightConnection
  profile(id: String!): Profile
  profilesConnection(after: String, before: String, first: Int, ids: [String], last: Int, term: String): ProfileConnection
  purchase(id: String!): Purchase
  purchasesConnection(after: String, artistId: String, artworkId: String, before: String, first: Int, last: Int, page: Int, saleId: String, size: Int, userId: String): PurchasesConnection
  recentlySoldArtworks(after: String, before: String, first: Int, last: Int): RecentlySoldArtworkTypeConnection
  requestLocation(ip: String): RequestLocation
  sale(id: String!): Sale
  saleAgreement(id: ID!): SaleAgreement!
  saleAgreementsConnection(after: String, before: String, first: Int, last: Int, status: SaleAgreementStatus): SaleAgreementConnection
  saleArtwork(id: String!): SaleArtwork
  saleArtworksConnection(after: String, aggregations: [SaleArtworkAggregation], artistIDs: [String], before: String, biddableSale: Boolean, estimateRange: String, excludeClosedLots: Boolean, first: Int, geneIDs: [String], includeArtworksByFollowedArtists: Boolean, isAuction: Boolean, last: Int, liveSale: Boolean, marketable: Boolean, page: Int, saleID: ID, saleSlug: String, size: Int, sort: String, userId: String): SaleArtworksConnection
  salesConnection(after: String, auctionState: AuctionState, before: String, first: Int, ids: [String], isAuction: Boolean = true, last: Int, live: Boolean = true, published: Boolean = true, registered: Boolean, sort: SaleSorts, term: String): SaleConnection
  searchConnection(after: String, aggregations: [SearchAggregation], before: String, entities: [SearchEntity], first: Int, last: Int, mode: SearchMode, page: Int, query: String!): SearchableConnection
  seoExperimentArtists: [String]
  shortcut(id: ID!): Shortcut
  show(id: String!, includeAllShows: Boolean = false): Show
  showsConnection(after: String, atAFair: Boolean, before: String, displayable: Boolean = true, first: Int, hasLocation: Boolean, ids: [String], last: Int, sort: ShowSorts, status: EventStatus, term: String): ShowConnection
  staticContent(id: String): StaticContent
  submission(externalId: ID, id: ID, sessionID: String): ConsignmentSubmission
  submissions(after: String, available: Boolean, before: String, filterByCategory: ConsignmentSubmissionCategoryAggregation, first: Int, ids: [ID!], last: Int, sort: ConsignmentSubmissionSort, userId: [ID!]): ConsignmentSubmissionConnection
  system: System
  tag(id: String!): Tag
  targetSupply: TargetSupply
  user(email: String, id: String): User
  usersConnection(after: String, before: String, first: Int, ids: [String], last: Int, term: String): UserConnection
  vanityURLEntity(id: String!): VanityURLEntityType
  verifyAddress(input: VerifyAddressInput!): VerifyAddressPayload
  verifyUser(email: String!, recaptchaToken: String!): VerifyUser
  viewer: Viewer
  viewingRoom(id: ID!): ViewingRoom
  viewingRooms(after: String, before: String, featured: Boolean, first: Int, last: Int, partnerID: ID, published: Boolean, statuses: [ViewingRoomStatusEnum!] = [live]): ViewingRoomConnection @deprecated(reason: "Use viewingRoomsConnection")
  viewingRoomsConnection(after: String, before: String, featured: Boolean, first: Int, ids: [ID!], last: Int, partnerID: ID, statuses: [ViewingRoomStatusEnum!] = [live]): ViewingRoomsConnection
}

type Quiz {
  completedAt(format: String, timezone: String): String
  id: ID!
  internalID: ID!
  quizArtworkConnection(after: String, before: String, first: Int, last: Int, page: Int, size: Int): QuizArtworkConnection
  recommendedArtworks: [Artwork!]!
  savedArtworks: [Artwork!]!
}

type QuizArtworkConnection {
  edges: [QuizArtworkEdge]
  pageCursors: PageCursors!
  pageInfo: PageInfo!
  totalCount: Int
}

type QuizArtworkEdge {
  cursor: String!
  interactedAt(format: String, timezone: String): String
  node: Artwork
  position: Int!
}

type RecenltySoldArtworkPerformance {
  mid: String
}

type RecentlySoldArtworkType {
  artwork: Artwork
  highEstimate: Money
  lowEstimate: Money
  performance: RecenltySoldArtworkPerformance
  priceRealized: Money
}

type RecentlySoldArtworkTypeConnection {
  edges: [RecentlySoldArtworkTypeEdge]
  pageInfo: PageInfo!
}

type RecentlySoldArtworkTypeEdge {
  cursor: String!
  node: RecentlySoldArtworkType
}

input RecordArtworkViewInput {
  artwork_id: String!
  clientMutationId: String
}

type RecordArtworkViewPayload {
  artworkId: String!
  artwork_id: String! @deprecated(reason: "Use artworkId")
  clientMutationId: String
}

enum RelatedArtistsKind {
  CONTEMPORARY
  MAIN
}

type RelatedArtworkGrid implements ArtworkContextGrid {
  artworksConnection(after: String, before: String, first: Int, last: Int): ArtworkConnection
  ctaHref: String
  ctaTitle: String
  title: String
}

type RemoveArtworkFromPartnerShowFailure {
  mutationError: GravityMutationError
}

input RemoveArtworkFromPartnerShowMutationInput {
  artworkId: String!
  clientMutationId: String
  partnerId: String!
  showId: String!
}

type RemoveArtworkFromPartnerShowMutationPayload {
  clientMutationId: String
  showOrError: RemoveArtworkFromPartnerShowResponseOrError
}

union RemoveArtworkFromPartnerShowResponseOrError = RemoveArtworkFromPartnerShowFailure | RemoveArtworkFromPartnerShowSuccess

type RemoveArtworkFromPartnerShowSuccess {
  show: Show
}

type RemoveArtworkImportImageFailure {
  mutationError: GravityMutationError
}

input RemoveArtworkImportImageInput {
  artworkImportID: String!
  clientMutationId: String
  imageID: String!
}

type RemoveArtworkImportImagePayload {
  clientMutationId: String
  removeArtworkImportImageOrError: RemoveArtworkImportImageResponseOrError
}

union RemoveArtworkImportImageResponseOrError = RemoveArtworkImportImageFailure | RemoveArtworkImportImageSuccess

type RemoveArtworkImportImageSuccess {
  artworkImport: ArtworkImport
  success: Boolean!
}

input RemoveAssetFromConsignmentSubmissionInput {
  assetID: String
  clientMutationId: String
  sessionID: String
}

type RemoveAssetFromConsignmentSubmissionPayload {
  asset: ConsignmentSubmissionCategoryAsset
  clientMutationId: String
}

type RemoveInstallShotFromPartnerShowFailure {
  mutationError: GravityMutationError
}

input RemoveInstallShotFromPartnerShowMutationInput {
  clientMutationId: String
  imageId: String!
  showId: String!
}

type RemoveInstallShotFromPartnerShowMutationPayload {
  clientMutationId: String
  showOrError: RemoveInstallShotFromPartnerShowResponseOrError
}

union RemoveInstallShotFromPartnerShowResponseOrError = RemoveInstallShotFromPartnerShowFailure | RemoveInstallShotFromPartnerShowSuccess

type RemoveInstallShotFromPartnerShowSuccess {
  show: Show
}

type RepositionArtworksInPartnerShowFailure {
  mutationError: GravityMutationError
}

input RepositionArtworksInPartnerShowMutationInput {
  artworkIds: [String!]!
  clientMutationId: String
  partnerId: String!
  showId: String!
}

type RepositionArtworksInPartnerShowMutationPayload {
  clientMutationId: String
  showOrError: RepositionArtworksInPartnerShowResponseOrError
}

union RepositionArtworksInPartnerShowResponseOrError = RepositionArtworksInPartnerShowFailure | RepositionArtworksInPartnerShowSuccess

type RepositionArtworksInPartnerShowSuccess {
  show: Show
}

type RepositionInstallShotsInPartnerShowFailure {
  mutationError: GravityMutationError
}

input RepositionInstallShotsInPartnerShowMutationInput {
  clientMutationId: String
  imageIds: [String!]!
  showId: String!
}

type RepositionInstallShotsInPartnerShowMutationPayload {
  clientMutationId: String
  showOrError: RepositionInstallShotsInPartnerShowResponseOrError
}

union RepositionInstallShotsInPartnerShowResponseOrError = RepositionInstallShotsInPartnerShowFailure | RepositionInstallShotsInPartnerShowSuccess

type RepositionInstallShotsInPartnerShowSuccess {
  show: Show
}

type RepositionPartnerArtistArtworksFailure {
  mutationError: GravityMutationError
}

input RepositionPartnerArtistArtworksMutationInput {
  artistId: String!
  artworkIds: [String!]!
  clientMutationId: String
  partnerId: String!
}

type RepositionPartnerArtistArtworksMutationPayload {
  clientMutationId: String
  partnerOrError: RepositionPartnerArtistArtworksResponseOrError
}

union RepositionPartnerArtistArtworksResponseOrError = RepositionPartnerArtistArtworksFailure | RepositionPartnerArtistArtworksSuccess

type RepositionPartnerArtistArtworksSuccess {
  partner: Partner
}

type RepositionPartnerLocationsFailure {
  mutationError: GravityMutationError
}

input RepositionPartnerLocationsMutationInput {
  clientMutationId: String
  locationIds: [String!]!
  partnerId: String!
}

type RepositionPartnerLocationsMutationPayload {
  clientMutationId: String
  partnerOrError: RepositionPartnerLocationsSuccessOrError
}

type RepositionPartnerLocationsSuccess {
  partner: Partner
}

union RepositionPartnerLocationsSuccessOrError = RepositionPartnerLocationsFailure | RepositionPartnerLocationsSuccess

type Request {
  ipAddress: String!
}

input RequestConditionReportInput {
  clientMutationId: String
  saleArtworkID: String!
}

type RequestConditionReportPayload {
  clientMutationId: String
  conditionReportRequest: ConditionReportRequest!
}

input RequestCredentialsForAssetUploadInput {
  acl: String!
  clientMutationId: String
  name: String!
}

type RequestCredentialsForAssetUploadPayload {
  asset: Credentials
  clientMutationId: String
}

type RequestError {
  statusCode: Int!
}

type RequestLocation {
  cached: Int
  city: String
  coordinates: LatLng
  country: String
  countryCode: String
  id: ID!
}

input RequestPriceEstimateInput {
  artworkId: String!
  clientMutationId: String
  requesterEmail: String
  requesterName: String
  requesterPhoneNumber: String
}

union RequestPriceEstimateMutationType = RequestPriceEstimatedMutationFailure | RequestPriceEstimatedMutationSuccess

type RequestPriceEstimatePayload {
  clientMutationId: String
  priceEstimateParamsOrError: RequestPriceEstimateMutationType
}

type RequestPriceEstimatedMutationFailure {
  mutationError: GravityMutationError
}

type RequestPriceEstimatedMutationSuccess {
  submittedPriceEstimateParams: SubmittedPriceEstimateParams
}

type ResizedImageUrl {
  factor: Float!
  height: Int
  src: String!
  srcSet: String!
  url: String!
  width: Int
}

input S3LocationInput {
  bucket: String!
  key: String!
}

type S3PolicyConditionsType {
  acl: String!
  bucket: String!
  geminiKey: String!
  successActionStatus: String!
}

type S3PolicyDocumentType {
  conditions: S3PolicyConditionsType!
  expiration: String!
}

type SEPADebit {
  last4: String!
}

type Sale implements Node {
  artworksConnection(after: String, before: String, cached: Boolean = true, exclude: [String], first: Int, last: Int, status: SaleArtworkStatus): ArtworkConnection
  associatedSale: Sale
  bidIncrements: [BidIncrement]
  bidder: Bidder
  buyersPremium: [BuyersPremium]
  cached: Int
  cascadingEndTime: SaleCascadingEndTime
  cascadingEndTimeIntervalMinutes: Int
  collectPayments: Boolean!
  coverImage: Image
  currency: String
  description(format: Format): String
  displayTimelyAt: String
  eligibleSaleArtworksCount: Int
  endAt(format: String, timezone: String): String
  endedAt(format: String, timezone: String): String
  eventEndAt(format: String, timezone: String): String
  eventStartAt(format: String, timezone: String): String
  extendedBiddingIntervalMinutes: Int
  extendedBiddingPeriodMinutes: Int
  featuredKeywords: [String!]!
  formattedStartDateTime: String
  hideTotal: Boolean
  href: String
  id: ID!
  initials(length: Int = 3): String
  internalID: ID!
  isArtsyLicensed: Boolean!
  isAuction: Boolean
  isAuctionPromo: Boolean
  isBenefit: Boolean
  isClosed: Boolean
  isGalleryAuction: Boolean
  isLiveOpen: Boolean
  isLiveOpenHappened: Boolean
  isLotConditionsReportEnabled: Boolean
  isLotsClosing: Boolean!
  isOpen: Boolean
  isPreliminary: Boolean
  isPreview: Boolean
  isRegistrationClosed: Boolean
  isWithBuyersPremium: Boolean
  liveStartAt(format: String, timezone: String): String
  liveURLIfOpen: String
  name: String
  partner: Partner
  profile: Profile
  promotedSale: Sale
  registrationEndsAt(format: String, timezone: String): String
  registrationStatus: Bidder
  requireBidderApproval: Boolean
  requireIdentityVerification: Boolean
  saleAgreement: SaleAgreement
  saleArtwork(id: String!): SaleArtwork
  saleArtworksConnection(after: String, all: Boolean = false, before: String, first: Int, internalIDs: [ID], last: Int, status: SaleArtworkStatus): SaleArtworkConnection
  saleType: String
  slug: ID!
  startAt(format: String, timezone: String): String
  status: String
  symbol: String
  timeZone: String
  totalRaised: Money
  userNeedsIdentityVerification: Boolean
}

type SaleAdministrationFields {
  collectorVetting: String
  id: ID!
  marketingTier: String
  marketingTierConfirmed: Boolean!
  partnerTier: String
  region: String
  status: String
}

type SaleAgreement {
  content(format: Format): String
  createdAt(format: String, timezone: String): String
  displayEndAt(format: String, timezone: String): String
  displayStartAt(format: String, timezone: String): String
  id: ID!
  internalID: ID!
  published: Boolean!
  sale: Sale
  saleId: String!
  status: SaleAgreementStatus!
  updatedAt(format: String, timezone: String): String
  userId: String!
}

type SaleAgreementConnection {
  edges: [SaleAgreementEdge]
  pageCursors: PageCursors!
  pageInfo: PageInfo!
  totalCount: Int
}

type SaleAgreementEdge {
  cursor: String!
  node: SaleAgreement
}

enum SaleAgreementStatus {
  ARCHIVED
  CURRENT
  PAST
}

type SaleArtwork implements ArtworkEdgeInterface & Node {
  artwork: Artwork
  cached: Int
  calculatedCost(bidAmountMinor: Int!): CalculatedCost
  counts: SaleArtworkCounts
  currency: String
  currentBid: SaleArtworkCurrentBid
  cursor: String
  endAt(format: String, timezone: String): String
  endedAt(format: String, timezone: String): String
  estimate: String
  estimateCents: Int
  extendedBiddingEndAt(format: String, timezone: String): String
  formattedEndDateTime: String
  formattedStartDateTime: String
  highEstimate: SaleArtworkHighEstimate
  highestBid: SaleArtworkHighestBid
  id: ID!
  increments(useMyMaxBid: Boolean): [BidIncrementsFormatted]
  internalID: ID!
  isBidOn: Boolean
  isBiddable: Boolean
  isHighestBidder: Boolean
  isWatching: Boolean
  isWithReserve: Boolean
  lotID: String
  lotLabel(trim: Boolean = false): String
  lotState: CausalityLotState
  lowEstimate: SaleArtworkLowEstimate
  minimumNextBid: SaleArtworkMinimumNextBid
  node: Artwork
  openingBid: SaleArtworkOpeningBid
  position: Float
  reserve: SaleArtworkReserve
  reserveMessage: String
  reserveStatus: String
  sale: Sale
  saleID: String
  slug: ID!
  symbol: String
}

enum SaleArtworkAggregation {
  ARTIST
  FOLLOWED_ARTISTS
  MEDIUM
  TOTAL
}

type SaleArtworkConnection {
  edges: [SaleArtworkEdge]
  pageInfo: PageInfo!
}

type SaleArtworkCounts {
  bidderPositions(format: String, label: String): FormattedNumber
}

type SaleArtworkCurrentBid {
  amount(decimal: String = ".", disambiguate: Boolean = false, format: String = "%s%v", precision: Int = 0, symbol: String, thousand: String = ","): String
  cents: Float
  display: String
}

type SaleArtworkEdge {
  cursor: String!
  node: SaleArtwork
}

type SaleArtworkHighEstimate {
  amount(decimal: String = ".", disambiguate: Boolean = false, format: String = "%s%v", precision: Int = 0, symbol: String, thousand: String = ","): String
  cents: Float
  display: String
}

type SaleArtworkHighestBid {
  amount(decimal: String = ".", disambiguate: Boolean = false, format: String = "%s%v", precision: Int = 0, symbol: String, thousand: String = ","): String
  cents: Int
  createdAt(format: String, timezone: String): String
  display: String
  isCancelled: Boolean
}

type SaleArtworkLowEstimate {
  amount(decimal: String = ".", disambiguate: Boolean = false, format: String = "%s%v", precision: Int = 0, symbol: String, thousand: String = ","): String
  cents: Float
  display: String
}

type SaleArtworkMinimumNextBid {
  amount(decimal: String = ".", disambiguate: Boolean = false, format: String = "%s%v", precision: Int = 0, symbol: String, thousand: String = ","): String
  cents: Float
  display: String
}

type SaleArtworkOpeningBid {
  amount(decimal: String = ".", disambiguate: Boolean = false, format: String = "%s%v", precision: Int = 0, symbol: String, thousand: String = ","): String
  cents: Float
  display: String
}

type SaleArtworkReserve {
  amount(decimal: String = ".", disambiguate: Boolean = false, format: String = "%s%v", precision: Int = 0, symbol: String, thousand: String = ","): String
  cents: Float
  display: String
}

enum SaleArtworkStatus {
  CLOSED
  OPEN
}

type SaleArtworksAggregationResults {
  counts: [AggregationCount]
  slice: SaleArtworkAggregation
}

type SaleArtworksConnection implements ArtworkConnectionInterface {
  aggregations: [SaleArtworksAggregationResults]
  counts: FilterSaleArtworksCounts
  edges: [SaleArtwork]
  pageCursors: PageCursors!
  pageInfo: PageInfo!
  totalCount: Int
}

type SaleCascadingEndTime {
  formattedStartDateTime: String
  intervalLabel: String
}

type SaleConnection {
  edges: [SaleEdge]
  pageCursors: PageCursors!
  pageInfo: PageInfo!
  totalCount: Int
}

type SaleEdge {
  cursor: String!
  node: Sale
}

type SaleRegistration {
  bidder: Bidder
  id: ID!
  isRegistered: Boolean
  sale: Sale
}

type SaleRegistrationConnection {
  edges: [SaleRegistrationEdge]
  pageInfo: PageInfo!
}

type SaleRegistrationEdge {
  cursor: String!
  node: SaleRegistration
}

enum SaleSorts {
  CREATED_AT_ASC
  CREATED_AT_DESC
  ELIGIBLE_SALE_ARTWORKS_COUNT_ASC
  ELIGIBLE_SALE_ARTWORKS_COUNT_DESC
  END_AT_ASC
  END_AT_DESC
  LICENSED_TIMELY_AT_NAME_DESC
  NAME_ASC
  NAME_DESC
  START_AT_ASC
  START_AT_DESC
  TIMELY_AT_NAME_ASC
  TIMELY_AT_NAME_DESC
  _ID_ASC
  _ID_DESC
}

input SaveArtworkInput {
  artworkID: String
  clientMutationId: String
  remove: Boolean
}

type SaveArtworkPayload {
  artwork: Artwork
  clientMutationId: String
  me: Me!
}

type SavedArtworksConnection {
  default: Boolean!
  description: String!
  edges: [SavedArtworksEdge]
  name: String!
  pageCursors: PageCursors!
  pageInfo: PageInfo!
  private: Boolean!
  totalCount: Int
}

type SavedArtworksEdge {
  cursor: String!
  node: Artwork
}

enum SearchAggregation {
  TYPE
}

type SearchAggregationResults {
  counts: [AggregationCount]
  slice: SearchAggregation
}

enum SearchCriteriaFields {
  acquireable
  additionalGeneIDs
  artistIDs
  artistSeriesIDs
  atAuction
  attributionClass
  colors
  height
  inquireableOnly
  locationCities
  majorPeriods
  materialsTerms
  offerable
  partnerIDs
  priceRange
  sizes
  width
}

type SearchCriteriaLabel {
  displayValue: String!
  field: String!
  name: String!
  value: String!
}

enum SearchEntity {
  ARTICLE
  ARTIST
  ARTIST_SERIES
  ARTWORK
  CITY
  COLLECTION
  FAIR
  FEATURE
  GALLERY
  GENE
  INSTITUTION
  PAGE
  PROFILE
  SALE
  SHOW
  TAG
  VIEWING_ROOM
}

enum SearchMode {
  AUTOSUGGEST
  SITE
}

interface Searchable {
  displayLabel: String
  href: String
  imageUrl: String
}

type SearchableConnection {
  aggregations: [SearchAggregationResults]
  edges: [SearchableEdge]
  pageCursors: PageCursors!
  pageInfo: PageInfo!
  totalCount: Int
}

type SearchableEdge {
  cursor: String!
  node: Searchable
}

type SearchableItem implements Node & Searchable {
  description: String
  displayLabel: String
  displayType: String
  href: String
  id: ID!
  imageUrl: String
  internalID: ID!
  slug: ID!
}

interface SecondFactor {
  disabledAt(format: String, timezone: String): String
  enabled: Boolean!
  enabledAt(format: String, timezone: String): String
  internalID: ID!
  kind: SecondFactorKind!
}

enum SecondFactorKind {
  app
  backup
  sms
}

union SecondFactorOrErrorsUnion = AppSecondFactor | Errors | SmsSecondFactor

interface Sellable {
  availability: String
  dimensions: dimensions
  displayLabel: String
  displayPriceRange: Boolean
  editionOf: String
  id: ID!
  internalDisplayPrice: String
  internalID: ID!
  isAcquireable: Boolean
  isForSale: Boolean
  isInAuction: Boolean
  isInquireable: Boolean
  isOfferable: Boolean
  isOfferableFromInquiry: Boolean
  isPriceHidden: Boolean
  isSold: Boolean
  listPrice: ListPrice
  listingOptions: ArtworkListingOptions
  priceListed: Money
  published: Boolean
  saleMessage: String
}

union SellerType = Partner

type SendConfirmationEmailMutationFailure {
  mutationError: GravityMutationError
}

input SendConfirmationEmailMutationInput {
  clientMutationId: String
}

type SendConfirmationEmailMutationPayload {
  clientMutationId: String
  confirmationOrError: SendConfirmationEmailMutationType
}

type SendConfirmationEmailMutationSuccess {
  confirmationSentAt: String
  unconfirmedEmail: String
}

union SendConfirmationEmailMutationType = SendConfirmationEmailMutationFailure | SendConfirmationEmailMutationSuccess

input SendConversationMessageMutationInput {
  attachments: [ConversationMessageAttachmentInput!]
  bodyHTML: String
  bodyText: String!
  clientMutationId: String
  from: String!
  fromId: String
  id: String!
  replyAll: Boolean = true
  replyToMessageID: String!
  to: [String]
}

type SendConversationMessageMutationPayload {
  clientMutationId: String
  conversation: Conversation
  messageEdge: MessageEdge
}

type SendFeedbackMutationFailure {
  mutationError: GravityMutationError
}

input SendFeedbackMutationInput {
  clientMutationId: String
  email: String
  message: String!
  name: String
  url: String
}

type SendFeedbackMutationPayload {
  clientMutationId: String
  feedbackOrError: SendFeedbackMutationType
}

type SendFeedbackMutationSuccess {
  feedback: Feedback
}

union SendFeedbackMutationType = SendFeedbackMutationFailure | SendFeedbackMutationSuccess

input SendIdentityVerificationEmailMutationInput {
  clientMutationId: String
  email: String
  initiatorID: String
  name: String
  orderID: String
  saleID: String
  sendEmail: Boolean
  userID: String
}

type SendIdentityVerificationEmailMutationPayload {
  clientMutationId: String
  confirmationOrError: IdentityVerificationEmailMutationType
}

type Services {
  convection: ConvectionService!
  metaphysics: MetaphysicsService!
}

type ShippingLine {
  amount: Money
  amountFallbackText: String
  displayName: String!
}

type Shortcut {
  id: ID!
  internalID: ID!
  long: String!
  short: String!
}

type Show implements EntityWithFilterArtworksConnectionInterface & Node {
  artists: [Artist]
  artistsConnection(after: String, before: String, first: Int, last: Int): ArtistConnection
  artistsGroupedByName: [ArtistGroup]
  artistsWithoutArtworks: [Artist]
  artworksConnection(after: String, before: String, exclude: [String], first: Int, forSale: Boolean = false, last: Int, published: Boolean = true): ArtworkConnection
  artworksCount: Int
  cached: Int
  city: String
  counts: ShowCounts
  coverImage: Image
  createdAt(format: String, timezone: String): String
  description: String
  documentsConnection(after: String, before: String, first: Int, last: Int): PartnerDocumentConnection
  endAt(format: String, timezone: String): String
  events: [ShowEventType]
  eventsConnection(after: String, before: String, first: Int, last: Int): ShowEventConnection
  exhibitionPeriod(format: ExhibitionPeriodFormat = LONG): String
  fair: Fair
  filterArtworksConnection(acquireable: Boolean, additionalGeneIDs: [String], after: String, aggregationPartnerCities: [String], aggregations: [ArtworkAggregation], artistID: String, artistIDs: [String], artistNationalities: [String], artistSeriesID: String, artistSeriesIDs: [String], artworkIDs: [String], atAuction: Boolean, attributionClass: [String], availability: String, before: String, categories: [String], color: String, colors: [String], dimensionRange: String, disableNotForSaleSorting: Boolean, excludeArtworkIDs: [String], extraAggregationGeneIDs: [String], first: Int, forSale: Boolean, framed: Boolean, geneID: String, geneIDs: [String], height: String, importSources: [String], includeAllJSON: Boolean, includeArtworksByFollowedArtists: Boolean, includeMediumFilterInAggregation: Boolean, includeUnpublished: Boolean, input: FilterArtworksInput, inquireableOnly: Boolean, keyword: String, keywordMatchExact: Boolean, last: Int, locationCities: [String], majorPeriods: [String], marketable: Boolean, marketingCollectionID: String, materialsTerms: [String], medium: String, offerable: Boolean, page: Int, partnerCities: [String], partnerID: ID, partnerIDs: [String], period: String, periods: [String], priceRange: String, published: Boolean, saleID: ID, showID: String, signed: Boolean, size: Int, sizes: [ArtworkSizes], sold: Boolean, sort: String, tagID: String, visibilityLevel: String, width: String): FilterArtworksConnection
  followedArtistsConnection(after: String, before: String, first: Int, last: Int): ShowFollowArtistConnection
  hasLocation: Boolean
  href: String
  id: ID!
  images(default: Boolean, page: Int, size: Int): [Image]
  imagesConnection(after: String, before: String, first: Int, isDefault: Boolean, last: Int): ImageConnection
  internalID: ID!
  isActive: Boolean
  isDisplayable: Boolean
  isDisplayableOnPartnerProfile: Boolean
  isFairBooth: Boolean
  isFeatured: Boolean
  isFollowed: Boolean
  isOnlineExclusive: Boolean!
  isReference: Boolean
  isStubShow: Boolean
  kind: String
  location: Location
  metaImage: Image
  name: String
  nearbyShowsConnection(after: String, before: String, discoverable: Boolean, first: Int, last: Int, sort: ShowSorts, status: EventStatus = CURRENT): ShowConnection
  openingReceptionText: String
  partner: PartnerTypes
  pressRelease(format: Format): String
  pressReleaseUrl: String
  slug: ID!
  startAt(format: String, timezone: String): String
  status: String
  statusUpdate(maxDays: Int): String
  type: String
  viewingRoomIDs: [String!]!
  viewingRoomsConnection(after: String, before: String, first: Int, last: Int, statuses: [ViewingRoomStatusEnum!]): ViewingRoomsConnection
}

type ShowArtworkGrid implements ArtworkContextGrid {
  artworksConnection(after: String, before: String, first: Int, last: Int): ArtworkConnection
  ctaHref: String
  ctaTitle: String
  title: String
}

type ShowConnection {
  edges: [ShowEdge]
  pageCursors: PageCursors!
  pageInfo: PageInfo!
  totalCount: Int
}

type ShowCounts {
  artists: Int
  artworks(artistID: String): Int
  eligibleArtworks(format: String, label: String): FormattedNumber
  publishedArtworks: Int
  unpublishedArtworks: Int
}

type ShowEdge {
  cursor: String!
  node: Show
}

type ShowEventConnection {
  edges: [ShowEventEdge]
  pageCursors: PageCursors!
  pageInfo: PageInfo!
  totalCount: Int
}

type ShowEventEdge {
  cursor: String!
  node: ShowEventType
}

type ShowEventType {
  dateTimeRange: String
  description: String
  endAt(format: String, timezone: String): String
  eventType: String
  exhibitionPeriod(format: ExhibitionPeriodFormat = LONG): String
  formattedTimeZone: String
  id: ID!
  internalID: ID!
  startAt(format: String, timezone: String): String
  timeZone: String
  title: String
}

type ShowFollowArtist {
  artist: Artist
}

type ShowFollowArtistConnection {
  edges: [ShowFollowArtistEdge]
  pageInfo: PageInfo!
}

type ShowFollowArtistEdge {
  cursor: String!
  node: ShowFollowArtist
}

type ShowOpenedNotificationItem {
  partner: Partner
  showsConnection(after: String, before: String, first: Int, last: Int): ShowConnection
}

enum ShowSorts {
  CREATED_AT_DESC
  END_AT_ASC
  END_AT_DESC
  FEATURED_ASC
  FEATURED_DESC
  FEATURED_DESC_END_AT_DESC
  NAME_ASC
  NAME_DESC
  PARTNER_ASC
  SORTABLE_NAME_ASC
  SORTABLE_NAME_DESC
  START_AT_ASC
  START_AT_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}

type SmsSecondFactor implements SecondFactor {
  countryCode: String
  disabledAt(format: String, timezone: String): String
  enabled: Boolean!
  enabledAt(format: String, timezone: String): String
  formattedPhoneNumber: String
  internalID: ID!
  kind: SecondFactorKind!
  phoneNumber: String
}

input SmsSecondFactorAttributes {
  countryCode: String
  phoneNumber: String
}

union SmsSecondFactorOrErrorsUnion = Errors | SmsSecondFactor

type SpecialistBio {
  bio: String!
  email: String!
  firstName: String!
  image: Image!
  jobTitle: String!
  name: String!
}

type StartIdentityVerificationFailure {
  mutationError: GravityMutationError
}

union StartIdentityVerificationResponseOrError = StartIdentityVerificationFailure | StartIdentityVerificationSuccess

type StartIdentityVerificationSuccess {
  identityVerificationFlowUrl: String
  identityVerificationId: String
}

type StaticContent {
  content(format: Format): String
  id: ID!
  internalID: ID!
  name: String
  slug: ID!
  specialistBios: [SpecialistBio!]
}

enum SubGroupInputStatus {
  SUBSCRIBED
  UNSUBSCRIBED
}

enum SubGroupStatus {
  SUBSCRIBED
  UNSUBSCRIBED
}

type SubmissionEdge {
  cursor: String!
  node: ConsignmentSubmission
}

input SubmitInquiryRequestMutationInput {
  clientMutationId: String
  contactGallery: Boolean
  inquireableID: String!
  inquireableType: String!
  message: String
  questions: [InquiryQuestionInput]
}

type SubmitInquiryRequestMutationPayload {
  clientMutationId: String
  inquiryRequest: InquiryRequest
}

type SubmittedPriceEstimateParams {
  artworkId: String!
  requesterEmail: String
  requesterName: String
  requesterPhoneNumber: String
}

type SubtotalLine {
  amount: Money
  amountFallbackText: String
  displayName: String!
}

type SuggestedAddress {
  addressLine1: String!
  addressLine2: String
  city: String!
  country: String!
  postalCode: String!
  region: String
}

type SuggestedAddressFields {
  address: SuggestedAddress
  lines: [String]
}

type System {
  algolia: Algolia @deprecated(reason: "Algolia search is no longer supported")
  causalityJWT(role: LiveAuctionRole, saleID: String!): String
  request: Request
  services: Services
  time: SystemTime
  userRoles: [UserRole!]!
}

type SystemTime {
  day: Int
  hour: Int
  iso8601: String
  min: Int
  month: Int
  sec: Int
  unix: Int
  wday: Int
  year: Int
}

type Tag implements Node {
  cached: Int
  count: Int
  description: String
  filterArtworksConnection(acquireable: Boolean, additionalGeneIDs: [String], after: String, aggregationPartnerCities: [String], aggregations: [ArtworkAggregation], artistID: String, artistIDs: [String], artistNationalities: [String], artistSeriesID: String, artistSeriesIDs: [String], artworkIDs: [String], atAuction: Boolean, attributionClass: [String], availability: String, before: String, categories: [String], color: String, colors: [String], dimensionRange: String, disableNotForSaleSorting: Boolean, excludeArtworkIDs: [String], extraAggregationGeneIDs: [String], first: Int, forSale: Boolean, framed: Boolean, geneID: String, geneIDs: [String], height: String, importSources: [String], includeAllJSON: Boolean, includeArtworksByFollowedArtists: Boolean, includeMediumFilterInAggregation: Boolean, includeUnpublished: Boolean, input: FilterArtworksInput, inquireableOnly: Boolean, keyword: String, keywordMatchExact: Boolean, last: Int, locationCities: [String], majorPeriods: [String], marketable: Boolean, marketingCollectionID: String, materialsTerms: [String], medium: String, offerable: Boolean, page: Int, partnerCities: [String], partnerID: ID, partnerIDs: [String], period: String, periods: [String], priceRange: String, published: Boolean, saleID: ID, showID: String, signed: Boolean, size: Int, sizes: [ArtworkSizes], sold: Boolean, sort: String, tagID: String, visibilityLevel: String, width: String): FilterArtworksConnection
  href: String
  id: ID!
  image: Image
  internalID: ID!
  name: String
  slug: ID!
}

type TargetSupply {
  microfunnel: [TargetSupplyMicrofunnelItem]
}

type TargetSupplyMicrofunnelItem {
  artist: Artist
  artworksConnection(after: String, before: String, first: Int, last: Int, randomize: Boolean): ArtworkConnection
  metadata: TargetSupplyMicrofunnelMetadata
}

type TargetSupplyMicrofunnelMetadata {
  highestRealized: String
  realized: String
  recentlySoldArtworkIDs: [String]
  roundedUniqueVisitors: String
  roundedViews: String
  str: String
  uniqueVisitors: String
  views: String
}

type Task implements Node {
  actionLink: String!
  createdAt(format: String, timezone: String): String
  dismissedAt(format: String, timezone: String): String
  expiresAt(format: String, timezone: String): String
  id: ID!
  imageUrl: String!
  internalID: ID!
  message: String!
  resolvedAt(format: String, timezone: String): String
  sourceId: String
  sourceType: String
  taskType: String!
  title: String!
}

type TaskConnection {
  edges: [TaskEdge]
  pageCursors: PageCursors!
  pageInfo: PageInfo!
  totalCount: Int
}

type TaskEdge {
  cursor: String!
  node: Task
}

type TaxInfo {
  displayText: String!
  moreInfo: TaxMoreInfo!
}

type TaxLine {
  amount: Money
  amountFallbackText: String
  displayName: String!
}

type TaxMoreInfo {
  displayText: String!
  url: String!
}

type ToggleArtworkImportRowExclusionFailure {
  mutationError: GravityMutationError
}

input ToggleArtworkImportRowExclusionInput {
  artworkImportID: String!
  artworkImportRowID: String!
  clientMutationId: String
  excludedFromImport: Boolean!
}

type ToggleArtworkImportRowExclusionPayload {
  clientMutationId: String
  toggleArtworkImportRowExclusionOrError: ToggleArtworkImportRowExclusionResponseOrError
}

union ToggleArtworkImportRowExclusionResponseOrError = ToggleArtworkImportRowExclusionFailure | ToggleArtworkImportRowExclusionSuccess

type ToggleArtworkImportRowExclusionSuccess {
  artworkImport: ArtworkImport
}

type TotalLine {
  amount: Money
  amountFallbackText: String
  displayName: String!
}

input TransferMyCollectionInput {
  clientMutationId: String
  emailFrom: String
  emailTo: String
  idFrom: String
  idTo: String
}

type TransferMyCollectionPayload {
  artworkCountOrError: TransferMyCollectionSuccessOrErrorsUnion!
  clientMutationId: String
}

type TransferMyCollectionSuccess {
  count: Int!
}

union TransferMyCollectionSuccessOrErrorsUnion = Errors | TransferMyCollectionSuccess

type TrendingArtists {
  artists: [Artist]
}

enum TriggerCampaignID {
  ART_QUIZ
}

input TriggerCampaignInput {
  campaignID: TriggerCampaignID!
  clientMutationId: String
}

type TriggerCampaignMutationFailure {
  message: String!
  mutationError: GravityMutationError
  statusCode: Int
}

type TriggerCampaignMutationSuccess {
  message: String!
  statusCode: Int
  success: Boolean
}

union TriggerCampaignMutationSuccessOrError = TriggerCampaignMutationFailure | TriggerCampaignMutationSuccess

type TriggerCampaignPayload {
  clientMutationId: String
  successOrError: TriggerCampaignMutationSuccessOrError
}

type USBankAccount {
  bankName: String!
  last4: String!
}

union UnderlyingCurrentEvent = Sale | Show

input UnlinkAuthenticationMutationInput {
  clientMutationId: String
  provider: AuthenticationProvider!
}

type UnlinkAuthenticationMutationPayload {
  clientMutationId: String
  me: Me!
}

input UnpublishViewingRoomInput {
  clientMutationId: String
  viewingRoomID: ID!
}

type UnpublishViewingRoomPayload {
  clientMutationId: String
  viewingRoom: ViewingRoom!
}

type UpdateAlertFailure {
  mutationError: GravityMutationError
}

union UpdateAlertResponseOrError = UpdateAlertFailure | UpdateAlertSuccess

type UpdateAlertSuccess {
  alert: Alert
}

input UpdateAppSecondFactorInput {
  attributes: AppSecondFactorAttributes!
  clientMutationId: String
  secondFactorID: ID!
}

type UpdateAppSecondFactorPayload {
  clientMutationId: String
  secondFactorOrErrors: AppSecondFactorOrErrorsUnion!
}

type UpdateArtistFailure {
  mutationError: GravityMutationError
}

input UpdateArtistMutationInput {
  alternateNames: [String!]
  awards: String
  biennials: String
  birthday: String
  blurb: String
  clientMutationId: String
  coverArtworkId: String
  criticallyAcclaimed: Boolean
  deathday: String
  displayName: String
  first: String
  gender: String
  groupIndicator: ArtistGroupIndicator
  hometown: String
  id: String!
  last: String
  location: String
  middle: String
  nationality: String
  public: Boolean
  recentShow: String
  reviewSources: String
  targetSupplyPriority: ArtistTargetSupplyPriority
  targetSupplyType: ArtistTargetSupplyType
  vanguardYear: String
}

type UpdateArtistMutationPayload {
  artistOrError: UpdateArtistResponseOrError
  clientMutationId: String
}

union UpdateArtistResponseOrError = UpdateArtistFailure | UpdateArtistSuccess

type UpdateArtistSuccess {
  artist: Artist
}

input UpdateArtworkEditionSetInput {
  artistProofs: String
  availability: String
  delete: Boolean
  displayPriceRange: Boolean
  ecommerce: Boolean
  editionSize: String
  framed: Boolean
  framedDepth: String
  framedDiameter: String
  framedHeight: String
  framedMetric: String
  framedWidth: String
  id: String!
  offer: Boolean
  partnerLocationId: String
  priceCurrency: String
  priceHidden: Boolean
  priceIncludesTax: Boolean
  priceListed: String
  priceMax: Int
  priceMin: Int
  published: Boolean
  shippingWeight: Float
  shippingWeightMetric: String
}

type UpdateArtworkImportCurrencyFailure {
  mutationError: GravityMutationError
}

input UpdateArtworkImportCurrencyInput {
  artworkImportID: String!
  clientMutationId: String
  fromCurrency: String!
  toCurrency: String!
}

type UpdateArtworkImportCurrencyPayload {
  clientMutationId: String
  updateArtworkImportCurrencyOrError: UpdateArtworkImportCurrencyResponseOrError
}

union UpdateArtworkImportCurrencyResponseOrError = UpdateArtworkImportCurrencyFailure | UpdateArtworkImportCurrencySuccess

type UpdateArtworkImportCurrencySuccess {
  artworkImport: ArtworkImport
}

type UpdateArtworkImportDimensionMetricFailure {
  mutationError: GravityMutationError
}

input UpdateArtworkImportDimensionMetricInput {
  artworkImportID: String!
  clientMutationId: String
  fromDimensionMetric: String!
  toDimensionMetric: String!
}

type UpdateArtworkImportDimensionMetricPayload {
  clientMutationId: String
  updateArtworkImportDimensionMetricOrError: UpdateArtworkImportDimensionMetricResponseOrError
}

union UpdateArtworkImportDimensionMetricResponseOrError = UpdateArtworkImportDimensionMetricFailure | UpdateArtworkImportDimensionMetricSuccess

type UpdateArtworkImportDimensionMetricSuccess {
  artworkImport: ArtworkImport
}

type UpdateArtworkImportRowFailure {
  mutationError: GravityMutationError
}

input UpdateArtworkImportRowInput {
  artworkImportID: String!
  artworkImportRowID: String!
  clientMutationId: String
  fieldName: String!
  fieldValue: String
}

type UpdateArtworkImportRowPayload {
  clientMutationId: String
  updateArtworkImportRowOrError: UpdateArtworkImportRowResponseOrError
}

union UpdateArtworkImportRowResponseOrError = UpdateArtworkImportRowFailure | UpdateArtworkImportRowSuccess

type UpdateArtworkImportRowSuccess {
  artworkImport: ArtworkImport
  success: Boolean!
}

type UpdateArtworkImportWeightMetricFailure {
  mutationError: GravityMutationError
}

input UpdateArtworkImportWeightMetricInput {
  artworkImportID: String!
  clientMutationId: String
  fromWeightMetric: String!
  toWeightMetric: String!
}

type UpdateArtworkImportWeightMetricPayload {
  clientMutationId: String
  updateArtworkImportWeightMetricOrError: UpdateArtworkImportWeightMetricResponseOrError
}

union UpdateArtworkImportWeightMetricResponseOrError = UpdateArtworkImportWeightMetricFailure | UpdateArtworkImportWeightMetricSuccess

type UpdateArtworkImportWeightMetricSuccess {
  artworkImport: ArtworkImport
}

input UpdateArtworkMutationInput {
  artistProofs: String
  availability: String
  clientMutationId: String
  delete: Boolean
  displayPriceRange: Boolean
  ecommerce: Boolean
  editionSets: [UpdateArtworkEditionSetInput]
  editionSize: String
  framed: Boolean
  framedDepth: String
  framedDiameter: String
  framedHeight: String
  framedMetric: String
  framedWidth: String
  id: String!
  imageS3Locations: [S3LocationInput!]
  offer: Boolean
  partnerLocationId: String
  priceCurrency: String
  priceHidden: Boolean
  priceIncludesTax: Boolean
  priceListed: String
  priceMax: Int
  priceMin: Int
  published: Boolean
  shippingWeight: Float
  shippingWeightMetric: String
}

type UpdateArtworkMutationPayload {
  artworkOrError: updateArtworkResponseOrError
  clientMutationId: String
}

type UpdateCMSLastAccessTimestampFailure {
  mutationError: GravityMutationError
}

input UpdateCMSLastAccessTimestampMutationInput {
  clientMutationId: String
  id: String!
}

type UpdateCMSLastAccessTimestampMutationPayload {
  clientMutationId: String
  partnerOrError: UpdateCMSLastAccessTimestampResponseOrError
}

union UpdateCMSLastAccessTimestampResponseOrError = UpdateCMSLastAccessTimestampFailure | UpdateCMSLastAccessTimestampSuccess

type UpdateCMSLastAccessTimestampSuccess {
  partner: Partner
}

type UpdateCareerHighlightFailure {
  mutationError: GravityMutationError
}

input UpdateCareerHighlightInput {
  clientMutationId: String
  collected: Boolean
  group: Boolean
  id: String!
  solo: Boolean
}

type UpdateCareerHighlightPayload {
  careerHighlightOrError: UpdateCareerHighlightsSuccessResponseOrError
  clientMutationId: String
}

type UpdateCareerHighlightSuccess {
  careerHighlight: CareerHighlight
}

union UpdateCareerHighlightsSuccessResponseOrError = UpdateCareerHighlightFailure | UpdateCareerHighlightSuccess

type UpdateCollectionFailure {
  mutationError: GravityMutationError
}

union UpdateCollectionResponseOrError = UpdateCollectionFailure | UpdateCollectionSuccess

type UpdateCollectionSuccess {
  collection: Collection
}

type UpdateCollectorProfileFailure {
  mutationError: GravityMutationError
}

input UpdateCollectorProfileInput {
  affiliatedAuctionHouseIds: [String]
  affiliatedFairIds: [String]
  affiliatedGalleryIds: [String]
  clientMutationId: String
  companyName: String
  companyWebsite: String
  institutionalAffiliations: String
  intents: [Intents]
  loyaltyApplicant: Boolean
  professionalBuyer: Boolean
  promptedForUpdate: Boolean
  selfReportedPurchases: String
}

type UpdateCollectorProfilePayload {
  clientMutationId: String
  collectorProfileOrError: updateCollectorProfileResponseOrError
}

type UpdateCollectorProfileSuccess {
  collectorProfile: CollectorProfileType
}

type UpdateCollectorProfileWithIDFailure {
  mutationError: GravityMutationError
}

input UpdateCollectorProfileWithIDInput {
  affiliatedAuctionHouseIds: [String]
  affiliatedFairIds: [String]
  affiliatedGalleryIds: [String]
  clientMutationId: String
  companyName: String
  companyWebsite: String
  confirmedBuyer: Boolean
  id: String
  institutionalAffiliations: String
  intents: [Intents]
  loyaltyApplicant: Boolean
  professionalBuyer: Boolean
  selfReportedPurchases: String
}

type UpdateCollectorProfileWithIDPayload {
  clientMutationId: String
  collectorProfileOrError: UpdateCollectorProfileWithIDResponseOrError
}

union UpdateCollectorProfileWithIDResponseOrError = UpdateCollectorProfileWithIDFailure | UpdateCollectorProfileWithIDSuccess

type UpdateCollectorProfileWithIDSuccess {
  collectorProfile: CollectorProfileType
}

input UpdateConversationMutationInput {
  clientMutationId: String
  conversationId: String!
  dismissed: Boolean
  fromLastViewedMessageId: String
  sellerOutcome: String
  sellerOutcomeComment: String
  toLastViewedMessageId: String
}

type UpdateConversationMutationPayload {
  clientMutationId: String
  conversation: Conversation
}

type UpdateFeatureFailure {
  mutationError: GravityMutationError
}

input UpdateFeatureMutationInput {
  active: Boolean
  callout: String
  clientMutationId: String
  description: String
  id: String!
  layout: FeatureLayouts
  metaTitle: String
  name: String
  sourceBucket: String
  sourceKey: String
  subheadline: String
}

type UpdateFeatureMutationPayload {
  clientMutationId: String
  featureOrError: UpdateFeatureResponseOrError
}

union UpdateFeatureResponseOrError = UpdateFeatureFailure | UpdateFeatureSuccess

type UpdateFeatureSuccess {
  feature: Feature
}

type UpdateFeaturedLinkFailure {
  mutationError: GravityMutationError
}

input UpdateFeaturedLinkMutationInput {
  clientMutationId: String
  description: String
  href: String
  id: String!
  sourceBucket: String
  sourceKey: String
  subtitle: String
  title: String
}

type UpdateFeaturedLinkMutationPayload {
  clientMutationId: String
  featuredLinkOrError: UpdateFeaturedLinkResponseOrError
}

union UpdateFeaturedLinkResponseOrError = UpdateFeaturedLinkFailure | UpdateFeaturedLinkSuccess

type UpdateFeaturedLinkSuccess {
  featuredLink: FeaturedLink
}

input UpdateHeroUnitLinkInput {
  text: String!
  url: String!
}

input UpdateHeroUnitMutationInput {
  body: String!
  clientMutationId: String
  credit: String
  endAt: String
  id: String!
  imageUrl: String
  label: String
  link: UpdateHeroUnitLinkInput!
  position: Int
  startAt: String
  title: String!
}

type UpdateHeroUnitMutationPayload {
  clientMutationId: String
  heroUnitOrError: updateHeroUnitResponseOrError
}

type UpdateInstallShotForPartnerShowFailure {
  mutationError: GravityMutationError
}

input UpdateInstallShotForPartnerShowMutationInput {
  caption: String!
  clientMutationId: String
  imageId: String!
  showId: String!
}

type UpdateInstallShotForPartnerShowMutationPayload {
  clientMutationId: String
  showOrError: UpdateInstallShotForPartnerShowResponseOrError
}

union UpdateInstallShotForPartnerShowResponseOrError = UpdateInstallShotForPartnerShowFailure | UpdateInstallShotForPartnerShowSuccess

type UpdateInstallShotForPartnerShowSuccess {
  show: Show
}

input UpdateMeCollectionInput {
  id: String!
  shareableWithPartners: Boolean!
}

type UpdateMeCollectionsFailure {
  mutationError: GravityMutationError
}

union UpdateMeCollectionsResponseOrError = UpdateMeCollectionsFailure | UpdateMeCollectionsSuccess

type UpdateMeCollectionsSuccess {
  collection: Collection
}

type UpdateMessageFailure {
  mutationError: GravityMutationError
}

input UpdateMessageMutationInput {
  clientMutationId: String
  id: String!
  spam: Boolean!
}

type UpdateMessageMutationPayload {
  clientMutationId: String
  conversationOrError: UpdateMessageResponseOrError
}

union UpdateMessageResponseOrError = UpdateMessageFailure | UpdateMessageSuccess

type UpdateMessageSuccess {
  conversation: Conversation
}

input UpdateMyPasswordMutationInput {
  clientMutationId: String
  currentPassword: String!
  newPassword: String!
  passwordConfirmation: String!
}

type UpdateMyPasswordMutationPayload {
  clientMutationId: String
  me: Me!
}

input UpdateMyProfileInput {
  artworksPerYear: String
  bio: String
  clientMutationId: String
  collectorLevel: Int
  completedOnboarding: Boolean
  currencyPreference: CurrencyPreference
  email: String
  emailFrequency: String
  gender: String
  iconUrl: String
  industry: String
  isCollector: Boolean
  lengthUnitPreference: LengthUnitPreference
  location: EditableLocation
  name: String
  notes: String
  otherRelevantPositions: String
  password: String
  phone: String
  phoneCountryCode: String
  phoneNumber: String
  priceRangeMax: Float
  priceRangeMin: Int
  privacy: String
  profession: String
  promptedForUpdate: Boolean
  receiveLotOpeningSoonNotification: Boolean
  receiveNewSalesNotification: Boolean
  receiveNewWorksNotification: Boolean
  receiveOrderNotification: Boolean
  receiveOutbidNotification: Boolean
  receivePartnerOfferNotification: Boolean
  receivePartnerShowNotification: Boolean
  receivePromotionNotification: Boolean
  receivePurchaseNotification: Boolean
  receiveSaleOpeningClosingNotification: Boolean
  receiveViewingRoomNotification: Boolean
  shareFollows: Boolean
}

union UpdateMyProfileMutation = UpdateMyProfileMutationFailure | UpdateMyProfileMutationSuccess

type UpdateMyProfileMutationFailure {
  mutationError: GravityMutationError
}

type UpdateMyProfileMutationSuccess {
  user: User
}

type UpdateMyProfilePayload {
  clientMutationId: String
  me: Me
  user: User
  userOrError: UpdateMyProfileMutation
}

type UpdateOrderedSetFailure {
  mutationError: GravityMutationError
}

input UpdateOrderedSetMutationInput {
  clientMutationId: String
  description: String
  id: String!
  internalName: String
  itemId: String
  itemIds: [String]
  itemType: String
  key: String
  layout: OrderedSetLayouts
  name: String
  ownerId: String
  ownerType: String
  published: Boolean
  unsetOwner: Boolean
}

type UpdateOrderedSetMutationPayload {
  clientMutationId: String
  orderedSetOrError: UpdateOrderedSetResponseOrError
}

union UpdateOrderedSetResponseOrError = UpdateOrderedSetFailure | UpdateOrderedSetSuccess

type UpdateOrderedSetSuccess {
  feature: Feature
  set: OrderedSet
}

type UpdatePageFailure {
  mutationError: GravityMutationError
}

input UpdatePageMutationInput {
  clientMutationId: String
  content: String!
  id: String!
  name: String!
  published: Boolean!
}

type UpdatePageMutationPayload {
  clientMutationId: String
  pageOrError: UpdatePageResponseOrError
}

union UpdatePageResponseOrError = UpdatePageFailure | UpdatePageSuccess

type UpdatePageSuccess {
  page: Page
}

type UpdatePartnerArtistDocumentFailure {
  mutationError: GravityMutationError
}

input UpdatePartnerArtistDocumentMutationInput {
  artistId: String!
  clientMutationId: String
  documentId: String!
  partnerId: String!
  remoteDocumentUrl: String
  title: String
}

type UpdatePartnerArtistDocumentMutationPayload {
  clientMutationId: String
  documentOrError: UpdatePartnerArtistDocumentResponseOrError
}

union UpdatePartnerArtistDocumentResponseOrError = UpdatePartnerArtistDocumentFailure | UpdatePartnerArtistDocumentSuccess

type UpdatePartnerArtistDocumentSuccess {
  document: PartnerDocument
  partner: Partner
}

type UpdatePartnerArtistFailure {
  mutationError: GravityMutationError
}

input UpdatePartnerArtistMutationInput {
  biography: String
  clientMutationId: String
  displayOnPartnerProfile: Boolean
  hideInPresentationMode: Boolean
  id: String!
  remoteImageUrl: String
  representedBy: Boolean
  useDefaultBiography: Boolean
}

type UpdatePartnerArtistMutationPayload {
  clientMutationId: String
  partnerArtistOrError: UpdatePartnerArtistResponseOrError
}

union UpdatePartnerArtistResponseOrError = UpdatePartnerArtistFailure | UpdatePartnerArtistSuccess

type UpdatePartnerArtistSuccess {
  partner: Partner
  partnerArtist: PartnerArtist
}

type UpdatePartnerContactFailure {
  mutationError: GravityMutationError
}

input UpdatePartnerContactInput {
  canContact: Boolean
  clientMutationId: String
  contactId: String!
  email: String
  locationId: String
  name: String
  partnerId: String!
  phone: String
  position: String
}

union UpdatePartnerContactOrError = UpdatePartnerContactFailure | UpdatePartnerContactSuccess

type UpdatePartnerContactPayload {
  clientMutationId: String
  partnerContactOrError: UpdatePartnerContactOrError
}

type UpdatePartnerContactSuccess {
  partnerContact: Contact
}

type UpdatePartnerFailure {
  mutationError: GravityMutationError
}

type UpdatePartnerFlagsFailure {
  mutationError: GravityMutationError
}

input UpdatePartnerFlagsMutationInput {
  artworksDefaultCurrency: String
  artworksDefaultMetric: String
  artworksDefaultPartnerLocationId: String
  artworksDefaultWeightMetric: String
  clientMutationId: String
  id: String!
  inquireAvailabilityPriceDisplayEnabledByPartner: Boolean
}

type UpdatePartnerFlagsMutationPayload {
  clientMutationId: String
  partnerOrError: UpdatePartnerFlagsResponseOrError
}

union UpdatePartnerFlagsResponseOrError = UpdatePartnerFlagsFailure | UpdatePartnerFlagsSuccess

type UpdatePartnerFlagsSuccess {
  partner: Partner
}

type UpdatePartnerLocationFailure {
  mutationError: GravityMutationError
}

input UpdatePartnerLocationInput {
  address: String
  address2: String
  addressType: String
  city: String
  clientMutationId: String
  country: String
  email: String
  locationId: String!
  partnerId: String!
  phone: String
  postalCode: String
  publiclyViewable: Boolean
  state: String
}

union UpdatePartnerLocationOrError = UpdatePartnerLocationFailure | UpdatePartnerLocationSuccess

type UpdatePartnerLocationPayload {
  clientMutationId: String
  partnerLocationOrError: UpdatePartnerLocationOrError
}

type UpdatePartnerLocationSuccess {
  location: Location
}

input UpdatePartnerMutationInput {
  adminId: String
  alternateNames: [String]
  artsyCollectsSalesTax: Boolean
  clientMutationId: String
  commerceEnabled: Boolean
  commissionRate: Float
  contractType: String
  criteoEligible: Boolean
  directlyContactable: Boolean
  displayArtistsSection: Boolean
  displayName: String
  displayWorksSection: Boolean
  distinguishRepresentedArtists: Boolean
  email: String
  enableAchPaymentMethod: Boolean
  enforceOnPlatformTransactions: Boolean
  featuredKeywords: [String]
  givenName: String
  hasFullProfile: Boolean
  hasLimitedFolioAccess: Boolean
  id: String!
  implicitOfferEnabled: Boolean
  inquiryOrderEnabled: Boolean
  managedByErp: Boolean
  outreachAdminId: String
  partnerCategories: [String]
  preQualify: Boolean
  profileArtistsLayout: String
  profileBannerDisplay: String
  referralContactId: String
  region: String
  relativeSize: Int
  requiresMerchantAccount: Boolean
  shortName: String
  sortableName: String
  type: String
  vatExemptApproved: Boolean
  vatNumber: String
  vatStatus: String
  verifiedSeller: Boolean
  website: String
  wireTransferEnabled: Boolean
}

type UpdatePartnerMutationPayload {
  clientMutationId: String
  partnerOrError: UpdatePartnerResponseOrError
}

type UpdatePartnerProfileImageFailure {
  mutationError: GravityMutationError
}

input UpdatePartnerProfileImageInput {
  clientMutationId: String
  partnerId: String!
  remoteImageS3Bucket: String!
  remoteImageS3Key: String!
  type: String!
}

union UpdatePartnerProfileImageOrError = UpdatePartnerProfileImageFailure | UpdatePartnerProfileImageSuccess

type UpdatePartnerProfileImagePayload {
  clientMutationId: String
  partnerOrError: UpdatePartnerProfileImageOrError
}

type UpdatePartnerProfileImageSuccess {
  partner: Partner
}

union UpdatePartnerResponseOrError = UpdatePartnerFailure | UpdatePartnerSuccess

type UpdatePartnerShowDocumentFailure {
  mutationError: GravityMutationError
}

input UpdatePartnerShowDocumentMutationInput {
  clientMutationId: String
  documentId: String!
  partnerId: String!
  remoteDocumentUrl: String
  showId: String!
  title: String
}

type UpdatePartnerShowDocumentMutationPayload {
  clientMutationId: String
  documentOrError: UpdatePartnerShowDocumentResponseOrError
}

union UpdatePartnerShowDocumentResponseOrError = UpdatePartnerShowDocumentFailure | UpdatePartnerShowDocumentSuccess

type UpdatePartnerShowDocumentSuccess {
  document: PartnerDocument
  show: Show
}

type UpdatePartnerShowEventFailure {
  mutationError: GravityMutationError
}

input UpdatePartnerShowEventMutationInput {
  clientMutationId: String
  description: String
  endAt: String
  eventId: String!
  eventType: String
  partnerId: String!
  showId: String!
  startAt: String
  timeZone: String
}

type UpdatePartnerShowEventMutationPayload {
  clientMutationId: String
  showEventOrError: UpdatePartnerShowEventResponseOrError
}

union UpdatePartnerShowEventResponseOrError = UpdatePartnerShowEventFailure | UpdatePartnerShowEventSuccess

type UpdatePartnerShowEventSuccess {
  show: Show
  showEvent: ShowEventType
}

type UpdatePartnerShowFailure {
  mutationError: GravityMutationError
}

input UpdatePartnerShowFairLocationInput {
  booth: String
  floor: String
  hall: String
  pier: String
  room: String
  section: String
}

input UpdatePartnerShowMutationInput {
  clientMutationId: String
  description: String
  displayOnPartnerProfile: Boolean
  endAt: String
  fairId: String
  fairLocation: UpdatePartnerShowFairLocationInput
  featured: Boolean
  locationId: String
  name: String
  partnerId: String!
  pressRelease: String
  showId: String!
  startAt: String
  viewingRoomIds: [String]
}

type UpdatePartnerShowMutationPayload {
  clientMutationId: String
  showOrError: UpdatePartnerShowResponseOrError
}

union UpdatePartnerShowResponseOrError = UpdatePartnerShowFailure | UpdatePartnerShowSuccess

type UpdatePartnerShowSuccess {
  show: Show
}

type UpdatePartnerSuccess {
  partner: Partner
}

type UpdateProfileFailure {
  mutationError: GravityMutationError
}

input UpdateProfileMutationInput {
  bio: String
  clientMutationId: String
  fullBio: String
  handle: String
  id: String!
  isPrivate: Boolean
  location: String
  website: String
}

type UpdateProfileMutationPayload {
  clientMutationId: String
  profileOrError: UpdateProfileResponseOrError
}

union UpdateProfileResponseOrError = UpdateProfileFailure | UpdateProfileSuccess

type UpdateProfileSuccess {
  profile: Profile
}

type UpdatePurchaseFailure {
  mutationError: GravityMutationError
}

union UpdatePurchaseResponseOrError = UpdatePurchaseFailure | UpdatePurchaseSuccess

type UpdatePurchaseSuccess {
  purchase: Purchase
}

type UpdateSaleAgreementFailure {
  mutationError: GravityMutationError
}

input UpdateSaleAgreementMutationInput {
  clientMutationId: String
  content: String
  displayEndAt: String
  displayStartAt: String
  id: String!
  published: Boolean
  saleId: String
  status: SaleAgreementStatus
}

type UpdateSaleAgreementMutationPayload {
  clientMutationId: String
  saleAgreementOrError: UpdateSaleAgreementResponseOrError
}

union UpdateSaleAgreementResponseOrError = UpdateSaleAgreementFailure | UpdateSaleAgreementSuccess

type UpdateSaleAgreementSuccess {
  saleAgreement: SaleAgreement
}

input UpdateSmsSecondFactorInput {
  attributes: SmsSecondFactorAttributes!
  clientMutationId: String
  secondFactorID: ID!
}

type UpdateSmsSecondFactorPayload {
  clientMutationId: String
  secondFactorOrErrors: SmsSecondFactorOrErrorsUnion!
}

input UpdateSubmissionMutationInput {
  additionalInfo: String
  artistID: String
  attributionClass: ConsignmentAttributionClass
  authenticityCertificate: Boolean
  category: ConsignmentSubmissionCategoryAggregation
  clientMutationId: String
  currency: String
  depth: String
  dimensionsMetric: String
  edition: Boolean
  editionNumber: String
  editionSize: Int
  editionSizeFormatted: String
  externalId: ID
  height: String
  id: ID
  locationAddress: String
  locationAddress2: String
  locationCity: String
  locationCountry: String
  locationCountryCode: String
  locationPostalCode: String
  locationState: String
  medium: String
  minimumPriceDollars: Int
  provenance: String
  sessionID: String
  signature: Boolean
  state: ConsignmentSubmissionStateAggregation
  title: String
  userEmail: String
  userName: String
  userPhone: String
  utmMedium: String
  utmSource: String
  utmTerm: String
  width: String
  year: String
}

type UpdateSubmissionMutationPayload {
  clientMutationId: String
  consignmentSubmission: ConsignmentSubmission
}

input UpdateUserAddressInput {
  attributes: UserAddressAttributes!
  clientMutationId: String
  userAddressID: ID!
}

type UpdateUserAddressPayload {
  clientMutationId: String
  me: Me
  userAddressOrErrors: UserAddressOrErrorsUnion!
}

input UpdateUserDefaultAddressInput {
  clientMutationId: String
  userAddressID: ID!
}

type UpdateUserDefaultAddressPayload {
  clientMutationId: String
  me: Me
  userAddressOrErrors: UserAddressOrErrorsUnion!
}

type UpdateUserInterestFailure {
  mutationError: GravityMutationError
}

input UpdateUserInterestInput {
  id: String!
  private: Boolean
}

input UpdateUserInterestMutationInput {
  clientMutationId: String
  id: String!
  private: Boolean
}

type UpdateUserInterestMutationPayload {
  clientMutationId: String
  userInterestEdge: UserInterestEdge
  userInterestOrError: UpdateUserInterestResponseOrError
}

union UpdateUserInterestOrError = UpdateUserInterestsFailure | UserInterest

union UpdateUserInterestResponseOrError = UpdateUserInterestFailure | UpdateUserInterestSuccess

type UpdateUserInterestSuccess {
  userInterest: UserInterest
}

type UpdateUserInterestsFailure {
  mutationError: GravityMutationError
}

input UpdateUserInterestsMutationInput {
  clientMutationId: String
  userInterests: [UpdateUserInterestInput!]!
}

type UpdateUserInterestsMutationPayload {
  clientMutationId: String
  me: Me!
  userInterestsOrErrors: [UpdateUserInterestOrError!]!
}

input UpdateUserMutationInput {
  clientMutationId: String
  dataTransferOptOut: Boolean
  email: String
  enabled: Boolean
  id: String!
  name: String
  phone: String
}

type UpdateUserMutationPayload {
  clientMutationId: String
}

input UpdateUserSaleProfileMutationInput {
  addressLine1: String
  addressLine2: String
  city: String
  clientMutationId: String
  country: String
  id: String!
  requireBidderApproval: Boolean
  state: String
  zip: String
}

type UpdateUserSaleProfileMutationPayload {
  clientMutationId: String
}

input UpdateViewingRoomArtworksInput {
  artworks: [ViewingRoomArtworkInput!]!
  clientMutationId: String
  viewingRoomID: String!
}

type UpdateViewingRoomArtworksPayload {
  artworkIDs: [String!]!
  clientMutationId: String
}

input UpdateViewingRoomInput {
  attributes: ViewingRoomAttributes!
  clientMutationId: String
  image: ARImageInput
  viewingRoomID: String!
}

type UpdateViewingRoomPayload {
  clientMutationId: String
  viewingRoomOrErrors: ViewingRoomOrErrorsUnion!
}

input UpdateViewingRoomSubsectionsInput {
  clientMutationId: String
  subsections: [ViewingRoomSubsectionInput!]!
  viewingRoomID: ID!
}

type UpdateViewingRoomSubsectionsPayload {
  clientMutationId: String
  subsections: [ViewingRoomSubsection!]!
}

input UploadSource {
  bucket: String
  key: String
}

input UploadSources {
  buckets: [String!]
  keys: [String!]
}

type User implements Node {
  accessiblePropertiesConnection(after: String, before: String, first: Int, last: Int, model: UserAccessiblePropertyInput): UserAccessiblePropertyConnection
  adminNotes: [UserAdminNotes]
  analytics: AnalyticsUserStats
  cached: Int
  collectorProfile: CollectorProfileType
  createdAt(format: String, timezone: String): String
  dataTransferOptOut: Boolean
  devices: [Device!]!
  email: String!
  emailConfirmationSentAt(format: String, timezone: String): String
  emailConfirmedAt(format: String, timezone: String): String
  enabled: Boolean!
  follows: UserFollows
  id: ID!
  initials(length: Int = 3): String
  inquiredArtworksConnection(after: String, before: String, first: Int, last: Int): UserInquiredArtworksConnection
  interestsConnection(after: String, before: String, first: Int, last: Int): UserInterestConnection
  internalID: ID!
  isIdentityVerified: Boolean!
  lastSignInAt(format: String, timezone: String): String
  location: Location
  myCollectionArtworksConnection(after: String, before: String, first: Int, last: Int): ArtworkConnection
  name: String!
  paddleNumber: String
  partnerAccess: [String]!
  phone: String
  pin: String
  priceRange: String
  profileAccess: [String]!
  purchasedArtworksConnection(after: String, before: String, first: Int, last: Int): UserPurchasesConnection
  quiz: Quiz!
  receiveLotOpeningSoonNotification: Boolean
  receiveNewSalesNotification: Boolean
  receiveNewWorksNotification: Boolean
  receiveOrderNotification: Boolean
  receiveOutbidNotification: Boolean
  receivePartnerOfferNotification: Boolean
  receivePartnerShowNotification: Boolean
  receivePromotionNotification: Boolean
  receivePurchaseNotification: Boolean
  receiveSaleOpeningClosingNotification: Boolean
  receiveViewingRoomNotification: Boolean
  roles: [String]!
  saleProfile: UserSaleProfile
  savedArtworksConnection(after: String, before: String, first: Int, last: Int): ArtworkConnection
  secondFactorEnabled: Boolean!
  signInCount: Int!
  unconfirmedEmail: String
  userAlreadyExists: Boolean
}

union UserAccessibleProperty = Artist | Artwork | Partner | Profile

type UserAccessiblePropertyConnection {
  edges: [UserAccessiblePropertyEdge]
  pageCursors: PageCursors!
  pageInfo: PageInfo!
  totalCount: Int
}

type UserAccessiblePropertyEdge {
  cursor: String!
  node: UserAccessibleProperty
}

enum UserAccessiblePropertyInput {
  ARTIST
  ARTWORK
  PARTNER
  PROFILE
}

type UserAddress {
  addressLine1: String!
  addressLine2: String
  addressLine3: String
  city: String!
  country: String!
  id: ID!
  internalID: ID!
  isDefault: Boolean!
  name: String
  phoneNumber: String
  phoneNumberCountryCode: String
  postalCode: String
  region: String
}

input UserAddressAttributes {
  addressLine1: String!
  addressLine2: String
  addressLine3: String
  city: String!
  country: String!
  name: String!
  phoneNumber: String
  phoneNumberCountryCode: String
  postalCode: String
  region: String
}

type UserAddressConnection {
  edges: [UserAddressEdge]
  nodes: [UserAddress]
  pageInfo: PageInfo!
  totalCount: Int!
}

type UserAddressEdge {
  cursor: String!
  node: UserAddress
}

union UserAddressOrErrorsUnion = Errors | UserAddress

type UserAdminNotes {
  body: String!
  createdAt(format: String, timezone: String): String
  creator: User
  id: ID!
  internalID: ID!
}

type UserConnection {
  edges: [UserEdge]
  pageCursors: PageCursors!
  pageInfo: PageInfo!
  totalCount: Int
}

type UserEdge {
  cursor: String!
  node: User
}

type UserFollows {
  artistsConnection(after: String, before: String, first: Int, last: Int): ArtistConnection
  genesConnection(after: String, before: String, first: Int, last: Int): GeneConnection
}

type UserIconDeleteFailureType {
  mutationError: GravityMutationError
}

type UserIconDeleteSuccessType {
  icon: Image
  success: Boolean
}

union UserIconDeletionMutationType = UserIconDeleteFailureType | UserIconDeleteSuccessType

type UserInquiredArtworksConnection {
  edges: [UserInquiredArtworksEdge]
  pageCursors: PageCursors!
  pageInfo: PageInfo!
  totalCount: Int
}

type UserInquiredArtworksEdge {
  createdAt(format: String, timezone: String): String
  cursor: String!
  id: ID!
  internalID: ID!
  isSentToGallery: Boolean
  node: Artwork
  note: String
  outcome: String
  status: String
}

type UserInterest {
  body: String
  category: UserInterestCategory!
  id: ID!
  interest: UserInterestInterest!
  internalID: ID!
  ownerType: UserInterestOwnerType
  private: Boolean!
}

enum UserInterestCategory {
  COLLECTED_BEFORE
  INTERESTED_IN_COLLECTING
}

type UserInterestConnection {
  edges: [UserInterestEdge]
  pageCursors: PageCursors!
  pageInfo: PageInfo!
  totalCount: Int
}

type UserInterestEdge {
  body: String
  category: UserInterestCategory!
  createdByAdmin: Boolean!
  cursor: String!
  id: ID!
  internalID: ID!
  node: UserInterestInterest
  ownerType: String
  private: Boolean!
}

input UserInterestInput {
  anonymousSessionId: String
  body: String
  category: UserInterestCategory!
  interestId: String!
  interestType: UserInterestInterestType!
  private: Boolean
  sessionID: String
}

union UserInterestInterest = Artist | Gene

enum UserInterestInterestType {
  ARTIST
  GENE
}

union UserInterestOrError = CreateUserInterestFailure | UserInterest

enum UserInterestOwnerType {
  COLLECTOR_PROFILE
  USER_SALE_PROFILE
}

type UserPurchasesConnection {
  edges: [UserPurchasesEdge]
  pageCursors: PageCursors!
  pageInfo: PageInfo!
  totalCount: Int
}

type UserPurchasesEdge {
  cursor: String!
  id: ID!
  internalID: ID!
  node: Artwork
  ownerType: String
  saleDate(format: String, timezone: String): String
  salePrice: Float
  source: String
}

type UserRole {
  name: String!
}

type UserSaleProfile {
  addressLine1: String
  addressLine2: String
  alternativeEmail: String
  birthYear: Int
  buyerStatus: Int
  city: String
  country: String
  email: String
  employer: String
  firstName: String
  gender: String
  id: ID!
  industry: String
  internalID: ID!
  jobTitle: String
  lastName: String
  maritalStatus: String
  name: String
  prefix: String
  priceRange: Int
  profession: String
  requireBidderApproval: Boolean!
  salaryUSD: Int
  spouse: String
  state: String
  zip: String
}

union VanityURLEntityType = Fair | Partner

enum VerificationStatuses {
  NOT_FOUND
  NOT_PERFORMED
  VERIFICATION_UNAVAILABLE
  VERIFIED_NO_CHANGE
  VERIFIED_WITH_CHANGES
}

type VerifiedRepresentative implements Node {
  artist: Artist!
  id: ID!
  internalID: ID!
  partner: Partner!
}

type VerifyAddressFailureType {
  mutationError: GravityMutationError
}

input VerifyAddressInput {
  addressLine1: String!
  addressLine2: String
  city: String
  clientMutationId: String
  country: String!
  postalCode: String!
  region: String
}

union VerifyAddressMutationType = VerifyAddressFailureType | VerifyAddressType

type VerifyAddressPayload {
  clientMutationId: String
  verifyAddressOrError: VerifyAddressMutationType
}

type VerifyAddressType {
  addressVerificationId: String!
  inputAddress: InputAddressFields!
  suggestedAddresses: [SuggestedAddressFields]!
  verificationStatus: VerificationStatuses!
}

type VerifyUser {
  exists: Boolean!
}

type Video {
  height: Int!
  id: ID!
  playerUrl: String!
  width: Int!
}

type Viewer {
  _do_not_use_conversation(id: String!): Conversation
  _do_not_use_image: Image
  admin: Admin
  article(id: String!): Article
  articles(auctionID: String, authorID: String, channelID: String, featured: Boolean, ids: [String], layout: ArticleLayout, limit: Int, offset: Int, omit: [String!], published: Boolean = true, showID: String, sort: ArticleSorts): [Article!]!
  articlesConnection(after: String, before: String, channelId: String, featured: Boolean, first: Int, inEditorialFeed: Boolean, last: Int, layout: ArticleLayout, omit: [String!], page: Int, sort: ArticleSorts): ArticleConnection
  artist(id: String!): Artist
  artistSeries(id: ID!): ArtistSeries
  artistSeriesConnection(after: String, artistID: ID, artworkID: ID, before: String, excludeIDs: [ID!], first: Int, last: Int): ArtistSeriesConnection
  artists(ids: [String], page: Int = 1, size: Int, slugs: [String], sort: ArtistSorts): [Artist]
  artistsConnection(after: String, before: String, first: Int, ids: [String], last: Int, letter: String, page: Int, size: Int, slugs: [String], sort: ArtistSorts, term: String): ArtistConnection
  artwork(id: String!): Artwork
  artworkAttributionClasses: [AttributionClass]
  artworkImport(id: String!): ArtworkImport
  artworkMediums: [ArtworkMedium]
  artworkResult(id: String!): ArtworkResult
  artworks(after: String, before: String, first: Int, ids: [String], last: Int, respectParamsOrder: Boolean = false): ArtworkConnection @deprecated(reason: "This is only for use in resolving stitched queries, not for first-class client use!")
  artworksConnection(acquireable: Boolean, additionalGeneIDs: [String], after: String, aggregationPartnerCities: [String], aggregations: [ArtworkAggregation], artistID: String, artistIDs: [String], artistNationalities: [String], artistSeriesID: String, artistSeriesIDs: [String], artworkIDs: [String], atAuction: Boolean, attributionClass: [String], availability: String, before: String, categories: [String], color: String, colors: [String], dimensionRange: String, disableNotForSaleSorting: Boolean, excludeArtworkIDs: [String], extraAggregationGeneIDs: [String], first: Int, forSale: Boolean, framed: Boolean, geneID: String, geneIDs: [String], height: String, importSources: [String], includeAllJSON: Boolean, includeArtworksByFollowedArtists: Boolean, includeMediumFilterInAggregation: Boolean, includeUnpublished: Boolean, input: FilterArtworksInput, inquireableOnly: Boolean, keyword: String, keywordMatchExact: Boolean, last: Int, locationCities: [String], majorPeriods: [String], marketable: Boolean, marketingCollectionID: String, materialsTerms: [String], medium: String, offerable: Boolean, page: Int, partnerCities: [String], partnerID: ID, partnerIDs: [String], period: String, periods: [String], priceRange: String, published: Boolean, saleID: ID, showID: String, signed: Boolean, size: Int, sizes: [ArtworkSizes], sold: Boolean, sort: String, tagID: String, visibilityLevel: String, width: String): FilterArtworksConnection
  artworksForUser(after: String, before: String, excludeArtworkIds: [String] = [], excludeDislikedArtworks: Boolean = false, first: Int, includeBackfill: Boolean!, last: Int, marketable: Boolean, maxWorksPerArtist: Int, onlyAtAuction: Boolean = false, page: Int, userId: String, version: String): ArtworkConnection
  auctionResult(id: String!): AuctionResult
  authenticationStatus: AuthenticationStatus!
  author(id: String!): Author
  bankAccount(id: String!): BankAccount
  channel(id: ID!): Channel!
  cities(featured: Boolean = false): [City!]!
  city(near: Near, slug: String): City
  collection(id: String!, userID: String!): Collection
  collectorProfile(userID: String): CollectorProfileType
  collectorProfilesConnection(after: String, before: String, first: Int, last: Int, partnerID: ID, term: String): CollectorProfileTypeConnection
  commerceOrders(after: String, before: String, buyerId: String, buyerType: String, first: Int, impulseConversationId: String, last: Int, mode: CommerceOrderModeEnum, sellerId: String, sellerType: String, sort: CommerceOrderConnectionSortEnum, state: CommerceOrderStateEnum, states: [CommerceOrderStateEnum!]): CommerceOrderConnectionWithTotalCount
  conversation(id: String!): Conversation
  conversationsConnection(after: String, artistId: String, before: String, dismissed: Boolean, first: Int, fromId: String, hasMessage: Boolean, hasReply: Boolean, last: Int, partnerId: String, toBeReplied: Boolean, type: ConversationsInputMode = USER): ConversationConnection
  creditCard(id: String!): CreditCard
  curatedMarketingCollections(size: Int): [MarketingCollection]
  curatedTrendingArtists(after: String, before: String, first: Int, last: Int): ArtistConnection
  departments: [Department!]!
  discoverArtworks(after: String, before: String, curatedPicksSize: Int = 2, excludeArtworkIds: [String], first: Int, last: Int, likedArtworkIds: [String], limit: Int = 5, mltFields: [String] = ["genes", "materials", "tags", "medium"], osWeights: [Float] = [0.6, 0.4]): ArtworkConnection
  discoveryCategoriesConnection(after: String, before: String, first: Int, last: Int): DiscoveryCategoriesConnectionConnection
  discoveryMarketingCollections(after: String, before: String, first: Int, last: Int, size: Int = 12): [MarketingCollection!]
  external: External!
  fair(id: String!): Fair
  fairOrganizer(id: String!): FairOrganizer
  fairs(fairOrganizerID: String, hasFullFeature: Boolean, hasHomepageSection: Boolean, hasListing: Boolean, ids: [String], near: Near, page: Int, size: Int, sort: FairSorts, status: EventStatus): [Fair]
  fairsConnection(after: String, before: String, fairOrganizerID: String, first: Int, hasFullFeature: Boolean, hasHomepageSection: Boolean, hasListing: Boolean, ids: [String], last: Int, near: Near, sort: FairSorts, status: EventStatus, term: String): FairConnection
  feature(id: ID): Feature
  featuredFairs(includeBackfill: Boolean = true, size: Int): [Fair]
  featuredLinksConnection(after: String, before: String, first: Int, last: Int, term: String): FeaturedLinkConnection
  featuresConnection(after: String, before: String, first: Int, last: Int, sort: FeatureSorts, term: String): FeatureConnection
  filterPartners(aggregations: [PartnersAggregation]!, defaultProfilePublic: Boolean, eligibleForCarousel: Boolean, eligibleForListing: Boolean, eligibleForPrimaryBucket: Boolean, eligibleForSecondaryBucket: Boolean, excludeFollowedPartners: Boolean, hasFullProfile: Boolean, ids: [String], includePartnersNearIpBasedLocation: Boolean = false, includePartnersWithFollowedArtists: Boolean, maxDistance: Int, near: String, page: Int, partnerCategories: [String], size: Int, sort: PartnersSortType, term: String, type: [PartnerClassification]): FilterPartners
  gene(id: String!): Gene
  geneFamiliesConnection(after: String, before: String, first: Int, last: Int): GeneFamilyConnection
  genes(size: Int, slugs: [String]): [Gene]
  heroUnit(id: String!): HeroUnit
  heroUnitsConnection(after: String, before: String, first: Int, last: Int, private: Boolean = false, term: String): HeroUnitConnection
  highlights: Highlights
  homePage: HomePage
  homeView: HomeView!
  identityVerification(id: String!): IdentityVerification
  identityVerificationsConnection(after: String, before: String, email: String, first: Int, last: Int, name: String, page: Int, size: Int, userId: String): IdentityVerificationConnection
  invoice(token: String!): Invoice
  job(id: ID!): Job!
  jobs: [Job!]!
  markdown(content: String!): MarkdownContent
  marketingCategories: [MarketingCollectionCategory!]!
  marketingCollection(slug: String!): MarketingCollection
  marketingCollections(after: String, artistID: String, before: String, category: String, categorySlug: String, first: Int, isFeaturedArtistContent: Boolean, last: Int, size: Int, slugs: [String], sort: MarketingCollectionsSorts): [MarketingCollection!]!
  matchArtist(excludeIDs: [String], page: Int, size: Int, term: String!): [Artist]
  matchConnection(after: String, before: String, entities: [SearchEntity!] = [ARTIST, ARTIST_SERIES, ARTWORK, ARTICLE, CITY, COLLECTION, FAIR, FEATURE, GALLERY, GENE, INSTITUTION, PAGE, PROFILE, SALE, SHOW, TAG, VIEWING_ROOM], first: Int, last: Int, mode: SearchMode = SITE, page: Int = 1, size: Int = 10, term: String!): MatchConnection
  matchPartner(query: String!): [Partner]
  me: Me
  node(id: ID!): Node
  notificationPreferences(authenticationToken: String): [NotificationPreference!]!
  notificationsConnection(after: String, before: String, first: Int, last: Int, notificationTypes: [NotificationTypesEnum]): NotificationConnection
  orderedSet(id: String!): OrderedSet
  orderedSets(key: String!, public: Boolean = true): [OrderedSet]
  orderedSetsConnection(after: String, before: String, first: Int, last: Int, term: String): OrderedSetConnection
  page(id: ID!): Page!
  pagesConnection(after: String, before: String, first: Int, last: Int, term: String): PageConnection
  partner(id: String!): Partner
  partnerArtistDocumentsConnection(after: String, artistID: String!, before: String, first: Int, last: Int, page: Int, partnerID: String!, size: Int): PartnerArtistDocumentConnection @deprecated(reason: "Prefer `partner.documentsConnection`")
  partnerArtworks(after: String, before: String, first: Int, last: Int, partnerID: String!, private: Boolean, viewingRoomID: String): ArtworkConnection @deprecated(reason: "This is only for use in resolving stitched queries, not for first-class client use.")
  partnerCategories(categoryType: PartnerCategoryType, internal: Boolean = false, size: Int): [PartnerCategory]
  partnerCategory(id: String!): PartnerCategory
  partnerShowDocumentsConnection(after: String, before: String, first: Int, last: Int, page: Int, partnerID: String!, showID: String!, size: Int): PartnerShowDocumentConnection @deprecated(reason: "Prefer `partner.documentsConnection`")
  partnersConnection(after: String, before: String, defaultProfilePublic: Boolean, eligibleForListing: Boolean, excludeFollowedPartners: Boolean, first: Int, ids: [String], includePartnersNearIpBasedLocation: Boolean = false, includePartnersWithFollowedArtists: Boolean, last: Int, maxDistance: Int, near: String, partnerCategories: [String], sort: PartnersSortType, type: [PartnerClassification]): PartnerConnection
  phoneNumber(phoneNumber: String!, regionCode: String): PhoneNumberType
  previewSavedSearch(attributes: PreviewSavedSearchAttributes): PreviewSavedSearch
  profile(id: String!): Profile
  profilesConnection(after: String, before: String, first: Int, ids: [String], last: Int, term: String): ProfileConnection
  purchase(id: String!): Purchase
  purchasesConnection(after: String, artistId: String, artworkId: String, before: String, first: Int, last: Int, page: Int, saleId: String, size: Int, userId: String): PurchasesConnection
  recentlySoldArtworks(after: String, before: String, first: Int, last: Int): RecentlySoldArtworkTypeConnection
  requestLocation(ip: String): RequestLocation
  sale(id: String!): Sale
  saleAgreement(id: ID!): SaleAgreement!
  saleAgreementsConnection(after: String, before: String, first: Int, last: Int, status: SaleAgreementStatus): SaleAgreementConnection
  saleArtwork(id: String!): SaleArtwork
  saleArtworksConnection(after: String, aggregations: [SaleArtworkAggregation], artistIDs: [String], before: String, biddableSale: Boolean, estimateRange: String, excludeClosedLots: Boolean, first: Int, geneIDs: [String], includeArtworksByFollowedArtists: Boolean, isAuction: Boolean, last: Int, liveSale: Boolean, marketable: Boolean, page: Int, saleID: ID, saleSlug: String, size: Int, sort: String, userId: String): SaleArtworksConnection
  salesConnection(after: String, auctionState: AuctionState, before: String, first: Int, ids: [String], isAuction: Boolean = true, last: Int, live: Boolean = true, published: Boolean = true, registered: Boolean, sort: SaleSorts, term: String): SaleConnection
  searchConnection(after: String, aggregations: [SearchAggregation], before: String, entities: [SearchEntity], first: Int, last: Int, mode: SearchMode, page: Int, query: String!): SearchableConnection
  seoExperimentArtists: [String]
  shortcut(id: ID!): Shortcut
  show(id: String!, includeAllShows: Boolean = false): Show
  showsConnection(after: String, atAFair: Boolean, before: String, displayable: Boolean = true, first: Int, hasLocation: Boolean, ids: [String], last: Int, sort: ShowSorts, status: EventStatus, term: String): ShowConnection
  staticContent(id: String): StaticContent
  system: System
  tag(id: String!): Tag
  targetSupply: TargetSupply
  user(email: String, id: String): User
  usersConnection(after: String, before: String, first: Int, ids: [String], last: Int, term: String): UserConnection
  vanityURLEntity(id: String!): VanityURLEntityType
  verifyAddress(input: VerifyAddressInput!): VerifyAddressPayload
  verifyUser(email: String!, recaptchaToken: String!): VerifyUser
  viewingRoom(id: ID!): ViewingRoom
  viewingRooms(after: String, before: String, featured: Boolean, first: Int, last: Int, partnerID: ID, published: Boolean, statuses: [ViewingRoomStatusEnum!] = [live]): ViewingRoomConnection @deprecated(reason: "Use viewingRoomsConnection")
  viewingRoomsConnection(after: String, before: String, featured: Boolean, first: Int, ids: [ID!], last: Int, partnerID: ID, statuses: [ViewingRoomStatusEnum!] = [live]): ViewingRoomsConnection
}

type ViewingRoom {
  artworkIDs: [String!]!
  artworksConnection(after: String, before: String, first: Int, last: Int): ArtworkConnection
  body: String
  distanceToClose(short: Boolean! = false): String
  distanceToOpen(short: Boolean! = false): String
  endAt: String
  exhibitionPeriod: String
  firstLiveAt: String
  heroImageURL: String @deprecated(reason: "Use image field instead")
  href: String
  image: GravityARImage
  internalID: ID!
  introStatement: String
  partner: Partner
  partnerArtworksConnection(after: String, before: String, first: Int, last: Int): ArtworkConnection
  partnerID: String!
  published: Boolean!
  pullQuote: String
  slug: String!
  startAt: String
  status: String!
  subsections: [ViewingRoomSubsection!]!
  timeZone: String
  title: String!
  viewingRoomArtworks: [ViewingRoomArtwork!]!
}

type ViewingRoomArtwork {
  artworkID: ID!
  internalID: ID!
  published: Boolean!
}

input ViewingRoomArtworkInput {
  artworkID: ID!
  delete: Boolean = false
  internalID: ID
  position: Int
}

input ViewingRoomAttributes {
  body: String
  endAt: String
  introStatement: String
  pullQuote: String
  startAt: String
  timeZone: String
  title: String
}

type ViewingRoomConnection {
  edges: [ViewingRoomEdge]
  pageCursors: PageCursors!
  pageInfo: PageInfo!
  totalCount: Int
}

type ViewingRoomEdge {
  cursor: String!
  node: ViewingRoom
}

union ViewingRoomOrErrorsUnion = Errors | ViewingRoom

type ViewingRoomPublishedNotificationItem {
  partner: Partner
  viewingRoomIDs: [String]
  viewingRoomsConnection(after: String, before: String, first: Int, last: Int): ViewingRoomsConnection
}

enum ViewingRoomStatusEnum {
  closed
  draft
  live
  scheduled
}

type ViewingRoomSubsection {
  body: String
  caption: String
  image: ARImage
  imageURL: String
  internalID: ID!
  title: String
}

input ViewingRoomSubsectionAttributes {
  body: String
  caption: String
  title: String
}

input ViewingRoomSubsectionInput {
  attributes: ViewingRoomSubsectionAttributes
  delete: Boolean = false
  image: ARImageInput
  internalID: ID
}

type ViewingRoomsConnection {
  edges: [ViewingRoomsEdge]
  pageCursors: PageCursors!
  pageInfo: PageInfo!
  totalCount: Int
}

type ViewingRoomsEdge {
  cursor: String!
  node: ViewingRoom
}

enum Visibility {
  LISTED
  UNLISTED
}

type WireTransfer {
  isManualPayment: Boolean!
}

type YearRange {
  endAt: Int
  startAt: Int
}

type addOrderedSetItemFailure {
  mutationError: GravityMutationError
}

input addOrderedSetItemMutationInput {
  clientMutationId: String
  geminiToken: String
  id: String!
  itemId: String!
  position: Int
}

type addOrderedSetItemMutationPayload {
  addOrderedSetItemResponseOrError: addOrderedSetItemResponseOrError
  clientMutationId: String
}

union addOrderedSetItemResponseOrError = addOrderedSetItemFailure | addOrderedSetItemSuccess

type addOrderedSetItemSuccess {
  set: OrderedSet
  setItem: OrderedSetItem
}

type addUserRoleFailure {
  mutationError: GravityMutationError
}

input addUserRoleMutationInput {
  clientMutationId: String
  id: String!
  role_type: String!
}

type addUserRoleMutationPayload {
  clientMutationId: String
  userOrError: addUserRoleResponseOrError
}

union addUserRoleResponseOrError = addUserRoleFailure | addUserRoleSuccess

type addUserRoleSuccess {
  user: User
}

enum addressType {
  BUSINESS
  OTHER
  TEMPORARY
}

enum contactType {
  ADMIN
  PARTNER
}

input createAlertInput {
  acquireable: Boolean
  additionalGeneIDs: [String]
  artistIDs: [String]!
  artistSeriesIDs: [String]
  atAuction: Boolean
  attributionClass: [String]
  clientMutationId: String
  colors: [String]
  dimensionRange: String
  height: String
  inquireableOnly: Boolean
  keyword: String
  locationCities: [String]
  majorPeriods: [String]
  materialsTerms: [String]
  offerable: Boolean
  partnerIDs: [String]
  priceRange: String
  settings: AlertSettingsInput
  sizes: [String]
  width: String
}

type createAlertPayload {
  clientMutationId: String
  responseOrError: CreateAlertResponseOrError
}

input createCollectionInput {
  clientMutationId: String
  name: String!
  shareableWithPartners: Boolean
}

type createCollectionPayload {
  clientMutationId: String
  responseOrError: CreateCollectionResponseOrError
}

union createFeatureResponseOrError = CreateFeatureFailure | CreateFeatureSuccess

type createHeroUnitFailure {
  mutationError: GravityMutationError
}

union createHeroUnitResponseOrError = createHeroUnitFailure | createHeroUnitSuccess

type createHeroUnitSuccess {
  heroUnit: HeroUnit
}

type createOrderedSetFailure {
  mutationError: GravityMutationError
}

union createOrderedSetResponseOrError = createOrderedSetFailure | createOrderedSetSuccess

type createOrderedSetSuccess {
  set: OrderedSet
}

type createPartnerOfferFailure {
  mutationError: GravityMutationError
}

input createPartnerOfferMutationInput {
  artwork_id: String!
  clientMutationId: String
  discount_percentage: Int!
  note: String
}

type createPartnerOfferMutationPayload {
  clientMutationId: String
  partnerOfferOrError: createPartnerOfferResponseOrError
}

union createPartnerOfferResponseOrError = createPartnerOfferFailure | createPartnerOfferSuccess

type createPartnerOfferSuccess {
  partner: Partner
  partnerOffer: PartnerOffer
}

input createPurchaseInput {
  artsyCommission: Float
  artworkID: String
  clientMutationId: String
  discoverAdminID: String
  email: String
  fairID: String
  note: String
  ownerID: String
  ownerType: String
  saleAdminID: String
  saleDate: String
  saleID: String
  salePrice: Float
  source: String
  userID: String
}

type createPurchasePayload {
  clientMutationId: String
  responseOrError: CreatePurchaseResponseOrError
}

type createUserAdminNoteFailure {
  mutationError: GravityMutationError
}

input createUserAdminNoteMutationInput {
  body: String!
  clientMutationId: String
  id: String!
}

type createUserAdminNoteMutationPayload {
  adminNoteOrError: createUserAdminNoteResponseOrError
  clientMutationId: String
}

union createUserAdminNoteResponseOrError = createUserAdminNoteFailure | createUserAdminNoteSuccess

type createUserAdminNoteSuccess {
  adminNote: UserAdminNotes
}

type createUserInterestForUserFailure {
  mutationError: GravityMutationError
}

union createUserInterestForUserResponseOrError = createUserInterestForUserFailure | createUserInterestForUserSuccess

type createUserInterestForUserSuccess {
  user: User
  userInterest: UserInterest
}

input deleteAlertInput {
  clientMutationId: String
  id: String!
}

type deleteAlertPayload {
  clientMutationId: String
  responseOrError: DeleteAlertResponseOrError
}

input deleteCollectionInput {
  clientMutationId: String
  id: String!
}

type deleteCollectionPayload {
  clientMutationId: String
  responseOrError: DeleteCollectionResponseOrError
}

type deleteHeroUnitFailure {
  mutationError: GravityMutationError
}

input deleteHeroUnitMutationInput {
  clientMutationId: String
  id: String!
}

type deleteHeroUnitMutationPayload {
  clientMutationId: String
  heroUnitOrError: deleteHeroUnitResponseOrError
}

union deleteHeroUnitResponseOrError = deleteHeroUnitFailure | deleteHeroUnitSuccess

type deleteHeroUnitSuccess {
  heroUnit: HeroUnit
}

type deleteOrderedSetFailure {
  mutationError: GravityMutationError
}

type deleteOrderedSetItemFailure {
  mutationError: GravityMutationError
}

input deleteOrderedSetItemMutationInput {
  clientMutationId: String
  id: String!
  itemId: String!
}

type deleteOrderedSetItemMutationPayload {
  clientMutationId: String
  deleteOrderedSetItemResponseOrError: deleteOrderedSetItemResponseOrError
}

union deleteOrderedSetItemResponseOrError = deleteOrderedSetItemFailure | deleteOrderedSetItemSuccess

type deleteOrderedSetItemSuccess {
  set: OrderedSet
  setItem: OrderedSetItem
}

input deleteOrderedSetMutationInput {
  clientMutationId: String
  id: String!
}

type deleteOrderedSetMutationPayload {
  clientMutationId: String
  orderedSetOrError: deleteOrderedSetResponseOrError
}

union deleteOrderedSetResponseOrError = deleteOrderedSetFailure | deleteOrderedSetSuccess

type deleteOrderedSetSuccess {
  set: OrderedSet
}

input deletePurchaseInput {
  clientMutationId: String
  id: String!
}

type deletePurchasePayload {
  clientMutationId: String
  responseOrError: DeletePurchaseResponseOrError
}

type deleteUserAdminNoteFailure {
  mutationError: GravityMutationError
}

input deleteUserAdminNoteMutationInput {
  adminNoteId: String!
  clientMutationId: String
  id: String!
}

type deleteUserAdminNoteMutationPayload {
  adminNoteOrError: deleteUserAdminNoteResponseOrError
  clientMutationId: String
}

union deleteUserAdminNoteResponseOrError = deleteUserAdminNoteFailure | deleteUserAdminNoteSuccess

type deleteUserAdminNoteSuccess {
  adminNote: UserAdminNotes
}

type deleteUserInterestForUserFailure {
  mutationError: GravityMutationError
}

union deleteUserInterestForUserResponseOrError = deleteUserInterestForUserFailure | deleteUserInterestForUserSuccess

type deleteUserInterestForUserSuccess {
  user: User
  userInterest: UserInterest
}

type deleteUserRoleFailure {
  mutationError: GravityMutationError
}

input deleteUserRoleMutationInput {
  clientMutationId: String
  id: String!
  role_type: String!
}

type deleteUserRoleMutationPayload {
  clientMutationId: String
  userOrError: deleteUserRoleResponseOrError
}

union deleteUserRoleResponseOrError = deleteUserRoleFailure | deleteUserRoleSuccess

type deleteUserRoleSuccess {
  user: User
}

type dimensions {
  cm: String
  in: String
}

type partnerBiographyBlurb {
  text: String
}

type purchases {
  totalAuctionCount: Int!
  totalPrivateSaleCount: Int!
}

input setOrderFulfillmentOptionInput {
  clientMutationId: String
  fulfillmentOption: FulfillmentOptionInput!
  id: ID!
}

type setOrderFulfillmentOptionPayload {
  clientMutationId: String
  orderOrError: OrderMutationResponse
}

enum sort {
  ASC
  DESC
}

input startIdentityVerificationMutationInput {
  clientMutationId: String
  identityVerificationId: String!
}

type startIdentityVerificationMutationPayload {
  clientMutationId: String
  startIdentityVerificationResponseOrError: StartIdentityVerificationResponseOrError
}

input submitOrderInput {
  clientMutationId: String
  confirmationToken: String
  id: ID!
  oneTimeUse: Boolean
}

type submitOrderPayload {
  clientMutationId: String
  orderOrError: OrderMutationResponse
}

input unsetOrderFulfillmentOptionInput {
  clientMutationId: String
  id: ID!
}

type unsetOrderFulfillmentOptionPayload {
  clientMutationId: String
  orderOrError: OrderMutationResponse
}

input unsetOrderPaymentMethodInput {
  clientMutationId: String
  id: ID!
}

type unsetOrderPaymentMethodPayload {
  clientMutationId: String
  orderOrError: OrderMutationResponse
}

input updateAlertInput {
  acquireable: Boolean
  additionalGeneIDs: [String]
  artistIDs: [String]
  artistSeriesIDs: [String]
  atAuction: Boolean
  attributionClass: [String]
  clientMutationId: String
  colors: [String]
  dimensionRange: String
  height: String
  id: String!
  inquireableOnly: Boolean
  keyword: String
  locationCities: [String]
  majorPeriods: [String]
  materialsTerms: [String]
  offerable: Boolean
  partnerIDs: [String]
  priceRange: String
  settings: AlertSettingsInput
  sizes: [String]
  width: String
}

type updateAlertPayload {
  clientMutationId: String
  responseOrError: UpdateAlertResponseOrError
}

type updateArtworkFailure {
  mutationError: GravityMutationError
}

union updateArtworkResponseOrError = updateArtworkFailure | updateArtworkSuccess

type updateArtworkSuccess {
  artwork: Artwork
}

input updateCollectionInput {
  clientMutationId: String
  id: String!
  name: String
  private: Boolean
  shareableWithPartners: Boolean
}

type updateCollectionPayload {
  clientMutationId: String
  responseOrError: UpdateCollectionResponseOrError
}

union updateCollectorProfileResponseOrError = UpdateCollectorProfileFailure | UpdateCollectorProfileSuccess

type updateHeroUnitFailure {
  mutationError: GravityMutationError
}

union updateHeroUnitResponseOrError = updateHeroUnitFailure | updateHeroUnitSuccess

type updateHeroUnitSuccess {
  heroUnit: HeroUnit
}

input updateMeCollectionsMutationInput {
  attributes: [UpdateMeCollectionInput!]!
  clientMutationId: String
}

type updateMeCollectionsMutationPayload {
  clientMutationId: String
  meCollectionsOrErrors: [UpdateMeCollectionsResponseOrError!]!
}

input updateNotificationPreferencesMutationInput {
  authenticationToken: String
  clientMutationId: String
  subscriptionGroups: [NotificationPreferenceInput!]!
}

type updateNotificationPreferencesMutationPayload {
  clientMutationId: String
  notificationPreferences(authenticationToken: String): [NotificationPreference!]!
}

input updateOrderInput {
  clientMutationId: String
  creditCardWalletType: OrderCreditCardWalletTypeEnum
  id: ID!
  paymentMethod: OrderPaymentMethodEnum
  stripeConfirmationToken: String
}

type updateOrderPayload {
  clientMutationId: String
  orderOrError: OrderMutationResponse
}

input updateOrderShippingAddressInput {
  buyerPhoneNumber: String
  buyerPhoneNumberCountryCode: String
  clientMutationId: String
  id: ID!
  shippingAddressLine1: String
  shippingAddressLine2: String
  shippingCity: String
  shippingCountry: String
  shippingName: String
  shippingPostalCode: String
  shippingRegion: String
}

type updateOrderShippingAddressPayload {
  clientMutationId: String
  orderOrError: OrderMutationResponse
}

input updatePurchaseInput {
  artsyCommission: Float
  artworkID: String
  clientMutationId: String
  discoverAdminID: String
  email: String
  fairID: String
  id: String!
  note: String
  ownerID: String
  ownerType: String
  saleAdminID: String
  saleDate: String
  saleID: String
  salePrice: Float
  source: String
  userID: String
}

type updatePurchasePayload {
  clientMutationId: String
  responseOrError: UpdatePurchaseResponseOrError
}

input updateQuizMutationInput {
  artworkId: String!
  clearInteraction: Boolean
  clientMutationId: String
  userId: String!
}

type updateQuizMutationPayload {
  clientMutationId: String
  quiz: Quiz
}